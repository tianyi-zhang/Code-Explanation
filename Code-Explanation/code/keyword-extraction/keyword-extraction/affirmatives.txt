You can also get process CPU usage (without writing your own JNI code), but you need to cast the java.lang.management.OperatingSystemMXBean to a com.sun.management.OperatingSystemMXBeanI mean that the logger.isDebugEnabled() control should be the job of the logging framework, not my jobIf I read the spec correctly the automatic serialVersionUID shouldn't change if you change the value of a static of transient fieldTo clone a generic interface like java.util.List you will just need to cast itsetAcceptor(TabAcceptor a_acceptor) should let the consumer code decide whether to let one tab transfer from one tabbed pane to anotherNote that you have to use Integer instead of int or you can't use a custom comparator.The only problem with this approach is that you need to start JVM with deploy.jar in bootclasspath e.gSay you want to have a function passed in with a String param that returns an int. First you have to define an interface with the function as its only member, if you can't reuse an existing one.Since you are starting with a String, you need to covert to a DOM object (e.g. Node) before you can use the Transformer.With this listenerSet to register a new listener you just have to add it to the set, and even if it is not removed explicitly, if the listener is no longer referenced, it will be removed automatically by the JVM.If the manager stores your listener with a WeakReference, that means you don't need to remove the register e.gThe canonical example of self documenting code applies in this case - give a descriptive variable name to the ignored IOException that you must catch on close().You need to use the newly exposed methods in DefaultHandler2 or use the TransformerHandler approach where you can set the output key CDATA_SECTION_ELEMENTS, which takes a whitespace delimited list of tag names that should output sub text sections enclosed in CDATA.Thus this list isn't truly immutable and a call to asList() should be wrapped with Collections.unmodifiableList().Be careful with creating a new Date object! You should make sure to represent the date of the LogRecordYou must add setActionCommand to the JRadioButton then just do:Note: If we want to maintain the insertion order then we need to use LinkedHashSet in place of HashSet.Matt B's solution gets the number of directories to backtrack wrong -- it should be the length of the base path minus the number of common path elements, minus one (for the last path element, which is either a filename or a trailing "" generated by split)If you're using Java 1.5 (or higher) you should consider replacing StringBuffer with StringBuilder (if you're still using Java 1.4 you should consider a change of employer instead).So what about our 2nd scenario? Well we can see that pos is 1, so that means that foo[1] must be nullDepending on your application server, you should be able to provide ILegacyService at any location that fitsYou might want to look into either creating a class that implements the HttpSession interface yourself for the purposes of unit testing only (a stub), and running your tests off of that, or you should take a look at dwnLoadCel and determine if it really needs to have a reference to the HttpSession, or if it just needs some properties within the HttpSessionSince the method you're testing (dwnLoadCel.doAuthorization()) only depends on an HttpSession object, that is what you should mockThe question becomes: what do you expect the SUT to actually do with the session object? You need to express in your expectations the calls to session and their corresponding return values that are supposed to result in doAuthorization returning true.Similarly, you can validate if a String is a float or a double but in those cases you have to encounter only one . (dot) in the String and of course check if digits == (aString.length()-1)But for API < 11 you have to import android.text.ClipboardManager and for API >= 11 android.content.ClipboardManagerYou only have to grab it as Document, not as a String.It sounds to me like Monitor should be generic in the type of account it can monitor, so your EmailMonitor should extend Monitor<EmailAccount>You'll need to follow the Decorator pattern established in java.io to implement this.an elapsed amount of time, with no reference to a calendar system) then you should probably be using Duration for the most part - you can then call toPeriod (specifying whatever PeriodType you want to reflect whether 25 hours becomes 1 day and 1 hour or not, etc) to get a Period which you can format.super.MyMethod() should be called inside the MyMethod() of the class BThis is rather theoretical case and in most cases you should prefer java null safe API, but NullPointerException is subclass of an Exception. Thus it is a form of Throwable that indicates conditions that a reasonable application might want to catch (javadoc)! To use the first most advantage of exceptions and separate error-handling code from 'regular' code (according to creators of Java) it is appropriate, as for me, to catch NullPointerException.Add this class into some random package, and then call the registerExceptionHandler method and you should be ready to go.I don't know how efficient it is but the below code works as well.You need to define a BiFunction at the beginningYou need to change the EL-Resolver in faces-config.xml from org.springframework.web.jsf.el.SpringBeanFacesELResolver toI have to admit that the column names don't appear when using the above examples (I usually use the DefaultTableModel's setDataVector method), so if anyone has any suggestions on how to make the column names appear, please do :)What you need to do is to add ${java.home}/lib/deploy.jar to your project and to init the library like the following:So you should write the signature of getList as follows to make the call work:Then you just need to invoke the getByValue() method with the String input in it.