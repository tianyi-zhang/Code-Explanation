def __init__ self id None version_id None created None updated None data None self id id self version_id version_id self created created self updated updated self data data
def __init__ self name engine_name None workflow_datastore_id None host None port None connection_url None s3_artifacts_path None s3_logs_path None state DatastoreState INACTIVE concurrency 1 args None extra_data None tags None user_id anonymous self name name self engine_name engine_name self workflow_datastore_id workflow_datastore_id self host host self port port self connection_url connection_url self s3_artifacts_path s3_artifacts_path self s3_logs_path s3_logs_path self state state self concurrency concurrency self args args self extra_data extra_data self tags tags or self user_id user_id
staticmethod def from_file_or_hash benchmark_lookup db None if isinstance db list dbs db else dbs db if isinstance benchmark_lookup str and len benchmark_lookup 40 for db in dbs if not db continue benchmark_data db get_benchmark benchmark_lookup if benchmark_data return benchmark_data if hasattr benchmark_lookup readline or os path exists benchmark_lookup return BenchmarkData from_file benchmark_lookup else raise ValueError Could not find benchmark in db and fs format benchmark_lookup
staticmethod def from_file filename if hasattr filename readline return BenchmarkData pickle load filename else with open filename rb as fp return BenchmarkData pickle load fp
property def digest_size self return len self digest encode utf 8
property def block_size self return self hasher block_size
def update self arg return self hasher update arg
def digest self values_hash self hasher hexdigest def get_components chunks self split_list values_hash len self composition for idx subhash in enumerate chunks int_hash int subhash 16 words self composition idx num_words len words yield words int_hash num_words return self sep join get_components
def copy self c self __class__ self composition lambda None self sep c hasher self hasher copy return c
def action self user self args user if self args user else None reset True if self args reset else False if self args generate generate_network user reset elif self args publish publish_network user reset
def __init__ self url team user pw self url url self team team self user user self pw pw
