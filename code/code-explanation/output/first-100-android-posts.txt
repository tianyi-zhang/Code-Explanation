===UCLA===
PostId: 40189
Score: 13
Accepted: 0
ViewCount: 67715
Tags: <android><authentication><proxy>
<p>I remember having the same problem - After searching on the web, I found this solution - From the command line,</p>

<pre><code>1. &gt; adb shell
2. # sqlite3 /data/data/com.android.providers.settings/databases/settings.db
3. sqlite&gt; INSERT INTO system VALUES(99,â€™http_proxy', 'proxy:port');
4. sqlite&gt;.exit
</code></pre>

<p>EDIT:
Edited answer to reflect the latest version of Android.</p>

===UCLA===
PostId: 46766
Score: 32
Accepted: 1
ViewCount: 22302
Tags: <android><overlay><android-mapview>
<p>For the sake of completeness I'll repeat the discussion on Reto's post over at the <a href="http://groups.google.com/group/android-developers/browse_thread/thread/36fe0648dabfe745#">Android Groups</a> here.</p>

<p>It seems that if you set the bounds on your drawable it does the trick:</p>

<pre><code>Drawable defaultMarker = r.getDrawable(R.drawable.icon);

// You HAVE to specify the bounds! It seems like the markers are drawn
// through Drawable.draw(Canvas) and therefore must have its bounds set
// before drawing.
defaultMarker.setBounds(0, 0, defaultMarker.getIntrinsicWidth(),
    defaultMarker.getIntrinsicHeight());

MyItemizedOverlay markers = new MyItemizedOverlay(defaultMarker);
overlays.add(markers);
</code></pre>

<p>Btw, the above is shamelessly ripped from the demo at <a href="http://www.marcelp.info/2008/09/01/android-itemizedoverlay-demo/">MarcelP.info</a>. Also see <a href="http://androidguys.com/?p=1413">here</a> for a good howto.</p>

===UCLA===
PostId: 121853
Score: 31
Accepted: 1
ViewCount: 12907
Tags: <java><android><multithreading>
<p>Share a java.lang.Object between the two threads, whose sole purpose is to tell the worker thread when it can continue its work.  Whenever the worker thread reaches a point where it should sleep, it does this:</p>

<pre><code>stick.wait();
</code></pre>

<p>When the view thread finishes its onDraw work, it calls this:</p>

<pre><code>stick.notify();
</code></pre>

<p>Note the requirement that the view thread owns the monitor on the object.  In your case, this should be fairly simple to enforce with a small sync block:</p>

<pre><code>void onDraw() {
  ...
  synchronized (stick) {
    stick.notify();
  }
} // end onDraw()
</code></pre>

<p>Consult the javadoc for java.lang.Object on these methods (and notifyAll, just in case); they're very well written.  </p>

===UCLA===
PostId: 151940
Score: 1744
Accepted: 1
ViewCount: 499383
Tags: <android><android-activity><application-state>
<p>You need to override <code>onSaveInstanceState(Bundle savedInstanceState)</code> and write the application state values you want to change to the <code>Bundle</code> parameter like this:</p>

<pre><code>@Override
public void onSaveInstanceState(Bundle savedInstanceState) {
  super.onSaveInstanceState(savedInstanceState);
  // Save UI state changes to the savedInstanceState.
  // This bundle will be passed to onCreate if the process is
  // killed and restarted.
  savedInstanceState.putBoolean("MyBoolean", true);
  savedInstanceState.putDouble("myDouble", 1.9);
  savedInstanceState.putInt("MyInt", 1);
  savedInstanceState.putString("MyString", "Welcome back to Android");
  // etc.
}
</code></pre>

<p>The Bundle is essentially a way of storing a NVP ("Name-Value Pair") map, and it will get passed in to <code>onCreate()</code> and also <code>onRestoreInstanceState()</code> where you'd extract the values like this:</p>

<pre><code>@Override
public void onRestoreInstanceState(Bundle savedInstanceState) {
  super.onRestoreInstanceState(savedInstanceState);
  // Restore UI state from the savedInstanceState.
  // This bundle has also been passed to onCreate.
  boolean myBoolean = savedInstanceState.getBoolean("MyBoolean");
  double myDouble = savedInstanceState.getDouble("myDouble");
  int myInt = savedInstanceState.getInt("MyInt");
  String myString = savedInstanceState.getString("MyString");
}
</code></pre>

<p>You would usually use this technique to store instance values for your application (selections, unsaved text, etc.).</p>

===UCLA===
PostId: 236756
Score: 9
Accepted: 0
ViewCount: 7934
Tags: <java><android><api><multimedia>
<p>There's a special broadcast Intent that should get called every time an application writes anything new to the Media Store:</p>

<pre><code>Intent.ACTION_MEDIA_SCANNER_SCAN_FILE
</code></pre>

<p>The Broadcast Intent includes the path to the new file, accessible through the <code>Intent.getDataString()</code> method.</p>

<p>To listen for it, just create a <code>BroadcastReceiver</code> and register it using an <code>IntentFilter</code> as shown below:</p>

<pre><code>registerReceiver(new BroadcastReceiver() {
    @Override
    public void onReceive(Context context, Intent intent) {
      String newFileURL = intent.getDataString();
      // TODO React to new Media here.  
    }    
  }, new IntentFilter(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE));
</code></pre>

<p>This will only work for files being inserted into one of the Media Store Content Providers. Also, it depends on the application that's putting it there broadcasting the intent, which all the native (Google) application do.</p>

===UCLA===
PostId: 238297
Score: 236
Accepted: 1
ViewCount: 58358
Tags: <android><menu>
<p><a href="http://developer.android.com/reference/android/content/ClipboardManager.html">http://developer.android.com/reference/android/content/ClipboardManager.html</a></p>

<p>Use <code>ClipboardManager.setPrimaryClip</code> method:</p>

<pre><code>ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE); 
ClipData clip = ClipData.newPlainText("label", "Text to copy");
clipboard.setPrimaryClip(clip);
</code></pre>

===UCLA===
PostId: 280237
Score: 19
Accepted: 0
ViewCount: 42322
Tags: <android><android-mapview>
<p>The trick here is to place another Layout container where you want to put the ZoomControls and then insert the ZoomControls into that.</p>

<p>The real trick is to use the <code>RelativeLayout</code> rather than <code>LinearLayout</code> to position the elements, as shown in this sample <code>layout.xml</code>:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" 
    android:layout_width="fill_parent" 
    android:layout_height="fill_parent"&gt; 
  &lt;com.google.android.maps.MapView
    android:id="@+id/myMapView"
    android:layout_width="fill_parent" 
    android:layout_height="fill_parent"
    android:enabled="true"
    android:clickable="true"
    android:apiKey="MY_MAP_API_KEY"
  /&gt;
  &lt;LinearLayout android:id="@+id/layout_zoom" 
    android:layout_width="wrap_content" 
    android:layout_height="wrap_content" 
    android:layout_alignParentBottom="true" 
    android:layout_centerHorizontal="true" 
  /&gt; 
&lt;/RelativeLayout&gt;
</code></pre>

<p>The *layout_zoom* LinearLayout element is positioned in the bottom center of the screen, placing it over the middle/bottom of the <code>MapView</code>. </p>

<p>Then within your Activity's <code>onCreate</code>, get a reference to the *layout_zoom* element and insert the ZoomControl into it, much like you've already done:</p>

<pre><code>LinearLayout zoomLayout =(LinearLayout)findViewById(R.id.layout_zoom);  
View zoomView = myMapView.getZoomControls(); 
zoomLayout.addView(zoomView, new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)); 
myMapView.displayZoomControls(true);
</code></pre>

<p>The ZoomControls should now appear on a long click, without stealing the map touch events.</p>

===UCLA===
PostId: 325159
Score: 4
Accepted: 0
ViewCount: 42322
Tags: <android><android-mapview>
<p>Reto : thanks for your reply, but the idea was to do it <em>without</em> using XML layouts.</p>

<p>I eventually worked out the problem.  Because a MapView is a subclass of ViewGroup, you can easily add child views (like the zoom controls).  All you need is a MapView.LayoutParams instance and you're good to go.  I did something like this (puts zoom controls in the bottom center of the mapview).</p>

<pre><code>  // layout to insert zoomcontrols at the bottom center of a mapview
  MapView.LayoutParams params = MapView.LayoutParams(
    LayoutParams.WRAP_CONTENT,
    LayoutParams.WRAP_CONTENT,
    mapViewWidth / 2, mapViewHeight,
    MapView.LayoutParams.BOTTOM_CENTER);

  // add zoom controls
  mapView.addView(mapView.getZoomControls(), params);
</code></pre>

===UCLA===
PostId: 339021
Score: 15
Accepted: 1
ViewCount: 24093
Tags: <android><menu><icons><android-listview>
<p>What I typically do for a ListView is to implement my own Adapter by extending the handy BaseAdapter class.  One of the abstract methods you'll implement will be getView() as the previous poster mentioned.  From there you can inflate a layout containing an ImageView, get a reference to it using findViewById, and set the image to whatever drawable you've added into your resources.</p>

<pre><code>public View getView(int position, View convertView, ViewGroup parent) {

    View row = inflater.inflate(R.layout.menu_row, null);

     ImageView icon = (ImageView) row.findViewById(R.id.icon);
     icon.setImageResource(..your drawable's id...);

     return view;
}
</code></pre>

===UCLA===
PostId: 340691
Score: -7
Accepted: 0
ViewCount: 113632
Tags: <android><android-listview>
<p>This assumes you know the position of the element in the ListView :</p>

<pre><code>  View element = listView.getListAdapter().getView(position, null, null);
</code></pre>

<p>Then you should be able to call getLeft() and getTop() to determine the elements on screen position.</p>

===UCLA===
PostId: 385806
Score: 4
Accepted: 0
ViewCount: 14233
Tags: <java><android><dns>
<p>I don't think it's possible for general case. For WiFi I found this:</p>

<pre><code>WiFiManager wifi = (WifiManager) getSystemService(WIFI_SERVICE); 
DhcpInfo info = wifi.getDhcpInfo();
</code></pre>

===UCLA===
PostId: 426241
Score: 87
Accepted: 0
ViewCount: 346142
Tags: <java><android><web-services><soap><wsdl>
<p><code>org.apache.http.impl.client.DefaultHttpClient</code> comes in the Android SDK by default. That'll get you connected to the WSDL.</p>

<pre><code>HttpClient httpClient = new DefaultHttpClient();
HttpContext localContext = new BasicHttpContext();
HttpGet httpGet = new HttpGet("http://www.example.com/" + URL);
HttpResponse response = httpClient.execute(httpGet, localContext);
</code></pre>

===UCLA===
PostId: 432155
Score: 1894
Accepted: 1
ViewCount: 718112
Tags: <android><text><center><textview>
<p>I'm assuming you're using XML layout.</p>

<pre><code>&lt;TextView  
    android:layout_width="match_parent" 
    android:layout_height="match_parent" 
    android:gravity="center"
    android:text="@string/**yourtextstring**"
/&gt;
</code></pre>

<p>and as @stealthcopter commented 
in java: <code>.setGravity(Gravity.CENTER);</code></p>

===UCLA===
PostId: 436162
Score: 38
Accepted: 1
ViewCount: 51257
Tags: <android><sqlite><prepared-statement>
<p>I use prepared statements in Android all the time, it's quite simple :</p>

<pre><code>SQLiteDatabase db = dbHelper.getWritableDatabase();
SQLiteStatement stmt = db.compileStatement("SELECT * FROM Country WHERE code = ?");
stmt.bindString(1, "US");
stmt.execute();
</code></pre>

===UCLA===
PostId: 436821
Score: 72
Accepted: 1
ViewCount: 29327
Tags: <android><user-interface><long-click>
<p>On the onCreate method call <a href="http://developer.android.com/reference/android/app/Activity.html#registerForContextMenu%28android.view.View%29">registerForContextMenu</a> like this:</p>

<pre><code>registerForContextMenu(getListView());
</code></pre>

<p>and then populate the menu on <a href="http://developer.android.com/reference/android/app/Activity.html#onCreateContextMenu%28android.view.ContextMenu,%20android.view.View,%20android.view.ContextMenu.ContextMenuInfo%29">onCreateContextMenu(ContextMenu menu, View view, ContextMenuInfo menuInfo)</a>. The menuInfo argument can provide information about which item was long-clicked in this way:</p>

<pre><code>AdapterView.AdapterContextMenuInfo info;
try {
    info = (AdapterView.AdapterContextMenuInfo) menuInfo;
} catch (ClassCastException e) {
    Log.e(TAG, "bad menuInfo", e);
    return;
}
long id = getListAdapter().getItemId(info.position);
</code></pre>

<p>and you add menu items in the usual way calling <a href="http://developer.android.com/reference/android/view/Menu.html#add%28int,%20int,%20int,%20java.lang.CharSequence%29">menu.add</a>:</p>

<pre><code>menu.add(0, MENU_ITEM_ID, 0, R.string.menu_string);
</code></pre>

<p>and when the user picks an option, <a href="http://developer.android.com/reference/android/app/Activity.html#onContextItemSelected%28android.view.MenuItem%29">onContextItemSelected</a> is called. Also  <a href="http://developer.android.com/reference/android/app/Activity.html#onMenuItemSelected%28int,%20android.view.MenuItem%29">onMenuItemSelected</a> and this fact is not explicitly explained in the documentation except to say that you use the other method to receive the calls from the context menu; just be aware, don't share ids.</p>

<p>On onContextItemSelected you can get ahold of the MenuInfo and thus the id of the item selected by calling <a href="http://developer.android.com/reference/android/view/MenuItem.html#getMenuInfo%28%29">getMenuInfo()</a>:</p>

<pre><code>try {
    info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
} catch (ClassCastException e) {
    Log.e(TAG, "bad menuInfo", e);
    return false;
}
long id = getListAdapter().getItemId(info.position);
</code></pre>

===UCLA===
PostId: 439486
Score: 27
Accepted: 0
ViewCount: 102354
Tags: <android><sms>
<p>Using suggestions from others, I think I got it to work:</p>

<p>(using SDK v1 R2)</p>

<p>It's not perfect, since i need to delete the entire conversation, but for our purposes, it's a sufficient compromise as we will at least know all messages will be looked at and verified.  Our flow will probably need to then listen for the message, capture for the message we want, do a query to get the thread_id of the recently inbounded message and do the delete() call.</p>

<p>In our Activity:</p>

<pre><code>Uri uriSms = Uri.parse("content://sms/inbox");
Cursor c = getContentResolver().query(uriSms, null,null,null,null); 
int id = c.getInt(0);
int thread_id = c.getInt(1); //get the thread_id
getContentResolver().delete(Uri.parse("content://sms/conversations/" + thread_id),null,null);
</code></pre>

<p>Note:  I wasn't able to do a delete on content://sms/inbox/ or content://sms/all/</p>

<p>Looks like the thread takes precedence, which makes sense, but the error message only emboldened me to be angrier.  When trying the delete on sms/inbox/ or sms/all/, you will probably get:</p>

<pre><code>java.lang.IllegalArgumentException: Unknown URL
    at com.android.providers.telephony.SmsProvider.delete(SmsProvider.java:510)
    at android.content.ContentProvider$Transport.delete(ContentProvider.java:149)
    at android.content.ContentProviderNative.onTransact(ContentProviderNative.java:149)
</code></pre>

<p>For additional reference too, make sure to put this into your manifest for your intent receiver:</p>

<pre><code>&lt;receiver android:name=".intent.MySmsReceiver"&gt;
    &lt;intent-filter&gt;
        &lt;action android:name="android.provider.Telephony.SMS_RECEIVED"&gt;&lt;/action&gt;
    &lt;/intent-filter&gt;
&lt;/receiver&gt;
</code></pre>

<p>Note the receiver tag does not look like this:</p>

<pre><code>&lt;receiver android:name=".intent.MySmsReceiver" 
    android:permission="android.permission.RECEIVE_SMS"&gt;
</code></pre>

<p>When I had those settings, android gave me some crazy permissions exceptions that didn't allow android.phone to hand off the received SMS to my intent.  So, DO NOT put that RECEIVE_SMS permission attribute in your intent!  Hopefully someone wiser than me can tell me why that was the case.</p>

===UCLA===
PostId: 449824
Score: 149
Accepted: 1
ViewCount: 64337
Tags: <android><android-intent><android-activity><exit>
<p>I'll focus on answering how to resolve your workround so that it behaves as you want.</p>

<p>To capture actions performed on one Activity within another requires three steps.</p>

<p>Launch the secondary Activity (your 'camera Activity') as a subactivity by using <code>startActivityForResult</code> instead of <code>startActivity</code>.</p>

<pre><code>Intent i = new Intent(this,CameraActivity.class);    
startActivityForResult(i, STATIC_INTEGER_VALUE);
</code></pre>

<p>Within the subactivity (camera Activity), rather than just closing the Activity when a user clicks the different tab image, you need to create a new Intent and include the index of the tab to display when you return to the parent app using the extras bundle. To pass it back to the parent call <code>setResult</code> before calling <code>finish</code> to close the camera Activity.</p>

<pre><code>resultIntent = new Intent(null);
resultIntent.putExtra(PUBLIC_STATIC_STRING_IDENTIFIER, tabIndexValue);
setResult(Activity.RESULT_OK, resultIntent);
finish();
</code></pre>

<p>The final step is in the calling Activity, override <code>onActivityResult</code> to listen for callbacks from the camera Activity. Get the extra from the returned Intent to determine the index of the tab you should be displaying.</p>

<pre><code>@Override 
public void onActivityResult(int requestCode, int resultCode, Intent data) {     
  super.onActivityResult(requestCode, resultCode, data); 
  switch(requestCode) { 
    case (STATIC_INTEGER_VALUE) : { 
      if (resultCode == Activity.RESULT_OK) { 
      int tabIndex = data.getIntExtra(PUBLIC_STATIC_STRING_IDENTIFIER);
      // TODO Switch tabs using the index.
      } 
      break; 
    } 
  } 
}
</code></pre>

===UCLA===
PostId: 454806
Score: 16
Accepted: 1
ViewCount: 6351
Tags: <java><android><popup><timer>
<p>You're trying to show a text message in a popup for a short period of time on the screen?</p>

<p>For these kind of alerts toasts are great:</p>

<pre><code>Toast.makeText(this, "Match!", Toast.LENGTH_LONG).show();
</code></pre>

<p>Is that what you are looking for?
<a href="http://code.google.com/android/reference/android/widget/Toast.html#makeText(android.content.Context,%20java.lang.CharSequence,%20int)">Here is the Java Doc.</a></p>

===UCLA===
PostId: 456918
Score: 726
Accepted: 1
ViewCount: 302591
Tags: <android><rotation><android-activity>
<p><strong>Using the Application Class</strong></p>

<p>Depending on what you're doing in your initialization you could consider creating a new class that extends <code>Application</code> and moving your initialization code into an overridden <code>onCreate</code> method within that class.</p>

<pre><code>public class MyApplicationClass extends Application {
  @Override
  public void onCreate() {
    super.onCreate();
    // TODO Put your application initialization code here.
  }
}
</code></pre>

<p>The <code>onCreate</code> in the application class is only called when the entire application is created, so the Activity restarts on orientation or keyboard visibility changes won't trigger it.</p>

<p>It's good practice to expose the instance of this class as a singleton and exposing the application variables you're initializing using getters and setters.</p>

<p><em>NOTE: You'll need to specify the name of your new Application class in the manifest for it to be registered and used:</em></p>

<pre><code>&lt;application
    android:name="com.you.yourapp.MyApplicationClass"
</code></pre>

<p><strong>Reacting to Configuration Changes</strong> <em>[UPDATE: this is deprecated since API 13; <a href="http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html">see the recommended alternative</a>]</em></p>

<p>As a further alternative, you can have your application listen for events that would cause a restart â€“ like orientation and keyboard visibility changes â€“ and handle them within your Activity.</p>

<p>Start by adding the <code>android:configChanges</code> node to your Activity's manifest node</p>

<pre><code>android:configChanges="keyboardHidden|orientation"
</code></pre>

<p>or for <a href="http://stackoverflow.com/a/9550231/2291">Android 3.2 (API level 13) and newer</a>:</p>

<pre><code>android:configChanges="keyboardHidden|orientation|screenSize"
</code></pre>

<p>Then within the Activity override the <code>onConfigurationChanged</code> method and call <code>setContentView</code> to force the GUI layout to be re-done in the new orientation.</p>

<pre><code>@Override
public void onConfigurationChanged(Configuration newConfig) {
  super.onConfigurationChanged(newConfig);
  setContentView(R.layout.myLayout);
}
</code></pre>

===UCLA===
PostId: 456941
Score: 182
Accepted: 1
ViewCount: 297013
Tags: <android><date><time><formatting><format>
<p>Use the standard Java DateFormat class.</p>

<p>For example to display the current date and time do the following:</p>

<pre><code>Date date = new Date(location.getTime());
DateFormat dateFormat = android.text.format.DateFormat.getDateFormat(getApplicationContext());
mTimeText.setText("Time: " + dateFormat.format(date));
</code></pre>

<p>You can initialise a Date object with your own values, however you should be aware that the constructors have been deprecated and you should really be using a Java Calendar object.</p>

===UCLA===
PostId: 460556
Score: 35
Accepted: 1
ViewCount: 13174
Tags: <android><text><popup><android-edittext>
<p>The easiest solution to your problem is to display your <code>EditText</code> within a separate <code>dialog</code> themed Activity that you launch from within your main (portrait-fixed) Activity. </p>

<p>The EditText Activity shouldn't have its orientation fixed, so it will rotate as you'd expect when you slide out the keyboard. </p>

<p><strong>Creating the Text Entry Activity</strong></p>

<p>Create a new Activity the contains only the EditText View and anything else you want to include (probably OK / Cancel buttons and maybe a label?). Within the manifest set its theme to <code>Theme.Dialog</code>.</p>

<pre><code>&lt;activity android:name="TextEntryActivity" 
          android:label="My Activity" 
          android:theme="@android:style/Theme.Dialog"/&gt;
</code></pre>

<p>Fogging or Blurring the Activities behind a dialog is done by modifying the Window properties of the foreground Activity (your text entry dialog). Within it's onCreate method use <code>getWindow().setFlags</code> to apply blurring to any background Activities.</p>

<pre><code>getWindow().setFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND,  
                     WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
</code></pre>

<p><strong>Launching and Reading Entered Values from the Text Entry Activity</strong></p>

<p>Use <code>startActivityForResult</code> to launch the text entry Activity. Within that Activity call <code>setResult</code> to return the text string entered within the returned intent using the techniques described in <a href="http://stackoverflow.com/questions/449484/android-capturing-the-return-of-an-activity#449824">this post</a>.</p>

<p>Override the <code>onActivityResult</code> method to listen for the result from the sub Activity.</p>

<p><strong>Triggering Launch on Keyboard Exposed</strong></p>

<p>You can launch the text entry Activity whenever you want, but if you want to always display it when the keyboard is exposed you can capture this event explicitely.</p>

<p>Start by adding the <code>android:configChanges</code> attribute to the portrait Activity's manifest entry. It should be registered to listen for <code>keyboardHidden</code>.</p>

<pre><code>android:configChanges="keyboardHidden"
</code></pre>

<p>Within that Activity, override <code>onConfigurationChanged</code> to launch the text entry Activity.</p>

<pre><code>@Override
public void onConfigurationChanged(Configuration newConfig) {  
  Intent i = new Intent(this,TextEntryActivity.class);    
  startActivityForResult(i, STATIC_INTEGER_VALUE);
}
</code></pre>

<p>You may want to check to confirm the keyboard is being exposed (rather than hidden) using the newConfig variable before launching the text entry Activity.</p>

<p>You may also want to use the same technique to automatically return from the text entry activity when the keyboard is hidden.</p>

===UCLA===
PostId: 460927
Score: 44
Accepted: 0
ViewCount: 149709
Tags: <android>
<p>I'd start with something like this (and if there is something wrong with my code, I'd of course appreciate any comment):</p>

<pre><code>public class ItemsList extends ListActivity {

private ItemsAdapter adapter;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    setContentView(R.layout.items_list);

    this.adapter = new ItemsAdapter(this, R.layout.items_list_item, ItemManager.getLoadedItems());
    setListAdapter(this.adapter);
}

private class ItemsAdapter extends ArrayAdapter&lt;Item&gt; {

    private Item[] items;

    public ItemsAdapter(Context context, int textViewResourceId, Item[] items) {
        super(context, textViewResourceId, items);
        this.items = items;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View v = convertView;
        if (v == null) {
            LayoutInflater vi = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            v = vi.inflate(R.layout.items_list_item, null);
        }

        Item it = items[position];
        if (it != null) {
            ImageView iv = (ImageView) v.findViewById(R.id.list_item_image);
            if (iv != null) {
                iv.setImageDrawable(it.getImage());
            }
        }

        return v;
    }
}

@Override
protected void onListItemClick(ListView l, View v, int position, long id) {
    this.adapter.getItem(position).click(this.getApplicationContext());
}
}
</code></pre>

<p>E.g. extending ArrayAdapter with own type of Items (holding information about your pictures) and overriden <code>getView()</code> method, that prepares view for items within list. There is also method <code>add()</code> on ArrayAdapter to add items to the end of the list.</p>

<p><code>R.layout.items_list</code> is simple layout with <code>ListView</code></p>

<p><code>R.layout.items_list_item</code> is layout representing one item in list</p>

===UCLA===
PostId: 472463
Score: 32
Accepted: 0
ViewCount: 90227
Tags: <android><reverse-geocoding><street-address>
<p>It looks like there's two things happening here.</p>

<p>1) You've missed the <code>new</code> keyword from before calling the constructor.</p>

<p>2) The parameter you're passing in to the Geocoder constructor is incorrect. You're passing in a <code>Locale</code> where it's expecting a <code>Context</code>.</p>

<p>There are two <code>Geocoder</code> constructors, both of which require a <code>Context</code>, and one also taking a <code>Locale</code>:</p>

<pre><code>Geocoder(Context context, Locale locale)
Geocoder(Context context)
</code></pre>

<p><strong>Solution</strong></p>

<p>Modify your code to pass in a valid Context and include <code>new</code> and you should be good to go.</p>

<pre><code>Geocoder myLocation = new Geocoder(getApplicationContext(), Locale.getDefault());   
List&lt;Address&gt; myList = myLocation.getFromLocation(latPoint, lngPoint, 1);
</code></pre>

<p><strong>Note</strong></p>

<p>If you're still having problems it may be a permissioning issue. Geocoding implicitly uses the Internet to perform the lookups, so your application will require an <code>INTERNET</code> uses-permission tag in your manifest. </p>

<p>Add the following uses-permission node within the <code>manifest</code> node of your manifest.</p>

<pre><code>&lt;uses-permission android:name="android.permission.INTERNET" /&gt;
</code></pre>

===UCLA===
PostId: 475001
Score: 2
Accepted: 0
ViewCount: 90227
Tags: <android><reverse-geocoding><street-address>
<p>Well, I am still stumped.  So here is more code. </p>

<p>Before I leave my map, I call <code>SaveLocation(myMapView,myMapController);</code> This is what ends up calling my geocoding information.</p>

<p>But since <code>getFromLocation</code> can throw an <code>IOException</code>, I had to do the following to call SaveLocation</p>

<pre><code>try
{
    SaveLocation(myMapView,myMapController);
}
catch (IOException e) 
{
    // TODO Auto-generated catch block
    e.printStackTrace();
}
</code></pre>

<p>Then I have to change SaveLocation by saying it throws IOExceptions : </p>

<pre><code> public void SaveLocation(MapView mv, MapController mc) throws IOException{
    //I do this : 
    Geocoder myLocation = new Geocoder(getApplicationContext(), Locale.getDefault());   
    List myList = myLocation.getFromLocation(latPoint, lngPoint, 1);
//...
    }
</code></pre>

<p>And it crashes every time.</p>

===UCLA===
PostId: 476718
Score: 20
Accepted: 1
ViewCount: 30226
Tags: <android><dom><webkit><dom-events>
<p>OK, this is interesting. My use case is that I have a series of links (<code>A</code> tags) on a screen in a WebKit view. To test what events area available, using jQuery 1.3.1, I attached every event listed on <a href="http://www.quirksmode.org/dom/events/">this page</a> (even ones that don't make sense) to the links then used the up, down, and enter controls on the Android emulator and noted which events fired in which circumstances.</p>

<p>Here is the code I used to attach the events, with results to follow. Note, I'm using "live" event binding because for my application, the <code>A</code> tags are inserted dynamically.</p>

<pre><code>$.each([
    'blur',
    'change',
    'click',
    'contextmenu',
    'copy',
    'cut',
    'dblclick',
    'error',
    'focus',
    'keydown',
    'keypress',
    'keyup',
    'mousedown',
    'mousemove',
    'mouseout',
    'mouseover',
    'mouseup',
    'mousewheel',
    'paste',
    'reset',
    'resize',
    'scroll',
    'select',
    'submit',

    // W3C events
    'DOMActivate',
    'DOMAttrModified',
    'DOMCharacterDataModified',
    'DOMFocusIn',
    'DOMFocusOut',
    'DOMMouseScroll',
    'DOMNodeInserted',
    'DOMNodeRemoved',
    'DOMSubtreeModified',
    'textInput',

    // Microsoft events
    'activate',
    'beforecopy',
    'beforecut',
    'beforepaste',
    'deactivate',
    'focusin',
    'focusout',
    'hashchange',
    'mouseenter',
    'mouseleave'
], function () {
    $('a').live(this, function (evt) {
        alert(evt.type);
    });
});
</code></pre>

<p>Here's how it shook out:</p>

<ul>
<li><p>On first page load with nothing highlighted (no ugly orange selection box around any item), using down button to select the first item, the following events fired (in order): <code>mouseover</code>, <code>mouseenter</code>, <code>mousemove</code>, <code>DOMFocusIn</code></p></li>
<li><p>With an item selected, moving to the next item using the down button, the following events fired (in order): <code>mouseout</code>, <code>mouseover</code>, <code>mousemove</code>, <code>DOMFocusOut</code>, <code>DOMFocusIn</code></p></li>
<li><p>With an item selected, clicking the "enter" button, the following events fired (in order): <code>mousemove</code>, <code>mousedown</code>, <code>DOMFocusOut</code>, <code>mouseup</code>, <code>click</code>, <code>DOMActivate</code></p></li>
</ul>

<p>This strikes me as a bunch of random garbage. And, who's that cheeky IE-only event (<code>mouseenter</code>) making a cameo, then taking the rest of the day off? Oh well, at least now I know what events to watch for.</p>

<p>It would be great if others want to take my test code and do a more thorough run through, perhaps using form elements, images, etc.</p>

===UCLA===
PostId: 477000
Score: 54
Accepted: 1
ViewCount: 90227
Tags: <android><reverse-geocoding><street-address>
<p>The following code snippet is doing it for me (lat and lng are doubles declared above this bit):</p>

<pre><code>Geocoder geocoder = new Geocoder(this, Locale.getDefault());
List&lt;Address&gt; addresses = geocoder.getFromLocation(lat, lng, 1);
</code></pre>

===UCLA===
PostId: 499598
Score: 1
Accepted: 0
ViewCount: 13161
Tags: <java><android><message>
<p>Thanks Brian, however, it seems Telephony is used by code posted on <a href="http://www.anddev.org/recognize-react_on_incoming_sms-t295.html" rel="nofollow">this site</a>.</p>

<p>In this excerpt from Apress (ISBN: 978-1-43021-064-1) by Chris Haseman, it is used too:</p>

<blockquote>
  <p>Telephony class is used for sms messaging, </p>

<pre><code>(Context context, Intent intent)
{
SmsMessage msg[] =
    Telephony.Sms.Intents.getMessagesFromIntent(intent);
...
</code></pre>
</blockquote>

===UCLA===
PostId: 504023
Score: 25
Accepted: 0
ViewCount: 38963
Tags: <java><android><android-tabhost>
<p>Just to confirm dominics answer, here's his solution in code (that actually works):</p>

<pre><code>tabHost.setOnTabChangedListener(new OnTabChangeListener() {
    public void onTabChanged(String tabId) {
        if (TAB_MAP.equals(tabId)) {
            ImageView iv = (ImageView) tabHost.getTabWidget().getChildAt(0).findViewById(android.R.id.icon);
            iv.setImageDrawable(getResources().getDrawable(R.drawable.tab_map_black));
            iv = (ImageView) tabHost.getTabWidget().getChildAt(1).findViewById(android.R.id.icon);
            iv.setImageDrawable(getResources().getDrawable(R.drawable.tab_list_white));
        } else if (TAB_LIST.equals(tabId)) {
            ImageView iv = (ImageView) tabHost.getTabWidget().getChildAt(0).findViewById(android.R.id.icon);
            iv.setImageDrawable(getResources().getDrawable(R.drawable.tab_map_white));
            iv = (ImageView) tabHost.getTabWidget().getChildAt(1).findViewById(android.R.id.icon);
            iv.setImageDrawable(getResources().getDrawable(R.drawable.tab_list_black));
        }
    }
});
</code></pre>

<p>Of course it's not polished at all and using those direct indices in getChildAt() is not nice at all...</p>

===UCLA===
PostId: 524191
Score: 23
Accepted: 1
ViewCount: 10449
Tags: <android><user-interface><integer>
<p>The NumberPicker widget is probably what you want.  Unfortunatly it's located in com.android.internal.Widget.NumberPicker which we cannot get to through normal means.</p>

<p>There are two ways to use it:</p>

<ol>
<li>Copy the code from android source</li>
<li>Use reflection to access the widget</li>
</ol>

<p>Here's the xml for using it in a layout:</p>

<pre><code>&lt;com.android.internal.widget.NumberPicker
    android:id="@+id/picker"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"/&gt;
</code></pre>

<p>Here's the reflection to set the NumberPicker settings (I have not tested this):</p>

<pre><code>Object o = findViewById(R.id.picker);
Class c = o.getClass();
try 
{
    Method m = c.getMethod("setRange", int.class, int.class);
    m.invoke(o, 0, 9);
} 
catch (Exception e) 
{
    Log.e("", e.getMessage());
}
</code></pre>

<p>Since it's an internal widget and not in the SDK, future compatibility could be broken if you use reflection.  It would be safest to roll your own from the source.</p>

<p>The original source for this informaiton is here:</p>

<p><a href="http://groups.google.com/group/android-developers/browse_frm/thread/65da9820998fddc9/6151cc9800e6a04d#6151cc9800e6a04d">http://groups.google.com/group/android-developers/browse_frm/thread/65da9820998fddc9/6151cc9800e6a04d#6151cc9800e6a04d</a></p>

===UCLA===
PostId: 526604
Score: 76
Accepted: 1
ViewCount: 57921
Tags: <android><time><widget><chronometer>
<p>If you look at the source of the Chronometer class, you'll see that it doesn't store the elapsed time in a field and it calculates it internally every time it needs to update the display.</p>

<p>However it's relatively easy to do the same in your own code:</p>

<pre><code>long elapsedMillis = SystemClock.elapsedRealtime() - chronometerInstance.getBase();
</code></pre>

<p>This assumes that you have started your clock something like this:</p>

<pre><code>chronometerInstance.setBase(SystemClock.elapsedRealtime());
chronometerInstance.start();
</code></pre>

<p>Here's a full example:</p>

<pre><code>public class ChronoExample extends Activity {
Chronometer mChronometer;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    LinearLayout layout = new LinearLayout(this);
    layout.setOrientation(LinearLayout.VERTICAL);

    mChronometer = new Chronometer(this);
    layout.addView(mChronometer);

    Button startButton = new Button(this);
    startButton.setText("Start");
    startButton.setOnClickListener(mStartListener);
    layout.addView(startButton);

    Button stopButton = new Button(this);
    stopButton.setText("Stop");
    stopButton.setOnClickListener(mStopListener);
    layout.addView(stopButton);

    Button resetButton = new Button(this);
    resetButton.setText("Reset");
    resetButton.setOnClickListener(mResetListener);
    layout.addView(resetButton);        

    setContentView(layout);
}

private void showElapsedTime() {
    long elapsedMillis = SystemClock.elapsedRealtime() - mChronometer.getBase();            
    Toast.makeText(ChronoExample.this, "Elapsed milliseconds: " + elapsedMillis, 
            Toast.LENGTH_SHORT).show();
}

View.OnClickListener mStartListener = new OnClickListener() {
    public void onClick(View v) {
        mChronometer.start();
        showElapsedTime();
    }
};

View.OnClickListener mStopListener = new OnClickListener() {
    public void onClick(View v) {
        mChronometer.stop();
        showElapsedTime();
    }
};

View.OnClickListener mResetListener = new OnClickListener() {
    public void onClick(View v) {
        mChronometer.setBase(SystemClock.elapsedRealtime());
        showElapsedTime();
    }
};
}
</code></pre>

<p>One somewhat confusing thing about Chronometer is that you can't really use it as a stopwatch that gets started, stopped and restarted again. When it's running, it will always show the time elapsed since you last reset it, <em>no matter how many times and for how long you have stopped it in the meantime</em>. When it is stopped, it simply stops updating the display.</p>

<p>If you need something like a stopwatch you'll have to subclass Chronometer or maybe create your own version using the <a href="http://www.google.com/codesearch/p?hl=en#uX1GffpyOZk/core/java/android/widget/Chronometer.java&amp;q=android%20chronometer">source</a>.</p>

<p><img src="http://farm4.static.flickr.com/3301/3273256911_192eae1767_o.png" alt="alt text" /></p>

===UCLA===
PostId: 527228
Score: 17
Accepted: 1
ViewCount: 30453
Tags: <android><user-interface><service><broadcastreceiver><intentfilter>
<p>Your best bet would seem to be using a <code>BroadcastReceiver</code>. You can create a new BroadcastReceiver that listens for the Intent to trigger your notification and start your service like this:</p>

<pre><code>public class MyIntentReceiver extends BroadcastReceiver {    
  @Override 
  public void onReceive(Context _context, Intent _intent) {
    if (_intent.getAction().equals(MY_INTENT)) {
      // TODO Broadcast a notification
      _context.startService(new Intent(_context, MyService.class));
    }
  }    
}
</code></pre>

<p>And you can register this IntentReceiver directly in the application Manifest without needing to include it within an Activity:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
  package="com.domain.myapplication"&gt;
  &lt;application android:icon="@drawable/icon" android:label="@string/app_name"&gt;
    &lt;service android:enabled="true" android:name="MyService"&gt;&lt;/service&gt;
    &lt;receiver android:enabled="true" android:name="MyIntentReceiver"&gt;
      &lt;intent-filter&gt;
        &lt;action android:name="MY_INTENT" /&gt;
      &lt;/intent-filter&gt;
    &lt;/receiver&gt;
  &lt;/application&gt;
&lt;/manifest&gt; 
</code></pre>

===UCLA===
PostId: 531465
Score: 13
Accepted: 1
ViewCount: 13713
Tags: <android><location><distance>
<p>You should Modify lines:</p>

<pre><code>aLocation.setLatitude(myLocation.getLatitudeE6() / 1e6);
aLocation.setLongitude(myLocation.getLongitudeE6() / 1e6);
</code></pre>

<p>And remove the lines:</p>

<pre><code>aLocation.set(aLocation);
bLocation.set(bLocation);
</code></pre>

===UCLA===
PostId: 551151
Score: 83
Accepted: 1
ViewCount: 34827
Tags: <android><android-image>
<p>You can use<code> startActivityForResult</code>, passing in an Intent that describes an action you want completed and and data source to perform the action on.</p>

<p>Luckily for you, Android includes an Action for picking things: <code>Intent.ACTION__PICK</code> and a data source containing pictures: 
<code>android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI</code> for images on the local device or
<code>android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI</code> for images on the SD card.</p>

<p>Call <code>startActivityForResult</code> passing in the pick action and the images you want the user to select from like this:</p>

<pre><code>startActivityForResult(new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI), SELECT_IMAGE);
</code></pre>

<p>Then override <code>onActivityResult</code> to listen for the user having made a selection.</p>

<pre><code>@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
  super.onActivityResult(requestCode, resultCode, data);
  if (requestCode == SELECT_IMAGE)
    if (resultCode == Activity.RESULT_OK) {
      Uri selectedImage = data.getData();
      // TODO Do something with the select image URI
    } 
}
</code></pre>

<p>Once you have the image Uri you can use it to access the image and do whatever you need to do with it.</p>

===UCLA===
PostId: 552380
Score: 113
Accepted: 1
ViewCount: 40209
Tags: <android>
<p>I assume by preferences you are referring to your application's preferences and not Android phone settings.</p>

<p>To store preferences between runs of you application you need to do the following</p>

<ol>
<li><p>Create a SharedPreferences object</p>

<pre><code>SharedPreferences settings = getSharedPreferences(String n, MODE_PRIVATE);
</code></pre>

<p><em>String n identifies your preferences and the second argument is the mode they'll be accessed</em></p></li>
<li><p>Instantiate an Editor object</p>

<pre><code>SharedPreferences.Editor editor = settings.edit();
</code></pre>

<p><em>Note: do not try settings.editor.edit(), this will not make a persistent object and the code below will not work</em></p></li>
<li><p>Write your preferences to the buffer</p>

<pre><code>editor.put...(String, value)
</code></pre>

<p><em>There are numerous put function, putString, putBoolean, etc.  The String is the key ("version", "good run") and the value is the value ("1.5.2", true)</em></p></li>
<li><p>Flush the buffer</p>

<pre><code>editor.commit();
</code></pre>

<p><em>This actually writes you put to the preferences.  If your app crashes before this line then the preferences will not be written.  There is also a documented bug:  commit() is supposed to return a boolean indicating success or failure.  Last I checked it always returned false.</em></p></li>
</ol>

<p>These preferences will by stored on the phone and will only be accessible to your application.</p>

<p>More documentation is <a href="http://developer.android.com/guide/topics/data/data-storage.html">here</a></p>

===UCLA===
PostId: 552403
Score: 24
Accepted: 0
ViewCount: 469733
Tags: <android><image><bitmap><out-of-memory><android-bitmap>
<p>I did the following to take the image and resize it on the fly. Hope this helps</p>

<pre><code>Bitmap bm;
bm = Bitmap.createScaledBitmap(BitmapFactory.decodeFile(filepath), 100, 100, true);
mPicture = new ImageView(context);
mPicture.setImageBitmap(bm);    
</code></pre>

===UCLA===
PostId: 559781
Score: 830
Accepted: 1
ViewCount: 461595
Tags: <android><image><url><android-listview><universal-image-loader>
<p>Here's what I created to hold the images that my app is currently displaying. Please note that the "Log" object in use here is my custom wrapper around the final Log class inside Android.</p>

<pre><code>package com.wilson.android.library;

/*
 Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
import java.io.IOException;

public class DrawableManager {
    private final Map&lt;String, Drawable&gt; drawableMap;

    public DrawableManager() {
        drawableMap = new HashMap&lt;String, Drawable&gt;();
    }

    public Drawable fetchDrawable(String urlString) {
        if (drawableMap.containsKey(urlString)) {
            return drawableMap.get(urlString);
        }

        Log.d(this.getClass().getSimpleName(), "image url:" + urlString);
        try {
            InputStream is = fetch(urlString);
            Drawable drawable = Drawable.createFromStream(is, "src");


            if (drawable != null) {
                drawableMap.put(urlString, drawable);
                Log.d(this.getClass().getSimpleName(), "got a thumbnail drawable: " + drawable.getBounds() + ", "
                        + drawable.getIntrinsicHeight() + "," + drawable.getIntrinsicWidth() + ", "
                        + drawable.getMinimumHeight() + "," + drawable.getMinimumWidth());
            } else {
              Log.w(this.getClass().getSimpleName(), "could not get thumbnail");
            }

            return drawable;
        } catch (MalformedURLException e) {
            Log.e(this.getClass().getSimpleName(), "fetchDrawable failed", e);
            return null;
        } catch (IOException e) {
            Log.e(this.getClass().getSimpleName(), "fetchDrawable failed", e);
            return null;
        }
    }

    public void fetchDrawableOnThread(final String urlString, final ImageView imageView) {
        if (drawableMap.containsKey(urlString)) {
            imageView.setImageDrawable(drawableMap.get(urlString));
        }

        final Handler handler = new Handler() {
            @Override
            public void handleMessage(Message message) {
                imageView.setImageDrawable((Drawable) message.obj);
            }
        };

        Thread thread = new Thread() {
            @Override
            public void run() {
                //TODO : set imageView to a "pending" image
                Drawable drawable = fetchDrawable(urlString);
                Message message = handler.obtainMessage(1, drawable);
                handler.sendMessage(message);
            }
        };
        thread.start();
    }

    private InputStream fetch(String urlString) throws MalformedURLException, IOException {
        DefaultHttpClient httpClient = new DefaultHttpClient();
        HttpGet request = new HttpGet(urlString);
        HttpResponse response = httpClient.execute(request);
        return response.getEntity().getContent();
    }
}
</code></pre>

===UCLA===
PostId: 559828
Score: 5
Accepted: 1
ViewCount: 8222
Tags: <android><eclipse><testing>
<p>I was not able to determine automatic deployment to the emulator.  However, you can take that same "adb shell" command and create an external launch configuration.  I blogged on this same topic <a href="http://stuffikeepforgettinghowtodo.blogspot.com/2009/01/unit-testing-android-applications.html" rel="nofollow">here</a>.  Launching this way is a bit more intuitive when you're also using the "-e debug true" argument.</p>

<p>However, I think I've gotten more mileage out of the bash shell script (if you're using a <em>good</em> development platform) :</p>

<pre><code>function adbtest() {
    adb shell  am instrument -w -e class blah.package.$1 blah.package.test/android.test.InstrumentationTestRunner;
}
</code></pre>

<p>That way when I want to test blah.package.FooTest I only need to remember to type:</p>

<pre><code>james@trex:~$ adbtest FooTest
</code></pre>

===UCLA===
PostId: 560006
Score: 34
Accepted: 1
ViewCount: 40882
Tags: <android>
<p>You could use the toString method of the android URI in combination of the String based constructor of the java URI</p>

<pre><code> android.net.URI auri = new android.net.URI(what ever);
 java.net.URI juri = new java.net.URI(auri.toString());
</code></pre>

<p><a href="http://developer.android.com/reference/android/net/Uri.html">Android URI</a>   | 
<a href="http://java.sun.com/j2se/1.5.0/docs/api/java/net/URI.html">Java URI</a></p>

===UCLA===
PostId: 560958
Score: 80
Accepted: 0
ViewCount: 34225
Tags: <java><android><user-interface><layout>
<p>I made my own layout that does what I want, but it is quite limited at the moment. Comments and improvement suggestions are of course welcome.</p>

<p>The activity:</p>

<pre><code>package se.fnord.xmms2.predicate;

import se.fnord.android.layout.PredicateLayout;
import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.widget.TextView;

public class Predicate extends Activity {
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        PredicateLayout l = new PredicateLayout(this);
        for (int i = 0; i &lt; 10; i++) {
            TextView t = new TextView(this);
            t.setText("Hello");
            t.setBackgroundColor(Color.RED);
            t.setSingleLine(true);
            l.addView(t, new PredicateLayout.LayoutParams(2, 0));
        }

        setContentView(l);
    }
}
</code></pre>

<p>Or in an XML layout:</p>

<pre><code>&lt;se.fnord.android.layout.PredicateLayout
    android:id="@+id/predicate_layout"
    android:layout_width="fill_parent" 
    android:layout_height="wrap_content"
/&gt;
</code></pre>

<p>And the Layout:</p>

<pre><code>package se.fnord.android.layout;

import android.content.Context;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;

/**
 * ViewGroup that arranges child views in a similar way to text, with them laid
 * out one line at a time and "wrapping" to the next line as needed.
 * 
 * Code licensed under CC-by-SA
 *  
 * @author Henrik Gustafsson
 * @see http://stackoverflow.com/questions/549451/line-breaking-widget-layout-for-android
 * @license http://creativecommons.org/licenses/by-sa/2.5/
 *
 */
public class PredicateLayout extends ViewGroup {

    private int line_height;

    public PredicateLayout(Context context) {
        super(context);
    }

    public PredicateLayout(Context context, AttributeSet attrs){
        super(context, attrs);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        assert(MeasureSpec.getMode(widthMeasureSpec) != MeasureSpec.UNSPECIFIED);

        final int width = MeasureSpec.getSize(widthMeasureSpec);

        // The next line is WRONG!!! Doesn't take into account requested MeasureSpec mode!
        int height = MeasureSpec.getSize(heightMeasureSpec) - getPaddingTop() - getPaddingBottom();
        final int count = getChildCount();
        int line_height = 0;

        int xpos = getPaddingLeft();
        int ypos = getPaddingTop();

        for (int i = 0; i &lt; count; i++) {
            final View child = getChildAt(i);
            if (child.getVisibility() != GONE) {
                final LayoutParams lp = (LayoutParams) child.getLayoutParams();
                child.measure(
                        MeasureSpec.makeMeasureSpec(width, MeasureSpec.AT_MOST),
                        MeasureSpec.makeMeasureSpec(height, MeasureSpec.UNSPECIFIED));

                final int childw = child.getMeasuredWidth();
                line_height = Math.max(line_height, child.getMeasuredHeight() + lp.height);

                if (xpos + childw &gt; width) {
                    xpos = getPaddingLeft();
                    ypos += line_height;
                }

                xpos += childw + lp.width;
            }
        }
        this.line_height = line_height;

        if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED){
            height = ypos + line_height;

        } else if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.AT_MOST){
            if (ypos + line_height &lt; height){
                height = ypos + line_height;
            }
        }
        setMeasuredDimension(width, height);
    }

    @Override
    protected LayoutParams generateDefaultLayoutParams() {
        return new LayoutParams(1, 1); // default of 1px spacing
    }

    @Override
    protected boolean checkLayoutParams(LayoutParams p) {
        return (p instanceof LayoutParams);
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        final int count = getChildCount();
        final int width = r - l;
        int xpos = getPaddingLeft();
        int ypos = getPaddingTop();

        for (int i = 0; i &lt; count; i++) {
            final View child = getChildAt(i);
            if (child.getVisibility() != GONE) {
                final int childw = child.getMeasuredWidth();
                final int childh = child.getMeasuredHeight();
                final LayoutParams lp = (LayoutParams) child.getLayoutParams();
                if (xpos + childw &gt; width) {
                    xpos = getPaddingLeft();
                    ypos += line_height;
                }
                child.layout(xpos, ypos, xpos + childw, ypos + childh);
                xpos += childw + lp.width;
            }
        }
    }
}
</code></pre>

<p>With the result:</p>

<p><img src="http://fnord.se/android/01-have2.png" alt="Wrapped widgets"></p>

===UCLA===
PostId: 565481
Score: 0
Accepted: 0
ViewCount: 40882
Tags: <android>
<p>Since the String constructing doesn't work have you tried just constructing it your self?</p>

<pre><code>android.net.URI auri = new android.net.URI(what ever);
java.net.URI juri = new java.net.URI(auri.getSchema(),
                                     auri.getSchemaSpecificPart(),
                                     auri.getFragment());
</code></pre>

<p>You might also want to double check that your getting valid data out of Android URI class. The docs as listed in my other answer discuss how it does pretty much no error checking. If there is infact an error the class just spits out garbage anyway and doesn't throw any exceptions. Which could very likely be why the java class which does do validation is throwing an exception.</p>

===UCLA===
PostId: 572015
Score: 10
Accepted: 0
ViewCount: 12912
Tags: <android><button><toggle><menuitem><togglebutton>
<p>You could do something like the snippet below as well, originally sourced from <a href="http://www.anddev.org/">anddev.org</a></p>

<pre><code>public boolean onPrepareOptionsMenu(final Menu menu) {       
      if(super.mMapView.isTraffic()) 
           menu.findItem(MENU_TRAFFIC_ID).setIcon(R.drawable.traffic_off_48); 
      else 
           menu.findItem(MENU_TRAFFIC_ID).setIcon(R.drawable.traffic_on_48); 

      return super.onPrepareOptionsMenu(menu); 
 }
</code></pre>

===UCLA===
PostId: 572265
Score: 6
Accepted: 0
ViewCount: 22401
Tags: <android><listview><focus>
<p>Although you specified in the xml you could try specifying in code as well.  Although i'm not sure you can set a list to not focusable and still have the list be scrollable and it's clickable.</p>

<p>after your setContentView...</p>

<pre><code>myListView.setFocusableInTouchMode(false);
</code></pre>

<p>You could try and inherit from the view as well and then add a little debugging code in the interim to help you find when the list actually has focus.</p>

<pre><code>    myListView.setOnFocusChangeListener(new OnFocusChangeListener(){

  public void onFocusChange(View v, boolean hasFocus)
  {
   v.setBackgroundColor(hasFocus ? Color.GRAY : Color.BLACK);
  }
    });

    myListView.setClickable(true);
</code></pre>

===UCLA===
PostId: 573239
Score: 4
Accepted: 0
ViewCount: 134255
Tags: <java><android><encoding><utf-8>
<p>You can use the multi-argument constructors of the <code>URI</code> class. From the <code>URI</code> javadoc:</p>

<blockquote>
  <p>The multi-argument constructors quote illegal characters as required by the components in which they appear. The percent character ('%') is always quoted by these constructors. Any other characters are preserved.</p>
</blockquote>

<p>So if you use</p>

<pre><code>URI uri = new URI("http", "www.google.com?q=a b");
</code></pre>

<p>Then you get <code>http:www.google.com?q=a%20b</code> which isn't quite right, but it's a little closer.</p>

<p>If you know that your string will not have URL fragments (e.g. <a href="http://example.com/page#anchor" rel="nofollow">http://example.com/page#anchor</a>), then you can use the following code to get what you want:</p>

<pre><code>String s = "http://www.google.com?q=a b";
String[] parts = s.split(":",2);
URI uri = new URI(parts[0], parts[1], null);
</code></pre>

<p>To be safe, you should scan the string for <code>#</code> characters, but this should get you started.</p>

===UCLA===
PostId: 576559
Score: 16
Accepted: 0
ViewCount: 62863
Tags: <java><android><download><httpurlconnection><fileoutputstream>
<p>One problem is your reading of the buffer. If every read of the input stream is not an exact multiple of 1024 you will copy bad data.  Use:</p>

<pre><code>byte[] buffer = new byte[1024];
int len1 = 0;
while ( (len1 = in.read(buffer)) != -1 ) {
  f.write(buffer,0, len1);
}
</code></pre>

===UCLA===
PostId: 576562
Score: 85
Accepted: 1
ViewCount: 62863
Tags: <java><android><download><httpurlconnection><fileoutputstream>
<p>I don't know if it's the only problem, but you've got a classic Java glitch in there: You're not counting on the fact that read() is <em>always</em> allowed to return fewer bytes than you ask for.  Thus, your read could get less than 1024 bytes but your write always writes out exactly 1024 bytes possibly including bytes from the previous loop iteration.</p>

<p>Correct with:</p>

<pre><code> while ( (len1 = in.read(buffer)) &gt; 0 ) {
         f.write(buffer,0, len1);
 }
</code></pre>

<p>Perhaps the higher latency networking or smaller packet sizes of 3G on Android are exacerbating the effect?</p>

===UCLA===
PostId: 587484
Score: 1
Accepted: 0
ViewCount: 764
Tags: <android><imageview>
<p>Read this <a href="http://www.developer.com/java/j2me/article.php/10934%5F3748281%5F1" rel="nofollow">Android Image Tutorial</a>. There's an example that uses FileOutputStream to write an image, I'm sure there's FileInputStream, too. Here's <a href="http://getablogger.blogspot.com/2008/01/android-download-image-from-server-and.html" rel="nofollow">another code example</a> that downloads images and transforms them to an Inputstream that is decoded:</p>

<pre><code>bmImg = BitmapFactory.decodeStream(is);
imView.setImageBitmap(bmImg);
</code></pre>

===UCLA===
PostId: 587939
Score: 0
Accepted: 0
ViewCount: 10260
Tags: <android><file><camera>
<p>Here you go : Hope this helps / Probably not the best way to go about it, but it worked. </p>

<p>///////////////////////////////////////////////////////////////////////////////
//
//   This is the camera capture image callback.
//<br>
//
//
//////////////////////////////////////////////////////////////////////////////</p>

<pre><code>import java.io.FileOutputStream;
import java.io.OutputStream;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.util.Log;
import android.widget.Toast;

public class ImageCaptureCallback implements PictureCallback  {

    private OutputStream filoutputStream;
    public ImageCaptureCallback(OutputStream filoutputStream) {
    this.filoutputStream = filoutputStream;



}
@Override  
public void onPictureTaken(byte[] data, Camera camera) {

    try {
            Log.v(getClass().getSimpleName(), "onPictureTaken=" + data + " length = " + data.length);


            FileOutputStream buf = new FileOutputStream("/sdcard/dcim/Camera/" + CameraActivity.filename + ".jpg");
            buf.write(data);
            buf.flush();
            buf.close();
          // filoutputStream.write(data);
            filoutputStream.flush();
            filoutputStream.close();

        } catch(Exception ex) {
            ex.printStackTrace();
        }
        }

}


enter code here
</code></pre>

===UCLA===
PostId: 594435
Score: 2
Accepted: 0
ViewCount: 42322
Tags: <android><android-mapview>
<p>from the <a href="http://groups.google.com/group/android-developers/browse%5Fthread/thread/b4a12843cd33497b" rel="nofollow">google groups thread</a> i found this:</p>

<p>ZoomControls without XML:</p>

<pre><code>   public class MyMapActivity extends MapActivity {  public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        RelativeLayout relativeLayout = new RelativeLayout(this);
        setContentView(relativeLayout);

        final MapView mapView = new MapView(this, DEBUG_MAP_API_KEY);
        RelativeLayout.LayoutParams mapViewLayoutParams = new
RelativeLayout.LayoutParams
(RelativeLayout.LayoutParams.FILL_PARENT,RelativeLayout.LayoutParams.FILL_PARENT );
        relativeLayout.addView(mapView, mapViewLayoutParams);

        RelativeLayout.LayoutParams zoomControlsLayoutParams = new
RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,
RelativeLayout.LayoutParams.WRAP_CONTENT );
        zoomControlsLayoutParams.addRule
(RelativeLayout.ALIGN_PARENT_BOTTOM);
        zoomControlsLayoutParams.addRule
(RelativeLayout.CENTER_HORIZONTAL);

        relativeLayout.addView(mapView.getZoomControls(),
zoomControlsLayoutParams);

        mapView.setClickable(true);
        mapView.setEnabled(true);

 }
</code></pre>

<p>was 100% working for me with SDK1.1</p>

===UCLA===
PostId: 601330
Score: 2
Accepted: 0
ViewCount: 8483
Tags: <java><android><shortcut><permissions><homescreen>
<p>I haven't run into this personally but I did do some research and found the following.</p>

<p>Apparently whatever is attempting to invoke your app or if your app has a call to create an intent and start an activity of some intent the UID is not the same.</p>

<p>In ActivityManagerServer.java there are below judgement in it.  </p>

<pre><code>int checkComponentPermission(String permission, int pid, int uid, int reqUid)
// If the target requires a specific UID, always fail for others.
   if (reqUid &gt;= 0 &amp;&amp; uid != reqUid) {
       return PackageManager.PERMISSION_DENIED;
   }
</code></pre>

<p>I'm going to do some testing on this and see if I can reproduce this in a test application and provide any additional feedback.</p>

<p>Make sure you are only trying to invoke publicly exposed activities through any intents.</p>

===UCLA===
PostId: 623399
Score: 46
Accepted: 1
ViewCount: 41370
Tags: <android>
<p>Depending on your needs there are a couple of alternatives to bring up the 'Ringtones' screen from your application.</p>

<p>If you want to bring up the actual preferences screen that is usually available through system settings -- letting your user modify the phone's universal ringtone settings through your application -- you can use the <code>ACTION_SOUND_SETTINGS</code> constant from the  <code>android.provider.Settings</code> class to create a new Intent to start the sound settings activity.</p>

<pre><code>startActivityForResult(new Intent(android.provider.Settings.ACTION_SOUND_SETTINGS, 0);
</code></pre>

<p>If you want to select a custom ringtone to use in your application you need to add a <code>RingtonePreference</code> in your <code>preferences.xml</code> definition file, like this:</p>

<pre><code>&lt;RingtonePreference
  android:key="alerts_ringtone"
  android:title="Select ringtone" 
  android:showDefault="true"
  android:showSilent="true"
  android:ringtoneType=""
/&gt;
</code></pre>

<p>You'll be able to get the uri to the selected preference in the application's default <code>SharedPreferences</code> using <code>alerts_ringtone</code> as the key.</p>

<p><em>The latter technique uses the <code>PreferenceActivity</code> class to host the preference options. I won't describe that in detail here, as the Android documentation has a <a href="http://developer.android.com/reference/android/preference/PreferenceActivity.html">good writeup</a> and some sample code.</em></p>

===UCLA===
PostId: 647165
Score: 2
Accepted: 0
ViewCount: 463
Tags: <iphone><android><user-interface><touchscreen>
<p>One obvious problem is that nowhere do you take account of the time since the last touch. </p>

<p>I would suggest you treat the players touch as an expression of desired movement on an analogue range from <code>-x/+x</code> and <code>-y/+y</code>, then perform the actual movement elsewhere based on time.</p>

<p>E.g.</p>

<pre><code>objectPos += objectPos + (joyPos * timeDelta * maxSpeed);
</code></pre>

<p>So if the max-speed of your object is 10ms-1 and the players finger is at 0.5 on the control pad then the object would be moving 5 meters every second. If your game is running at 10fps then each frame the object would move 0.5 meters.</p>

<p>These figures are fictional, but hopefully demonstrate the need to separate control from movement and then factor in time.</p>

===UCLA===
PostId: 649164
Score: 14
Accepted: 1
ViewCount: 28294
Tags: <android><camera><android-intent><mediastore>
<p>This worked with the following code, granted I was being a little dumb with the last one. I still think there's got to be a better way so that the original image is still saved somewhere. It still sends me the smaller 25% size image.</p>

<pre><code>public class CameraTest extends Activity {
/** Called when the activity is first created. */
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    Button cameraButton = (Button) findViewById(R.id.cameraButton);
    cameraButton.setOnClickListener( new OnClickListener(){
        public void onClick(View v ){

            Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");

            startActivityForResult(intent,0);
        }
    });

}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    if (requestCode== 0 &amp;&amp; resultCode == Activity.RESULT_OK) {
        Bitmap x = (Bitmap) data.getExtras().get("data");
        ((ImageView)findViewById(R.id.pictureView)).setImageBitmap(x);
        ContentValues values = new ContentValues();
        values.put(Images.Media.TITLE, "title");
        values.put(Images.Media.BUCKET_ID, "test");
        values.put(Images.Media.DESCRIPTION, "test Image taken");
        values.put(Images.Media.MIME_TYPE, "image/jpeg");
        Uri uri = getContentResolver().insert(Media.EXTERNAL_CONTENT_URI, values);
        OutputStream outstream;
        try {
            outstream = getContentResolver().openOutputStream(uri);
            x.compress(Bitmap.CompressFormat.JPEG, 70, outstream);
            outstream.close();
        } catch (FileNotFoundException e) {
            //
        } catch (IOException e) {
            //
        }
    }
}
</code></pre>

<p>Also, I do know that the cupcake release of Android should fix the small image size soon.</p>

===UCLA===
PostId: 659298
Score: 14
Accepted: 0
ViewCount: 218665
Tags: <android><crash><stack-trace>
<p>It is possible to handle these exceptions with <code>Thread.setDefaultUncaughtExceptionHandler()</code>, however this appears to mess with Android's method of handling exceptions. I attempted to use a handler of this nature:</p>

<pre><code>private class ExceptionHandler implements Thread.UncaughtExceptionHandler {
    @Override
    public void uncaughtException(Thread thread, Throwable ex){
        Log.e(Constants.TAG, "uncaught_exception_handler: uncaught exception in thread " + thread.getName(), ex);

        //hack to rethrow unchecked exceptions
        if(ex instanceof RuntimeException)
            throw (RuntimeException)ex;
        if(ex instanceof Error)
            throw (Error)ex;

        //this should really never happen
        Log.e(Constants.TAG, "uncaught_exception handler: unable to rethrow checked exception");
    }
}
</code></pre>

<p>However, even with rethrowing the exceptions, I was unable to get the desired behavior, ie logging the exception while still allowing Android to shutdown the component it had happened it, so I gave up on it after a while.</p>

===UCLA===
PostId: 663170
Score: 17
Accepted: 1
ViewCount: 18034
Tags: <android><contact>
<p>Use the address column. I guess the person column is ignored because people can send SMSs to phone numbers that are not in the contacts list.</p>

<pre><code>// address contains the phone number
Uri phoneUri = Uri.withAppendedPath(Contacts.Phones.CONTENT_FILTER_URL, address);
if (phoneUri != null) {
  Cursor phoneCursor = getContentResolver().query(phoneUri, new String[] {Phones._ID, Contacts.Phones.PERSON_ID}, null, null, null);
  if (phoneCursor.moveToFirst()) {
    long person = phonesCursor.getLong(1); // this is the person ID you need
  }
}
</code></pre>

===UCLA===
PostId: 663386
Score: 5
Accepted: 1
ViewCount: 6708
Tags: <android><android-activity><broadcastreceiver><android-contentprovider><dataflow>
<p>What you want is somewhat difficult and to me, rather inefficient. I would propose that you use the first alternative, but when you load the Cursor in the activity, check if there is no data, and then exit the activity.</p>

<pre><code>BroadcastReceiver.onReceive() {
  Intent intent = new Intent(...);
  intent.setData(...); // set a single String data
  context.startActivity(intent);
}

Activity.onCreate() {
  String value = intent.getData();  // get the String data
  Cursor = ContentProvider.query(search);

  if(cursor.isEmpty() ...){
    finish();
    return;
  }
  ...
  setContentView(...);
}
</code></pre>

<p>This will have the exact same effect, the cursor will only be loaded once, and the activity will only be displayed if something exists in the cursor. The only extra overhead is that the intent is fired no matter what, but that's not exactly taxing :) </p>

<p>Note that there won't be any flicker or anything either, Android handles the case of calling finish in onCreate() (I believe onStart and onResume as well) so that the user never knows it happened.</p>

===UCLA===
PostId: 672422
Score: 1
Accepted: 1
ViewCount: 4651
Tags: <java><android><surfaceview>
<p>Mis-diagnosis! The app re-creates the surface automatically, but there's a call in there that tries to draw to it before it's created.</p>

<p>Fixing the problem:</p>

<pre><code>boolean mSurfaceExists;
...
public void surfaceDestroyed(SurfaceHolder holder) {
    mSurfaceExists = false;
    ...
}

public void surfaceCreated(SurfaceHolder holder) {
    mSurfaceExists = true;
    ...
}

protected void onWindowVisibilityChanged(int visibility) {
    // only call base if there's a surface
    if(mSurfaceExists)
     super.onWindowVisibilityChanged(visibility);
}
</code></pre>

<p>Now it's all swell. (as far as I'm aware, anyway - Java/Android experts feel free to comment if this is bad practise!)</p>

===UCLA===
PostId: 673014
Score: 634
Accepted: 1
ViewCount: 307841
Tags: <android><bitmap><save>
<pre><code>FileOutputStream out = null;
try {
    out = new FileOutputStream(filename);
    bmp.compress(Bitmap.CompressFormat.PNG, 100, out); // bmp is your Bitmap instance
    // PNG is a lossless format, the compression factor (100) is ignored
} catch (Exception e) {
    e.printStackTrace();
} finally {
    try {
        if (out != null) {
            out.close();
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}
</code></pre>

===UCLA===
PostId: 675920
Score: 38
Accepted: 1
ViewCount: 83864
Tags: <.net><android><wcf><rest>
<p>To get started with WCF, it might be easiest to just use the default SOAP format and HTTP POST (rather than GET) for the web-service bindings.  The easiest HTTP binding to get working is "basicHttpBinding".  Here is an example of what the ServiceContract/OperationContract might look like for your login service:</p>

<pre><code>[ServiceContract(Namespace="http://mycompany.com/LoginService")]
public interface ILoginService
{
    [OperationContract]
    string Login(string username, string password);
}
</code></pre>

<p>The implementation of the service could look like this:</p>

<pre><code>public class LoginService : ILoginService
{
    public string Login(string username, string password)
    {
        // Do something with username, password to get/create sessionId
        // string sessionId = "12345678";
        string sessionId = OperationContext.Current.SessionId;

        return sessionId;
    }
}
</code></pre>

<p>You can host this as a windows service using a ServiceHost, or you can host it in IIS like a normal ASP.NET web (service) application.  There are a lot of tutorials out there for both of these.</p>

<p>The WCF service config might look like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;


    &lt;system.serviceModel&gt;
        &lt;behaviors&gt;
            &lt;serviceBehaviors&gt;
                &lt;behavior name="LoginServiceBehavior"&gt;
                    &lt;serviceMetadata /&gt;
                &lt;/behavior&gt;
            &lt;/serviceBehaviors&gt;
        &lt;/behaviors&gt;

        &lt;services&gt;
            &lt;service name="WcfTest.LoginService"
                     behaviorConfiguration="LoginServiceBehavior" &gt;
                &lt;host&gt;
                    &lt;baseAddresses&gt;
                        &lt;add baseAddress="http://somesite.com:55555/LoginService/" /&gt;
                    &lt;/baseAddresses&gt;
                &lt;/host&gt;
                &lt;endpoint name="LoginService"
                          address=""
                          binding="basicHttpBinding"
                          contract="WcfTest.ILoginService" /&gt;

                &lt;endpoint name="LoginServiceMex"
                          address="mex"
                          binding="mexHttpBinding"
                          contract="IMetadataExchange" /&gt;
            &lt;/service&gt;
        &lt;/services&gt;
    &lt;/system.serviceModel&gt;
&lt;/configuration&gt;
</code></pre>

<p>(The MEX stuff is optional for production, but is needed for testing with WcfTestClient.exe, and for exposing the service meta-data).</p>

<p>You'll have to modify your Java code to POST a SOAP message to the service.  WCF can be a little picky when inter-operating with non-WCF clients, so you'll have to mess with the POST headers a little to get it to work.  Once you get this running, you can then start to investigate security for the login (might need to use a different binding to get better security), or possibly using WCF REST to allow for logins with a GET rather than SOAP/POST.</p>

<p>Here is an example of what the HTTP POST should look like from the Java code.  There is a tool called "<a href="http://www.fiddler2.com/fiddler2/" rel="nofollow">Fiddler</a>" that can be really useful for debugging web-services.</p>

<pre><code>POST /LoginService HTTP/1.1
Content-Type: text/xml; charset=utf-8
SOAPAction: "http://mycompany.com/LoginService/ILoginService/Login"
Host: somesite.com:55555
Content-Length: 216
Expect: 100-continue
Connection: Keep-Alive

&lt;s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"&gt;
&lt;s:Body&gt;
&lt;Login xmlns="http://mycompany.com/LoginService"&gt;
&lt;username&gt;Blah&lt;/username&gt;
&lt;password&gt;Blah2&lt;/password&gt;
&lt;/Login&gt;
&lt;/s:Body&gt;
&lt;/s:Envelope&gt;
</code></pre>

===UCLA===
PostId: 686570
Score: 88
Accepted: 1
ViewCount: 74630
Tags: <java><android><multithreading><service>
<p><strong>Addendum</strong>: The Android framework provides many helpers for one-off work, background work, etc, which may be preferable over trying to roll your own thread in many instances. As mentioned in a below post, AsyncTask is a good starting point to look into. I encourage readers to look into the framework provisions first before even beginning to think about doing their own threading.</p>

<p>There are several problems in the code sample you posted I will address in order:</p>

<p>1) Thread.stop() has been deprecated for quite some time now, as it can leave dependent variables in inconsistent states in some circumstances. See <a href="http://java.sun.com/j2se/1.4.2/docs/guide/misc/threadPrimitiveDeprecation.html" rel="nofollow">this Sun answer page</a> for more details (Edit: that link is now dead, see <a href="https://www.securecoding.cert.org/confluence/display/java/THI05-J.+Do+not+use+Thread.stop()+to+terminate+threads" rel="nofollow">this page for why not to use Thread.stop()</a>). A preferred method of stopping and starting a thread is as follows (assuming your thread will run somewhat indefinitely):</p>

<pre><code>private volatile Thread runner;

public synchronized void startThread(){
  if(runner == null){
    runner = new Thread(this);
    runner.start();
  }
}

public synchronized void stopThread(){
  if(runner != null){
    Thread moribund = runner;
    runner = null;
    moribund.interrupt();
  }
}

public void run(){
  while(Thread.currentThread() == runner){
    //do stuff which can be interrupted if necessary
  }
}
</code></pre>

<p>This is just one example of how to stop a thread, but the takeaway is that you are responsible for exiting a thread just as you would any other method. Maintain a method of cross thread communcation (in this case a volatile variable, could also be through a mutex, etc) and within your thread logic, use that method of communication to check if you should early exit, cleanup, etc.</p>

<p>2) Your measurements list is accessed by multiple threads (the event thread and your user thread) at the same time without any synchronization. It looks like you don't have to roll your own synchronization, you can use a <a href="http://developer.android.com/reference/java/util/concurrent/BlockingQueue.html" rel="nofollow">BlockingQueue</a>.</p>

<p>3) You are creating a new Socket every iteration of your sending Thread. This is a rather heavyweight operation, and only really make sense if you expect measurements to be extremely infrequent (say one an hour or less). Either you want a persistent socket that is not recreated every loop of the thread, or you want a one shot runnable you can 'fire and forget' which creates a socket, sends all relevant data, and finishes. (A quick note about using a persistent Socket, socket methods which block, such as reading, cannot be interrupted by Thread.interrupt(), and so when you want to stop the thread, you must close the socket as well as calling interrupt)</p>

<p>4) There is little point in throwing your own exceptions from within a Thread unless you expect to catch it somewhere else. A better solution is to log the error and if it is irrecoverable, stop the thread. A thread can stop itself with code like (in the same context as above):</p>

<pre><code>public void run(){
    while(Thread.currentThread() == runner){
      //do stuff which can be interrupted if necessary

      if(/*fatal error*/){
        stopThread();
        return; //optional in this case since the loop will exit anyways
      }
    }
  }
</code></pre>

<p>Finally, if you want to be sure a thread exits with the rest of your application, no matter what, a good technique is to call Thread.setDaemon(true) after creation and before you start the thread. This flags the thread as a daemon thread, meaning the VM will ensure that it is automatically destroyed if there are no non-daemon threads running (such as if your app quits).</p>

<p>Obeying best practices with regards to Threads should ensure that your app doesn't hang or slow down the phone, though they can be quite complex :)</p>

===UCLA===
PostId: 687453
Score: 87
Accepted: 1
ViewCount: 91785
Tags: <java><android><http><url><cookies>
<p>It turns out that Google Android ships with Apache HttpClient 4.0, and I was able to figure out how to do it using the "Form based logon" example in the <a href="http://hc.apache.org/httpcomponents-client/examples.html">HttpClient docs</a>:</p>

<p><a href="http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk/httpclient/src/examples/org/apache/http/examples/client/ClientFormLogin.java">http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk/httpclient/src/examples/org/apache/http/examples/client/ClientFormLogin.java</a></p>

<p><hr /></p>

<pre><code>import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;

/**
 * A example that demonstrates how HttpClient APIs can be used to perform
 * form-based logon.
 */
public class ClientFormLogin {

    public static void main(String[] args) throws Exception {

        DefaultHttpClient httpclient = new DefaultHttpClient();

        HttpGet httpget = new HttpGet("https://portal.sun.com/portal/dt");

        HttpResponse response = httpclient.execute(httpget);
        HttpEntity entity = response.getEntity();

        System.out.println("Login form get: " + response.getStatusLine());
        if (entity != null) {
            entity.consumeContent();
        }
        System.out.println("Initial set of cookies:");
        List&lt;Cookie&gt; cookies = httpclient.getCookieStore().getCookies();
        if (cookies.isEmpty()) {
            System.out.println("None");
        } else {
            for (int i = 0; i &lt; cookies.size(); i++) {
                System.out.println("- " + cookies.get(i).toString());
            }
        }

        HttpPost httpost = new HttpPost("https://portal.sun.com/amserver/UI/Login?" +
                "org=self_registered_users&amp;" +
                "goto=/portal/dt&amp;" +
                "gotoOnFail=/portal/dt?error=true");

        List &lt;NameValuePair&gt; nvps = new ArrayList &lt;NameValuePair&gt;();
        nvps.add(new BasicNameValuePair("IDToken1", "username"));
        nvps.add(new BasicNameValuePair("IDToken2", "password"));

        httpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));

        response = httpclient.execute(httpost);
        entity = response.getEntity();

        System.out.println("Login form get: " + response.getStatusLine());
        if (entity != null) {
            entity.consumeContent();
        }

        System.out.println("Post logon cookies:");
        cookies = httpclient.getCookieStore().getCookies();
        if (cookies.isEmpty()) {
            System.out.println("None");
        } else {
            for (int i = 0; i &lt; cookies.size(); i++) {
                System.out.println("- " + cookies.get(i).toString());
            }
        }

        // When HttpClient instance is no longer needed, 
        // shut down the connection manager to ensure
        // immediate deallocation of all system resources
        httpclient.getConnectionManager().shutdown();        
    }
}
</code></pre>

===UCLA===
PostId: 694009
Score: 9
Accepted: 0
ViewCount: 160628
Tags: <java><android><timeout><httpresponse>
<p>If your are using Jakarta's <a href="http://hc.apache.org/httpclient-3.x/">http client library</a> then you can do something like:</p>

<pre><code>        HttpClient client = new HttpClient();
        client.getParams().setParameter(HttpClientParams.CONNECTION_MANAGER_TIMEOUT, new Long(5000));
        client.getParams().setParameter(HttpClientParams.SO_TIMEOUT, new Integer(5000));
        GetMethod method = new GetMethod("http://www.yoururl.com");
        method.getParams().setParameter(HttpMethodParams.SO_TIMEOUT, new Integer(5000));
        method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,
        int statuscode = client.executeMethod(method);
</code></pre>

===UCLA===
PostId: 702148
Score: 6
Accepted: 1
ViewCount: 1859
Tags: <android><user-interface>
<p>Yes. It depends what you are trying to achieve.</p>

<p>It can be done <em>using</em> the standard APIs, but this functionality is not <em>part of</em> the standard APIs. That is, there is no <code>widget.DragOverHere()</code> method unless you write one.</p>

<p>That said, it would not be terribly complicated to do. At a minimum, you would need to write a custom subclass of View and implement two methods: <code>onDraw(Canvas c)</code> and <code>onTouch(MotionEvent e)</code>. A rough sketch:</p>

<pre><code>class MyView extends View {

    int x, y;  //the x-y coordinates of the icon (top-left corner)
    Bitmap bitmap; //the icon you are dragging around

    onDraw(Canvas c) {
      canvas.drawBitmap(x, y, bitmap);
    }

    onTouch(MotionEvent e) {
      switch(e.getAction()) {
      case MotionEvent.ACTION_DOWN:
        //maybe use a different bitmap to indicate 'selected'
        break;
      case MotionEvent.ACTION_MOVE:
        x = (int)e.getX();
        y = (int)e.getY();
        break;
      case MotionEvent.ACTION_UP:
        //switch back to 'unselected' bitmap
        break;
      }
      invalidate(); //redraw the view
    }
}
</code></pre>

===UCLA===
PostId: 708049
Score: 3
Accepted: 1
ViewCount: 2602
Tags: <java><ruby-on-rails><android><http>
<p>I added the following to my POST request and it worked like a charm.</p>

<pre><code>httppost.addHeader("Content-Type","application/json");
</code></pre>

===UCLA===
PostId: 708317
Score: 871
Accepted: 1
ViewCount: 264230
Tags: <android><singleton><global-variables><state>
<p>I wrote this answer back in '09 when Android was relatively new, and there were many not well established areas in Android development. I have added a long addendum at the bottom of this post, addressing some criticism, and detailing a philosophical disagreement I have with the use of Singletons rather than subclassing Application. Read it at your own risk.</p>

<p><strong>ORIGINAL ANSWER:</strong> </p>

<p>The more general problem you are encountering is how to save state across several Activities and all parts of your application. A static variable (for instance, a singleton) is a common Java way of achieving this. I have found however, that a more elegant way in Android is to associate your state with the Application context.</p>

<p>As you know, each Activity is also a Context, which is information about its execution environment in the broadest sense. Your application also has a context, and Android guarantees that it will exist as a single instance across your application.</p>

<p>The way to do this is to create your own subclass of <a href="http://developer.android.com/reference/android/app/Application.html">android.app.Application</a>, and then specify that class in the application tag in your manifest. Now Android will automatically create an instance of that class and make it available for your entire application. You can access it from any <code>context</code> using the <code>Context.getApplicationContext()</code> method (<code>Activity</code> also provides a method <code>getApplication()</code> which has the exact same effect). Following is an extremely simplified example, with caveats to follow:</p>

<pre><code>class MyApp extends Application {

  private String myState;

  public String getState(){
    return myState;
  }
  public void setState(String s){
    myState = s;
  }
}

class Blah extends Activity {

  @Override
  public void onCreate(Bundle b){
    ...
    MyApp appState = ((MyApp)getApplicationContext());
    String state = appState.getState();
    ...
  }
}
</code></pre>

<p>This has essentially the same effect as using a static variable or singleton, but integrates quite well into the existing Android framework. Note that this will not work across processes (should your app be one of the rare ones that has multiple processes).</p>

<p>Something to note from the example above; suppose we had instead done something like:</p>

<pre><code>class MyApp extends Application {

  private String myState = /* complicated and slow initialization */;

  public String getState(){
    return myState;
  }
}
</code></pre>

<p>Now this slow initialization (such as hitting disk, hitting network, anything blocking, etc) will be performed every time Application is instantiated! You may think, well, this is only once for the process and I'll have to pay the cost anyways, right?  For instance, as Dianne Hackborn mentions below, it is entirely possible for your process to be instantiated -just- to handle a background broadcast event. If your broadcast processing has no need for this state you have potentially just done a whole series of complicated and slow operations for nothing. Lazy instantiation is the name of the game here. The following is a slightly more complicated way of using Application which makes more sense for anything but the simplest of uses:</p>

<pre><code>class MyApp extends Application {

  private MyStateManager myStateManager = new MyStateManager();

  public MyStateManager getStateManager(){
    return myStateManager ;
  }
}

class MyStateManager {

  MyStateManager() {
    /* this should be fast */
  }

  String getState() {
    /* if necessary, perform blocking calls here */
    /* make sure to deal with any multithreading/synchronicity issues */

    ...

    return state;
  }
}

class Blah extends Activity {

  @Override
  public void onCreate(Bundle b){
    ...
    MyStateManager stateManager = ((MyApp)getApplicationContext()).getStateManager();
    String state = stateManager.getState();
    ...
  }
}
</code></pre>

<p>While I prefer Application subclassing to using singletons here as the more elegant solution, I would rather developers use singletons if really necessary over not thinking at all through the performance and multithreading implications of associating state with the Application subclass.</p>

<p><strong>NOTE 1:</strong> Also as anticafe commented, in order to correctly tie your Application override to your application a  tag is necessary in the manifest file. Again, see the Android docs for more info. An example:</p>

<pre><code>&lt;application
     android:name="my.application.MyApp" 
     android:icon="..."
     android:label="..."&gt;
&lt;/application&gt;
</code></pre>

<p><strong>NOTE 2:</strong> user608578 asks below how this works with managing native object lifecycles. I am not up to speed on using native code with Android in the slightest, and I am not qualified to answer how that would interact with my solution. If someone does have an answer to this, I am willing to credit them and put the information in this post for maximum visibility.</p>

<p><strong>ADDENDUM:</strong></p>

<p>As some people have noted, this is <strong>not</strong> a solution for <strong>persistent</strong> state, something I perhaps should have emphasized more in the original answer. I.e. this is not meant to be a solution for saving user or other information that is meant to be persisted across application lifetimes. Thus, I consider most criticism below related to Applications being killed at any time, etc..., moot, as anything that ever needed to be persisted to disk should not be stored through an Application subclass. It is meant to be a solution for storing temporary, easily re-creatable application state (whether a user is logged in for example) and components which are single instance (application network manager for example) (<strong>NOT</strong> singleton!) in nature.</p>

<p>Dayerman has been kind enough to point out an interesting <a href="https://plus.google.com/u/0/117230458394250799679/posts/DsfpW51Vvow">conversation with Reto Meier and Dianne Hackborn</a> in which use of Application subclasses is discouraged in favor of Singleton patterns. Somatik also pointed out something of this nature earlier, although I didn't see it at the time. Because of Reto and Dianne's roles in maintaining the Android platform, I cannot in good faith recommend ignoring their advice. What they say, goes. I do wish to disagree with the opinions, expressed with regards to preferring Singleton over Application subclasses. In my disagreement I will be making use of concepts best explained in <a href="http://programmers.stackexchange.com/a/40610/98638">this StackExchange explanation of the Singleton design pattern</a>, so that I do not have to define terms in this answer. I highly encourage skimming the link before continuing. Point by point:</p>

<p>Dianne states, "There is no reason to subclass from Application. It is no different than making a singleton..." This first claim is incorrect. There are two main reasons for this. 1) The Application class provides a better lifetime guarantee for an application developer; it is guaranteed to have the lifetime of the application. A singleton is not EXPLICITLY tied to the lifetime of the application (although it is effectively). This may be a non-issue for your average application developer, but I would argue this is exactly the type of contract the Android API should be offering, and it provides much more flexibility to the Android system as well, by minimizing the lifetime of associated data. 2) The Application class provides the application developer with a single instance holder for state, which is very different from a Singleton holder of state. For a list of the differences, see the Singleton explanation link above.</p>

<p>Dianne continues, "...just likely to be something you regret in the future as you find your Application object becoming this big tangled mess of what should be independent application logic." This is certainly not incorrect, but this is not a reason for choosing Singleton over Application subclass. None of Diane's arguments provide a reason that using a Singleton is better than an Application subclass, all she attempts to establish is that using a Singleton is no worse than an Application subclass, which I believe is false.</p>

<p>She continues, "And this leads more naturally to how you should be managing these things -- initializing them on demand." This ignores the fact that there is no reason you cannot initialize on demand using an Application subclass as well. Again there is no difference.</p>

<p>Dianne ends with "The framework itself has tons and tons of singletons for all the little shared data it maintains for the app, such as caches of loaded resources, pools of objects, etc. It works great." I am not arguing that using Singletons cannot work fine or are not a legitimate alternative. I am arguing that Singletons do not provide as strong a contract with the Android system as using an Application subclass, and further that using Singletons generally points to inflexible design, which is not easily modified, and leads to many problems down the road. IMHO, the strong contract the Android API offers to developer applications is one of the most appealing and pleasing aspects of programming with Android, and helped lead to early developer adoption which drove the Android platform to the success it has today. Suggesting using Singletons is implicitly moving away from a strong API contract, and in my opinion, weakens the Android framework.</p>

<p>Dianne has commented below as well, mentioning an additional downside to using Application subclasses, they may encourage or make it easier to write less performance code. This is very true, and I have edited this answer to emphasize the importance of considering perf here, and taking the correct approach if you're using Application subclassing. As Dianne states, it is important to remember that your Application class will be instantiated every time your process is loaded (could be multiple times at once if your application runs in multiple processes!) even if the process is only being loaded for a background broadcast event. It is therefore important to use the Application class more as a repository for pointers to shared components of your application rather than as a place to do any processing!</p>

<p>I leave you with the following list of downsides to Singletons, as stolen from the earlier StackExchange link:</p>

<ul>
<li>Inability to use abstract or interface classes;</li>
<li>Inability to subclass;</li>
<li>High coupling across the application (difficult to modify);</li>
<li>Difficult to test (can't fake/mock in unit tests);</li>
<li>Difficult to parallelize in the case of mutable state (requires extensive locking);</li>
</ul>

<p>and add my own:</p>

<ul>
<li>Unclear and unmanageable lifetime contract unsuited for Android (or most other) development;</li>
</ul>

===UCLA===
PostId: 740335
Score: 7
Accepted: 0
ViewCount: 54110
Tags: <java><android><android-gridview><clickable-image>
<p>I was able to get the position of the clicked image by making the position final and adding an onClick listener to the imageView.  This logs the position of the image that was clicked.</p>

<pre><code>@Override
public View getView(final int position, View convertView, ViewGroup parent) {
  ImageView imageView;
  if (convertView == null) {  
    // if it's not recycled, initialize some attributes
    imageView = new ImageView(mContext);
    imageView.setLayoutParams(new GridView.LayoutParams(85, 85));
    imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
    imageView.setPadding(8, 8, 8, 8);


    imageView.setOnClickListener(new View.OnClickListener() {

      @Override
      public void onClick(View view) {
        Log.d("onClick","position ["+position+"]");
      }

    });

  } 
  else {
    imageView = (ImageView) convertView;
  }

  imageView.setImageResource(mThumbIds[position]);
  return imageView;
}
</code></pre>

===UCLA===
PostId: 741926
Score: 8
Accepted: 0
ViewCount: 50383
Tags: <android><3d><opengl-es>
<p>you may export it to ASE format.
from ASE, you can convert it to your code manually or programatically.
You will need vertex for vertices array and faces for indices in Android.
don't forget you have to set</p>

<pre><code>    gl.glFrontFace(GL10.GL_CCW);
</code></pre>

<p>because 3ds max default is counter clockwise.</p>

===UCLA===
PostId: 742087
Score: 30
Accepted: 1
ViewCount: 50383
Tags: <android><3d><opengl-es>
<p>That's where I got to:</p>

<ul>
<li>I've used Google's APIDemos as a starting point - there are rotating cubes in there, each specified by two arrays: vertices and indices.</li>
<li>I've build my model using Blender and exported it as OFF file - it's a text file that lists all the vertices and then faces in terms of these vertices (indexed geometry)</li>
<li>Then I've created a simple C++ app that takes that OFF and writes it as two XMLs containing arrays (one for vertices and one for indices)</li>
<li>These XML files are then copied to res/values and this way I can assign the data they contain to arrays like this:<br/> 
<code>int vertices[] = context.getResources().getIntArray(R.array.vertices);</code></li>
<li>I also need to manually change the number of faces to be drawn in here: <code>gl.glDrawElements(GL10.GL_TRIANGLES, 212*6, GL10.GL_UNSIGNED_SHORT, mIndexBuffer);</code> - you can find that number (212 in this case) on top of the OFF file</li>
</ul>

<p>Here you can find my project page, which uses this solution:</p>

<p><a href="http://code.google.com/p/vsiogap3d/">http://code.google.com/p/vsiogap3d/</a></p>

===UCLA===
PostId: 747599
Score: 5
Accepted: 1
ViewCount: 5002
Tags: <android><emulator><identification>
<p>The <code>android_id</code> is supposed to uniquely identify the device, however, it has been noted that the id can be changed if you know how <a href="http://strazzere.com/blog/?tag=android%5Fid" rel="nofollow">Spoofing android_id</a></p>

<pre><code>import android.provider.Settings.System;

String android_id = System.getString(this.getContentResolver(), System.ANDROID_ID);
</code></pre>

<p>In the emulator, the <code>android_id</code> does not have a value, so you will need to put a debugging routine in to assign a value yourself.</p>

<p>However, if you want to identify the user, and let the user access your service from different devices with one user id you are better off assigning them a user id and having them authenticate to your service using this user id as their credential. This would let them use their id's on many different devices, unless you used it in conjunction with the <code>android_id</code> (and the <code>android_id</code> wasn't spoofed) then you could limit them to one device.</p>

===UCLA===
PostId: 748703
Score: 2
Accepted: 0
ViewCount: 6107
Tags: <android><image><scroll>
<p>You can use a webview which gives this to you for free. I'm not sure why but when I tried
using the loadData method it didn't work, but using loadDataWithBaseURL with a null URL did.
<p>
With a webview your image can even be embedded in HTML. In the example below <code>yourContent</code> is simply a string.
<p></p>

<p>E.g.</p>

<pre><code>yourView.loadDataWithBaseURL(null, yourContent, "text/html", "UTF-8", null);
</code></pre>

===UCLA===
PostId: 753847
Score: 14
Accepted: 1
ViewCount: 7037
Tags: <java><android><bitmap><android-mapview><mylocationoverlay>
<p>It looks like the correct mechanism to do this is to extend MyLocationOverlay then override the drawMyLocation() protected method.</p>

<p>The following uses an arrow to show where "you" are and which way "you" are pointing:</p>

<p><code></p>

<pre><code>package com.example;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Point;
import android.location.Location;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapView;
import com.google.android.maps.MyLocationOverlay;

public class MyCustomLocationOverlay extends MyLocationOverlay {
    private Context mContext;
    private float   mOrientation;

    public MyCustomLocationOverlay(Context context, MapView mapView) {
        super(context, mapView);
        mContext = context;
    }

    @Override 
    protected void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) {
        // translate the GeoPoint to screen pixels
        Point screenPts = mapView.getProjection().toPixels(myLocation, null);

        // create a rotated copy of the marker
        Bitmap arrowBitmap = BitmapFactory.decodeResource( mContext.getResources(), R.drawable.arrow_green);
        Matrix matrix = new Matrix();
        matrix.postRotate(mOrientation);
        Bitmap rotatedBmp = Bitmap.createBitmap(
            arrowBitmap, 
            0, 0, 
            arrowBitmap.getWidth(), 
            arrowBitmap.getHeight(), 
            matrix, 
            true
        );
        // add the rotated marker to the canvas
        canvas.drawBitmap(
            rotatedBmp, 
            screenPts.x - (rotatedBmp.getWidth()  / 2), 
            screenPts.y - (rotatedBmp.getHeight() / 2), 
            null
        );
    }

    public void setOrientation(float newOrientation) {
         mOrientation = newOrientation;
    }
}
</code></pre>

<p></code></p>

===UCLA===
PostId: 755151
Score: 253
Accepted: 0
ViewCount: 218665
Tags: <android><crash><stack-trace>
<p>For sample applications and debugging purposes, I use a simple solution that allows me to write the stacktrace to the sd card of the device and/or upload it to a server. This solution has been inspired by <a href="http://code.google.com/p/android-remote-stacktrace">http://code.google.com/p/android-remote-stacktrace</a> (specifically, the save-to-device and upload-to-server parts) and I think it solves the problem mentioned by Soonil. It's not optimal, but it works and you can improve it if you want to use it in a production application. If you decide to upload the stacktraces to the server, you can use a php script (index.php) to view them. If you're interested, you can find all the sources below - one java class for your application and two optional php scrips for the server hosting the uploaded stacktraces.</p>

<p>In a Context (e.g. the main Activity), call</p>

<pre><code>if(!(Thread.getDefaultUncaughtExceptionHandler() instanceof CustomExceptionHandler)) {
    Thread.setDefaultUncaughtExceptionHandler(new CustomExceptionHandler(
            "/sdcard/&lt;desired_local_path&gt;", "http://&lt;desired_url&gt;/upload.php"));
}
</code></pre>

<p>CustomExceptionHandler</p>

<pre><code>public class CustomExceptionHandler implements UncaughtExceptionHandler {

    private UncaughtExceptionHandler defaultUEH;

    private String localPath;

    private String url;

    /* 
     * if any of the parameters is null, the respective functionality 
     * will not be used 
     */
    public CustomExceptionHandler(String localPath, String url) {
        this.localPath = localPath;
        this.url = url;
        this.defaultUEH = Thread.getDefaultUncaughtExceptionHandler();
    }

    public void uncaughtException(Thread t, Throwable e) {
        String timestamp = TimestampFormatter.getInstance().getTimestamp();
        final Writer result = new StringWriter();
        final PrintWriter printWriter = new PrintWriter(result);
        e.printStackTrace(printWriter);
        String stacktrace = result.toString();
        printWriter.close();
        String filename = timestamp + ".stacktrace";

        if (localPath != null) {
            writeToFile(stacktrace, filename);
        }
        if (url != null) {
            sendToServer(stacktrace, filename);
        }

        defaultUEH.uncaughtException(t, e);
    }

    private void writeToFile(String stacktrace, String filename) {
        try {
            BufferedWriter bos = new BufferedWriter(new FileWriter(
                    localPath + "/" + filename));
            bos.write(stacktrace);
            bos.flush();
            bos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendToServer(String stacktrace, String filename) {
        DefaultHttpClient httpClient = new DefaultHttpClient();
        HttpPost httpPost = new HttpPost(url);
        List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;();
        nvps.add(new BasicNameValuePair("filename", filename));
        nvps.add(new BasicNameValuePair("stacktrace", stacktrace));
        try {
            httpPost.setEntity(
                    new UrlEncodedFormEntity(nvps, HTTP.UTF_8));
            httpClient.execute(httpPost);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>upload.php</p>

<pre><code>&lt;?php
    $filename = isset($_POST['filename']) ? $_POST['filename'] : "";
    $message = isset($_POST['stacktrace']) ? $_POST['stacktrace'] : "";
    if (!ereg('^[-a-zA-Z0-9_. ]+$', $filename) || $message == ""){
        die("This script is used to log debug data. Please send the "
                . "logging message and a filename as POST variables.");
    }
    file_put_contents($filename, $message . "\n", FILE_APPEND);
?&gt;
</code></pre>

<p>index.php</p>

<pre><code>&lt;?php
    $myDirectory = opendir(".");
    while($entryName = readdir($myDirectory)) {
        $dirArray[] = $entryName;
    }
    closedir($myDirectory);
    $indexCount = count($dirArray);
    sort($dirArray);
    print("&lt;TABLE border=1 cellpadding=5 cellspacing=0 \n");
    print("&lt;TR&gt;&lt;TH&gt;Filename&lt;/TH&gt;&lt;TH&gt;Filetype&lt;/th&gt;&lt;th&gt;Filesize&lt;/TH&gt;&lt;/TR&gt;\n");
    for($index=0; $index &lt; $indexCount; $index++) {
        if ((substr("$dirArray[$index]", 0, 1) != ".") 
                &amp;&amp; (strrpos("$dirArray[$index]", ".stacktrace") != false)){ 
            print("&lt;TR&gt;&lt;TD&gt;");
            print("&lt;a href=\"$dirArray[$index]\"&gt;$dirArray[$index]&lt;/a&gt;");
            print("&lt;/TD&gt;&lt;TD&gt;");
            print(filetype($dirArray[$index]));
            print("&lt;/TD&gt;&lt;TD&gt;");
            print(filesize($dirArray[$index]));
            print("&lt;/TD&gt;&lt;/TR&gt;\n");
        }
    }
    print("&lt;/TABLE&gt;\n");
?&gt;
</code></pre>

===UCLA===
PostId: 763982
Score: 13
Accepted: 0
ViewCount: 9153
Tags: <android><wireless><gprs>
<h2>2G/3G</h2>

<p>To determine your network type use:</p>

<pre><code>TelephonyManager.getNetworkType();
</code></pre>

<p>here's some example code:</p>

<pre><code>bool is3G = (manager.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS);
</code></pre>

<p>Docs for the class can be found at: <a href="http://developer.android.com/reference/android/telephony/TelephonyManager.html">TelephonyManager</a></p>

<p><br/></p>

<h2>On/Off</h2>

<p>To check if your telephone radio is on or off use:</p>

<pre><code>ServiceState.getState();
</code></pre>

<p>To set it use:</p>

<pre><code>ServiceState.setState(STATE_POWER_OFF);
</code></pre>

<p>It's unclear whether the setState method exists on all devices and functions in all states. There is no documentation for this method. Documentation for the class can be found at: <a href="http://developer.android.com/reference/android/telephony/ServiceState.html">ServiceState</a></p>

<p>This issue might also be relevant: <a href="http://code.google.com/p/android/issues/detail?id=1065">http://code.google.com/p/android/issues/detail?id=1065</a></p>

===UCLA===
PostId: 769020
Score: 12
Accepted: 0
ViewCount: 111243
Tags: <android><android-activity><bundle>
<p>You can use the Bundle from the Intent:</p>

<pre><code>Bundle extras = myIntent.getExtras();
extras.put*(info);
</code></pre>

<p>Or an entire bundle:</p>

<pre><code>myIntent.putExtras(myBundle);
</code></pre>

<p>Is this what you're looking for?</p>

===UCLA===
PostId: 769303
Score: 1
Accepted: 0
ViewCount: 13229
Tags: <java><android><keyboard><locking><device-admin>
<p>Looks like the screen lock function is performed using the method:</p>

<pre><code>public void goToSleep(long time)
</code></pre>

<p>method in <code>PowerManager.java</code>. It's possible to get a reference to it in this fashion:</p>

<pre><code>PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
</code></pre>

<p>However this requires the permission</p>

<pre><code>android.permission.DEVICE_POWER
</code></pre>

<p>which is a level 2 permission available to the system only.</p>

<p>So looks like this isn't doable. This is for version 1.1 only, I don't know for 1.5.</p>

===UCLA===
PostId: 779588
Score: 20
Accepted: 1
ViewCount: 52600
Tags: <android><tabs><selector><drawable>
<p>The XML you've included here is a way of defining a drawable that lets you embed a case statement. It presents a different drawable depending on the state of the View it's being assigned to. As a drawable, you should save it as an xml file within the <code>res/drawable</code> folder of your project (for example <code>tabselector.xml</code>).</p>

<p>To use it for the Tabhost, you need to construct the TabActivity as you normally would (as shown in this <a href="http://developer.android.com/guide/tutorials/views/hello-tabwidget.html">tutorial example</a>).</p>

<p>Then when you add each tab to the host, you specify the <code>tabselector</code> drawable as the indicator as shown for "TAB 1" below.</p>

<pre><code>Drawable mySelector = getResources().getDrawable(R.drawable.tabselector);

mTabHost.addTab(mTabHost.newTabSpec("tab_test1").setIndicator("TAB 1", mySelector).setContent(R.id.textview1));
mTabHost.addTab(mTabHost.newTabSpec("tab_test2").setIndicator("TAB 2").setContent(R.id.textview2));
</code></pre>

<p>Note: You <em>cannot</em> change the color of the tab backgrounds behind the icons at this point.</p>

===UCLA===
PostId: 784463
Score: 4
Accepted: 1
ViewCount: 5619
Tags: <android><animation>
<p>Well, I'm glad I'm not the only one who had a difficult time finding the very subtle bug in the above.  The bug is:</p>

<pre><code>startAnimation(anim);
</code></pre>

<p>which isn't too obvious until you expand it into:</p>

<pre><code>this.startAnimation(anim);
</code></pre>

<p>at which point it's clear why the outer view (ie. 'this') is animating as well as the text.</p>

===UCLA===
PostId: 784691
Score: 34
Accepted: 0
ViewCount: 40882
Tags: <android>
<p>Found the correct way to open InputStream from content URI:</p>

<pre><code>InputStream fileInputStream=yourContext.getContentResolver().openInputStream(uri);
</code></pre>

<p>That's all!</p>

===UCLA===
PostId: 819320
Score: 27
Accepted: 0
ViewCount: 125000
Tags: <java><android><encryption><preferences><credentials>
<p>About the simplest way to store a single preference in an Android Activity is to do something like this:</p>

<pre><code>Editor e = this.getPreferences(Context.MODE_PRIVATE).edit();
e.putString("password", mPassword);
e.commit();
</code></pre>

<p>If you're worried about the security of these then you could always encrypt the password before storing it.</p>

===UCLA===
PostId: 819427
Score: 266
Accepted: 1
ViewCount: 111243
Tags: <android><android-activity><bundle>
<p>You have a few options:</p>

<p>1) Use the <a href="http://developer.android.com/reference/android/os/Bundle.html">Bundle</a> from the <a href="http://developer.android.com/reference/android/content/Intent.html">Intent</a>:</p>

<pre><code>Intent mIntent = new Intent(this, Example.class);
Bundle extras = mIntent.getExtras();
extras.putString(key, value);  
</code></pre>

<p>2) Create a new Bundle</p>

<pre><code>Intent mIntent = new Intent(this, Example.class);
Bundle mBundle = new Bundle();
mBundle.putString(key, value);
mIntent.putExtras(mBundle);
</code></pre>

<p>3) Use the <a href="http://developer.android.com/reference/android/content/Intent.html#putExtra%28java.lang.String,%20java.lang.String%5b%5d%29">putExtra()</a> shortcut method of the Intent</p>

<pre><code>Intent mIntent = new Intent(this, Example.class);
mIntent.putExtra(key, value);
</code></pre>

<p><br/>
Then, in the launched Activity, you would read them via:</p>

<pre><code>String value = getIntent().getExtras().getString(key)
</code></pre>

<p><strong><em>NOTE:</strong> Bundles have "get" and "put" methods for all the primitive types, Parcelables, and Serializables. I just used Strings for demonstrational purposes.</em></p>

===UCLA===
PostId: 819605
Score: 173
Accepted: 0
ViewCount: 173487
Tags: <android><sqlite><content-values>
<p>You cannot use the datetime function using the Java wrapper "ContentValues". Either you can use :</p>

<ul>
<li><p>SQLiteDatabase.execSQL so you can enter a raw SQL query.  </p>

<pre><code>mDb.execSQL("INSERT INTO "+DATABASE_TABLE+" VALUES (null, datetime()) ");
</code></pre></li>
<li><p>Or the java date time capabilities :</p>

<pre><code>// set the format to sql date time
SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
Date date = new Date();
ContentValues initialValues = new ContentValues(); 
initialValues.put("date_created", dateFormat.format(date));
long rowId = mDb.insert(DATABASE_TABLE, null, initialValues);
</code></pre></li>
</ul>

===UCLA===
PostId: 823643
Score: 12
Accepted: 1
ViewCount: 23471
Tags: <android><animated-gif>
<p>The general sketch of the solution is to use employ custom <code>View</code> which draws asks a <code>Movie</code> to draw itself to the <code>Canvas</code> periodically. </p>

<p>The first step is building the <code>Movie</code> instance.  There is factory called <code>decodeStream</code> that can make a movie given an <code>InputStream</code> but it isn't enough to use the stream from a <code>UrlConnection</code>.  If you try this you will get an <code>IOException</code> when the movie loader tries to call <code>reset</code> on the stream.  The hack, unfortunate as it is, is to use a separated <code>BufferedInputStream</code> with a manually-set <code>mark</code> to tell it to save enough data that <code>reset</code> won't fail.  Luckily, the <code>URLConnection</code> can tell us how much data to expect.  I say this hack is unfortunate because it effectively requires the entire image to be buffered in memory (which is no problem for desktop apps, but it is a serious issue on a memory-constrained mobile device).</p>

<p>Here is a snip of the <code>Movie</code> setup code:</p>

<pre><code>URL url = new URL(gifSource);
URLConnection conn = url.openConnection();
InputStream is = conn.getInputStream();
BufferedInputStream bis = new BufferedInputStream(is);
bis.mark(conn.getContentLength());
Movie movie = Movie.decodeStream(bis);
bis.close();
</code></pre>

<p>Next, you need to create a view that will display this <code>Movie</code>.  A subclass of <code>View</code> with a custom <code>onDraw</code> will do the trick (assuming it has access to the <code>Movie</code> you created with the previous code).</p>

<pre><code>@Override protected void onDraw(Canvas canvas) {
    if(movie != null) {
        long now = android.os.SystemClock.uptimeMillis();
        int dur = Math.max(movie.duration(), 1); // is it really animated?
        int pos = (int)(now % dur);
        movie.setTime(pos);
        movie.draw(canvas, x, y);
    }
}
</code></pre>

<p>The view won't trigger itself to be redrawn without help, and blindly calling <code>invalidate()</code> at the end of <code>onDraw</code> is just an energy waste.  In another thread (probably the one you used to download the image data), you can post messages to the main thread, asking for the view to be invalidated at a steady (but not insane) pace.</p>

<pre><code>Handler handler = new Handler();
new Thread() {
    @Override public void run() {
        // ... setup the movie (using the code from above)
        // ... create and display the custom view, passing the movie

        while(!Thread.currentThread().isInterrupted()) {
            handler.post(new Runnable() {
                public void run(){
                    view.invalidate();
                }
            });
            try {
                Thread.sleep(50); // yields 20 fps
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}.start();
</code></pre>

<p>A really nice solution would have all sorts of sweet progress bars and error checking, but the core is here.</p>

===UCLA===
PostId: 823966
Score: 761
Accepted: 0
ViewCount: 469733
Tags: <android><image><bitmap><out-of-memory><android-bitmap>
<p>To fix the OutOfMemory error, you should do something like this:</p>

<pre><code>BitmapFactory.Options options = new BitmapFactory.Options();
options.inSampleSize = 8;
Bitmap preview_bitmap = BitmapFactory.decodeStream(is, null, options);
</code></pre>

<p>This <code>inSampleSize</code> option reduces memory consumption.</p>

<p>Here's a complete method. First it reads image size without decoding the content itself. Then it finds the best <code>inSampleSize</code> value, it should be a power of 2, and finally the image is decoded.</p>

<pre><code>// Decodes image and scales it to reduce memory consumption
private Bitmap decodeFile(File f) {
    try {
        // Decode image size
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(new FileInputStream(f), null, o);

        // The new size we want to scale to
        final int REQUIRED_SIZE=70;

        // Find the correct scale value. It should be the power of 2.
        int scale = 1;
        while(o.outWidth / scale / 2 &gt;= REQUIRED_SIZE &amp;&amp; 
              o.outHeight / scale / 2 &gt;= REQUIRED_SIZE) {
            scale *= 2;
        }

        // Decode with inSampleSize
        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize = scale;
        return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
    } catch (FileNotFoundException e) {}
    return null;
}
</code></pre>

===UCLA===
PostId: 823997
Score: 2
Accepted: 0
ViewCount: 9153
Tags: <android><wireless><gprs>
<p>You can also use ConnectivityManager. Something like that:</p>

<pre><code>ConnectivityManager connectivityManager =(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE); 
NetworkInfo activeNetInfo = connectivityManager.getActiveNetworkInfo();
</code></pre>

===UCLA===
PostId: 843716
Score: 347
Accepted: 0
ViewCount: 157001
Tags: <android><gps><android-sensors><android-1.5-cupcake>
<p>Best way seems to be the following:</p>

<pre><code> final LocationManager manager = (LocationManager) getSystemService( Context.LOCATION_SERVICE );

    if ( !manager.isProviderEnabled( LocationManager.GPS_PROVIDER ) ) {
        buildAlertMessageNoGps();
    }

  private void buildAlertMessageNoGps() {
    final AlertDialog.Builder builder = new AlertDialog.Builder(this);
    builder.setMessage("Your GPS seems to be disabled, do you want to enable it?")
           .setCancelable(false)
           .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
               public void onClick(@SuppressWarnings("unused") final DialogInterface dialog, @SuppressWarnings("unused") final int id) {
                   startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));
               }
           })
           .setNegativeButton("No", new DialogInterface.OnClickListener() {
               public void onClick(final DialogInterface dialog, @SuppressWarnings("unused") final int id) {
                    dialog.cancel();
               }
           });
    final AlertDialog alert = builder.create();
    alert.show();
}
</code></pre>

===UCLA===
PostId: 845291
Score: 6
Accepted: 0
ViewCount: 74630
Tags: <java><android><multithreading><service>
<p>Actually, you don't need the "runner" variable as described above, something like:</p>

<pre><code>while (!interrupted()) {
    try {
        Thread.sleep(1000);
    } catch (InterruptedException ex) {
        break;
    }
}
</code></pre>

<p>But generally, sitting in a Thread.sleep() loop is a really bad idea.</p>

<p>Look at the AsyncTask API in the new 1.5 API. It will probably solve your problem more elegantly than using a service. Your phone is getting slow because the service never shuts down - there's nothing that will cause the service to kill itself.</p>

===UCLA===
PostId: 851165
Score: 23
Accepted: 0
ViewCount: 102354
Tags: <android><sms>
<p>So, I had a play, and it <em>is</em> possible to delete a received SMS.
Unfortunately it's not all plain sailing :(</p>

<p>I have a receiver that picks up on incoming SMS messages.  Now the way the Android SMS incoming routing works is that the piece of code responsible for decoding the messages sends a Broadcast (it uses the <code>sendBroadcast()</code> method - which unfortunately is NOT the version that lets you simply call <code>abortBroadcast()</code>) whenever a message arrives.</p>

<p>My receiver may or may not be called before the Systems SMS receiver, and in any case the received broadcast has no property that could reflect the <code>_id</code> column in the SMS table.</p>

<p>However, not being one to be stopped that easily I post myself (via a Handler) a delayed message with the SmsMessage as the attached object.  (I suppose you could post yourself a Runnable too...)</p>

<pre><code>handler.sendMessageDelayed(handler.obtainMessage(MSG_DELETE_SMS, msg), 2500);
</code></pre>

<p>The delay is there to ensure that by the time the message arrives all of the Broadcast receivers will have finished their stuff and the message will be safely ensconced in the SMS table.</p>

<p>When the message (or Runnable) is received here is what I do:</p>

<pre><code>case MSG_DELETE_SMS:
    Uri deleteUri = Uri.parse("content://sms");
    SmsMessage msg = (SmsMessage)message.obj;

    getContentResolver().delete(deleteUri, "address=? and date=?", new String[] {msg.getOriginatingAddress(), String.valueOf(msg.getTimestampMillis())});
</code></pre>

<p>I use the originating address and timestamp field to ensure a very high probability of deleting ONLY the message I am interested in.  If I wanted to be even more paranoid I could include the <code>msg.getMessageBody()</code> content as part of the query.</p>

<p>Yes, the message IS deleted (hooray!).
Unfortunately the notification bar is not updated :(</p>

<p>When you open up the notification area you'll see the message sitting there for you... but when you tap on it to open it up - it's gone!</p>

<p>To me, this isn't quite good enough - I want all trace of the message to disappear - I don't want the user to think there is a TXT when there isn't (that would only cause bug reports).</p>

<p>Internally in the OS the phone calls <code>MessagingNotification.updateNewMessageIndicator(Context)</code>, but I that class has been hidden from the API, and I did not want to replicate all of that code just for the sake of making the indicator accurate.</p>

===UCLA===
PostId: 851668
Score: 54
Accepted: 0
ViewCount: 180222
Tags: <android><sms><inbox>
<p>It is a trivial process. You can see a good example in the source code <a href="https://github.com/everythingandroid/android-smspopup">SMSPopup</a></p>

<p>Examine the following methods:</p>

<pre><code>SmsMmsMessage getSmsDetails(Context context, long ignoreThreadId, boolean unreadOnly)
long findMessageId(Context context, long threadId, long _timestamp, int messageType
void setMessageRead(Context context, long messageId, int messageType)
void deleteMessage(Context context, long messageId, long threadId, int messageType)
</code></pre>

<p>this is the method for reading:</p>

<pre><code>SmsMmsMessage getSmsDetails(Context context,
                            long ignoreThreadId, boolean unreadOnly)
{
   String SMS_READ_COLUMN = "read";
   String WHERE_CONDITION = unreadOnly ? SMS_READ_COLUMN + " = 0" : null;
   String SORT_ORDER = "date DESC";
   int count = 0;
   // Log.v(WHERE_CONDITION);
   if (ignoreThreadId &gt; 0) {
      // Log.v("Ignoring sms threadId = " + ignoreThreadId);
      WHERE_CONDITION += " AND thread_id != " + ignoreThreadId;
   }
   Cursor cursor = context.getContentResolver().query(
                      SMS_INBOX_CONTENT_URI,
                      new String[] { "_id", "thread_id", "address", "person", "date", "body" },
                      WHERE_CONDITION,
                      null,
                      SORT_ORDER);
   if (cursor != null) {
      try {
         count = cursor.getCount();
         if (count &gt; 0) {
            cursor.moveToFirst();
            // String[] columns = cursor.getColumnNames();
            // for (int i=0; i&lt;columns.length; i++) {
            // Log.v("columns " + i + ": " + columns[i] + ": " + cursor.getString(i));
            // }                                         
            long messageId = cursor.getLong(0);
            long threadId = cursor.getLong(1);
            String address = cursor.getString(2);
            long contactId = cursor.getLong(3);
            String contactId_string = String.valueOf(contactId);
            long timestamp = cursor.getLong(4);

            String body = cursor.getString(5);                             
            if (!unreadOnly) {
                count = 0;
            }

            SmsMmsMessage smsMessage = new SmsMmsMessage(context, address,
                          contactId_string, body, timestamp,
                          threadId, count, messageId, SmsMmsMessage.MESSAGE_TYPE_SMS);
            return smsMessage;
         }
      } finally {
         cursor.close();
      }
   }               
   return null;
}
</code></pre>

===UCLA===
PostId: 855486
Score: 34
Accepted: 1
ViewCount: 19411
Tags: <java><android><http>
<p>The Android 1.5 SDK introduced a new class, <a href="http://developer.android.com/reference/android/os/AsyncTask.html">AsyncTask</a> designed to make running tasks on a background thread and communicating a result to the UI thread a little simpler. An example given in the <a href="http://android-developers.blogspot.com/2009/05/painless-threading.html">Android Developers Blog</a> gives the basic idea on how to use it:</p>

<pre><code>public void onClick(View v) {
   new DownloadImageTask().execute("http://example.com/image.png");
}

private class DownloadImageTask extends AsyncTask {
   protected Bitmap doInBackground(String... urls) {
      return loadImageFromNetwork(urls[0]);
   }

   protected void onPostExecute(Bitmap result) {
      mImageView.setImageBitmap(result);
   }
}
</code></pre>

<p>The <code>doInBackgroundThread</code> method is called on a separate thread (managed by a thread pooled <code>ExecutorService</code>) and the result is communicated to the <code>onPostExecute</code> method which is run on the UI thread. You can call <code>cancel(boolean mayInterruptIfRunning)</code> on your <code>AsyncTask</code> subclass to cancel a running task.</p>

<p>As for using the <code>java.net</code> or <code>org.apache.http</code> libraries for network access, it's up to you. I've found the <code>java.net</code> libraries to be quiet pleasant to use when simply trying to  issue a <code>GET</code> and read the result. The <code>org.apache.http</code> libraries will allow you to do almost anything you want with <code>HTTP</code>, but they can be a little more difficult to use and I found them not to perform as well (on Android) for simple <code>GET</code> requests.</p>

===UCLA===
PostId: 857758
Score: 3
Accepted: 0
ViewCount: 11863
Tags: <android><android-calendar>
<p>You can use the calendar content provider (<code>com.android.providers.calendar.CalendarProvider</code>). Example:</p>

<pre><code>
ContentResolver contentResolver = context.getContentResolver();
Cursor cursor = contentResolver.query(Uri.parse("content://calendar/events"), null, null, null, null);

while(cursor.moveToNext()) {
    String eventTitle = cursor.getString(cursor.getColumnIndex("title"));
    Date eventStart = new Date(cursor.getLong(cursor.getColumnIndex("dtstart")));
    // etc.
}

</code></pre>

<p><strong>edit</strong>: you might want to put this in a wrapper (see <a href="http://stackoverflow.com/questions/846942/is-there-a-way-to-access-the-calendars-entries-without-using-gdata-java-client/885659#885659">Isaac's post</a>) as it's currently a private API.</p>

===UCLA===
PostId: 860610
Score: 15
Accepted: 0
ViewCount: 218665
Tags: <android><crash><stack-trace>
<p>Ok, well I looked at the provided samples from rrainn and Soonil, and I found a solution
that does not mess up error handling.</p>

<p>I modified the CustomExceptionHandler so it stores the original UncaughtExceptionHandler from the Thread we associate the new one. At the end of the new "uncaughtException"-
Method I just call the old function using the stored UncaughtExceptionHandler.</p>

<p>In the DefaultExceptionHandler class you need sth. like this:</p>

<pre><code>public class DefaultExceptionHandler implements UncaughtExceptionHandler{
  private UncaughtExceptionHandler mDefaultExceptionHandler;

  //constructor
  public DefaultExceptionHandler(UncaughtExceptionHandler pDefaultExceptionHandler)
  {
       mDefaultExceptionHandler= pDefaultExceptionHandler;
  }
  public void uncaughtException(Thread t, Throwable e) {       
        //do some action like writing to file or upload somewhere         

        //call original handler  
        mStandardEH.uncaughtException(t, e);        

        // cleanup, don't know if really required
        t.getThreadGroup().destroy();
  }
}
</code></pre>

<p>With that modification on the code at <a href="http://code.google.com/p/android-remote-stacktrace">http://code.google.com/p/android-remote-stacktrace</a>
you have a good working base for logging in the field to your webserver or to
sd-card.</p>

===UCLA===
PostId: 866184
Score: 30
Accepted: 1
ViewCount: 42876
Tags: <android><android-custom-view>
<p>The problem is that the only <a href="http://developer.android.com/reference/android/view/Window.html"><code>Window</code></a> implementation (<a href="http://android.git.kernel.org/?p=platform/frameworks/policies/base.git;a=blob%5Fplain;f=phone/com/android/internal/policy/impl/PhoneWindow.java;hb=HEAD"><code>PhoneWindow</code></a>) uses a <a href="http://developer.android.com/reference/android/view/LayoutInflater.html"><code>LayoutInflater</code></a> in its <code>setFeatureInt</code> method and instantiates the new layout with <a href="http://developer.android.com/reference/android/view/LayoutInflater.html"><code>inflate</code></a> and <code>attachToRoot=true</code>. Consequently, when you call <code>setFeatureInt</code>, the new layouts are not <em>replaced</em> but <em>attached</em> to the internal title container and thus drawn on top of each other.</p>

<p>You can workaround this by using the following helper method instead of <code>setFeatureInt</code>. The helper simply removes all views from the internal title container before the new custom title feature is set:</p>

<pre><code>
private void setCustomTitleFeatureInt(int value) {
    try {
     // retrieve value for com.android.internal.R.id.title_container(=0x1020149)
     int titleContainerId = (Integer) Class.forName(
      "com.android.internal.R$id").getField("title_container").get(null);

     // remove all views from titleContainer
     ((ViewGroup) getWindow().findViewById(titleContainerId)).removeAllViews();

     // add new custom title view 
     getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, value);

    } catch(Exception ex) {
     // whatever you want to do here..
    }
}
</code></pre>

<p>I'm not sure whether the current <code>setFeatureInt</code> behaviour is intended, but it is certainly not documented one way or the other which is why I'll take this to the android devs ;)</p>

<p><strong>EDIT</strong></p>

<p>As pointed out in the comments, the aforementioned workaround is not ideal. Instead of relying on the <code>com.android.internal.R.id.title_container</code> constant you could simply <em>hide</em> the old custom title whenever you set a new one.</p>

<p>Let's assume you have two custom title layouts:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout android:id="@+id/custom_title_1" ...
</code></pre>

<p>and</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout android:id="@+id/custom_title_2" ...
</code></pre>

<p>and you want to replace <code>custom_title_1</code> with <code>custom_title_2</code>, you could hide former and use <code>setFeatureInt</code> to add the latter:</p>

<pre><code>findViewById(R.id.custom_title_1).setVisibility(View.GONE);
getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.custom_title_2);
</code></pre>

===UCLA===
PostId: 867828
Score: 226
Accepted: 1
ViewCount: 179451
Tags: <android><contacts>
<p>I'm not 100% sure what your sample code is supposed to do, but the following snippet should help you 'call the contacts list function, pick a contact, then return to [your] app with the contact's name'.</p>

<p>There are three steps to this process.</p>

<h1>1. Permissions</h1>

<p>Add a permission to read contacts data to your application manifest.</p>

<pre><code>&lt;uses-permission android:name="android.permission.READ_CONTACTS"/&gt;
</code></pre>

<h1>2. Calling the Contact Picker</h1>

<p>Within your Activity, create an Intent that asks the system to find an Activity that can perform a PICK action from the items in the Contacts URI.</p>

<pre><code>Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
</code></pre>

<p>Call <code>startActivityForResult</code>, passing in this Intent (and a request code integer, <code>PICK_CONTACT</code> in this example). This will cause Android to launch an Activity that's registered to support <code>ACTION_PICK</code> on the <code>People.CONTENT_URI</code>, then return to this Activity when the selection is made (or canceled).</p>

<pre><code>startActivityForResult(intent, PICK_CONTACT);
</code></pre>

<h1>3. Listening for the Result</h1>

<p>Also in your Activity, override the <code>onActivityResult</code> method to listen for the return from the 'select a contact' Activity you launched in step 2. You should check that the returned request code matches the value you're expecting, and that the result code is <code>RESULT_OK</code>.</p>

<p>You can get the URI of the selected contact by calling <code>getData()</code> on the <em>data</em> Intent parameter. To get the name of the selected contact you need to use that URI to create a new query and extract the name from the returned cursor.</p>

<pre><code>@Override
public void onActivityResult(int reqCode, int resultCode, Intent data) {
  super.onActivityResult(reqCode, resultCode, data);

  switch (reqCode) {
    case (PICK_CONTACT) :
      if (resultCode == Activity.RESULT_OK) {
        Uri contactData = data.getData();
        Cursor c =  getContentResolver().query(contactData, null, null, null, null);
        if (c.moveToFirst()) {
          String name = c.getString(c.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
          // TODO Whatever you want to do with the selected contact name.
        }
      }
      break;
  }
}
</code></pre>

<p><sup>Full source code: <a href="http://tutorials-android.blogspot.com/2011/11/how-to-call-android-contacts-list.html" rel="nofollow">tutorials-android.blogspot.com (how to call android contacts list)</a>.</sup></p>

===UCLA===
PostId: 870933
Score: 9
Accepted: 1
ViewCount: 6107
Tags: <android>
<p>What you want to do is definitely possible, however you will need to manually fetch the image and set it on the ImageButton.</p>

<p>Here is a little method you can use to fetch an image:</p>

<pre><code>private Bitmap fetchImage( String urlstr )
{
    try
    {
        URL url;
        url = new URL( urlstr );

        HttpURLConnection c = ( HttpURLConnection ) url.openConnection();
        c.setDoInput( true );
        c.connect();
        InputStream is = c.getInputStream();
        Bitmap img;
        img = BitmapFactory.decodeStream( is );
        return img;
    }
    catch ( MalformedURLException e )
    {
        Log.d( "RemoteImageHandler", "fetchImage passed invalid URL: " + urlstr );
    }
    catch ( IOException e )
    {
        Log.d( "RemoteImageHandler", "fetchImage IO exception: " + e );
    }
    return null;
}
</code></pre>

<p>Of course you will want to wrap this method in a thread (Using <a href="http://developer.android.com/reference/android/os/AsyncTask.html" title="AsyncTask">AsyncTask</a> with SDK 1.5 or <a href="http://code.google.com/p/apps-for-android/source/browse/trunk/Photostream/src/com/google/android/photostream/UserTask.java" title="UserTask">UserTask</a> in SDK pre 1.5), then simply call:</p>

<pre><code>myImageButton.setImageBitmap( bitmap );
</code></pre>

<p>I think this has answered your question, if not please elaborate further.</p>

===UCLA===
PostId: 872131
Score: 53
Accepted: 0
ViewCount: 36473
Tags: <android><sms>
<p>You can use the sms content provider to read and write sms messages:</p>

<pre><code>ContentValues values = new ContentValues();
values.put("address", "123456789");
values.put("body", "foo bar");
getContentResolver().insert(Uri.parse("content://sms/sent"), values);
</code></pre>

<p>I don't know why you would want to write a message you <em>send</em> to the <em>inbox</em> but if that is what you want just change the above uri to <code>"content://sms/inbox"</code>.</p>

<p>Alternatively you can hand over to a messaging application by starting an activity with an intent similar to the following:</p>

<pre><code>Intent sendIntent = new Intent(Intent.ACTION_SENDTO, Uri.parse("sms://"));
sendIntent.putExtra("address", "123456789");
sendIntent.putExtra("sms_body", "foo bar");
startActivity(sendIntent);
</code></pre>

<p><strong>Edit:</strong> However, the <code>sms://</code> content provider is not part of the SDK so I strongly recommend <em>not</em> using code like this in public applications for <a href="http://android-developers.blogspot.com/2010/05/be-careful-with-content-providers.html">several reasons</a>.</p>

===UCLA===
PostId: 885659
Score: 3
Accepted: 0
ViewCount: 11863
Tags: <android><android-calendar>
<p>Currently, this is not possible without using private APIs (see Josef's post.) There is a Calendar provider, but it is not public yet. It could change anytime and break your app.<br />
Though, it probably will not change (I don't think they will change it from "calendar"), so you might be able to use it. But my recommendation is to use a separate class like this:</p>

<pre><code>public class CalendarProvider {
     public static final Uri CONTENT_URI = Uri.parse("content://calendar");
     public static final String TITLE = "title";
     public static final String ....
</code></pre>

<p>And use those instead of the strings directly. This will let you change it very easily if/when the API changes or it is made public.</p>

===UCLA===
PostId: 890945
Score: 65
Accepted: 1
ViewCount: 38760
Tags: <java><android><mobile>
<p>The <a href="http://developer.android.com/reference/android/telephony/TelephonyManager.html">TelephonyManager</a> has a method to return the MCC+MNC as a String (<a href="http://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperator()">getNetworkOperator()</a>) which will do you what you want. You can get access it via:</p>

<pre><code>protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    TelephonyManager tel = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
    String networkOperator = tel.getNetworkOperator();

    if (TextUtils.isEmpty(networkOperator) == false) {
        int mcc = Integer.parseInt(networkOperator.substring(0, 3));
        int mnc = Integer.parseInt(networkOperator.substring(3));
    }
}
</code></pre>

===UCLA===
PostId: 895602
Score: 4
Accepted: 1
ViewCount: 11172
Tags: <android><checkbox><android-listview><android-viewbinder>
<p>Looks like <code>SimpleCursorAdapter</code> is too primitive for what I wanted to achieve.
I've switched to implementing <code>CursorAdapter</code> and returning a new view using the <code>LayoutInflater</code> in my implementation of the <code>newView</code> method.</p>

<pre><code>  public View newView(Context context, Cursor cursor, ViewGroup parent) {
    return LayoutInflater.from(context).inflate(R.layout.alarm_row, parent, false);
  }
</code></pre>

<p>In bindView I then set a custom <code>OnClickListener</code> to my main <code>LinearLayout</code> and then another <code>OnCheckedChangeListener</code> to the <code>CheckBox</code>.</p>

<p>For all this to look right I had to set the <code>LinearLayout</code>'s background to android's menuitem drawable:</p>

<pre><code>android:background="@android:drawable/menuitem_background"
</code></pre>

===UCLA===
PostId: 896906
Score: 4
Accepted: 0
ViewCount: 50636
Tags: <java><android>
<p>First you need to set the content-type as a 'x-www-form-urlencoded'. Then whatever content you would like to encode, encode it using "UTF-8". </p>

<p>For example:</p>

<p><strong>For setting content to 'x-www-form-urlencoded':</strong><br></p>

<pre><code>URL url = new URL("http://www.xyz.com/SomeContext/SomeAction"); &lt;br&gt;
URLConnection urlConnection = url.openConnection();&lt;br&gt;
....&lt;br&gt;
....&lt;br&gt;
urlConnection.setRequestProperty("Content-type","application/x-www-form-urlencoded");
</code></pre>

<p><br>Or if you are using some JSP then you can write the following on top of it.<br></p>

<pre><code>&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %&gt;&lt;br&gt;
&lt; META http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;


&lt; FORM action="someaction.jsp" enctype="application/x-www-form-urlencoded" name="InputForm" method="POST"&gt;
</code></pre>

<p><strong>And to use URLEncoder:</strong><br></p>

<pre><code>String encodedString = URLEncoder.encode("hello","UTF-8");
</code></pre>

===UCLA===
PostId: 897268
Score: 3
Accepted: 0
ViewCount: 3661
Tags: <java><android>
<p>Alignment of text within an EditText widget can be controlled via gravity:</p>

<pre><code>editText.setGravity(Gravity.TOP);</code></pre>

<p>To attach markup objects to the EditText's content you can use the <a href="http://developer.android.com/reference/android/text/Editable.html" rel="nofollow">Editable</a> interface:</p>

<pre><code>EditText editText = (EditText) findViewById(R.id.editview);
SpannableStringBuilder builder = new SpannableStringBuilder();
builder.append("one red word");
builder.setSpan(new ForegroundColorSpan(Color.RED), 4, 7, Spanned.SPAN_COMPOSING);
editText.setText(builder, BufferType.EDITABLE);
</code></pre>

===UCLA===
PostId: 901474
Score: 1
Accepted: 0
ViewCount: 5866
Tags: <android>
<p>For working with sqlite database you need to create class extended from SQLiteOpenHelper:</p>

<pre><code>private class DBHelper extends SQLiteOpenHelper {   

    public DBHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(CREATE_TABLES);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL(UPGRADE_TABLES);
    }

}   
</code></pre>

<p>Then you can get access to db using DbHelper object:</p>

<pre><code>DBHelper dbHelper = new DBHelper(Activity.this);
SQLiteDatabase db = dbHelper.getReadableDatabase();
</code></pre>

