===UCLA===
PostId: 139
Score: 10
Accepted: 0
ViewCount: 7891
Tags: <java><php><oop><theory>
<blockquote>
  <p>Am I just going overboard here?</p>
</blockquote>

<p>Perhaps ;)</p>

<p>Another approach would be to utilize a private/protected method to actually do the getting (caching/db/etc), and a public wrapper for it that increments the count:</p>

<p>PHP:</p>

<pre><code>public function getName() {<br>    $this-&gt;incrementNameCalled();<br>    return $this-&gt;_getName();<br>}<br><br>protected function _getName() {<br>    return $this-&gt;name;<br>}<br></code></pre>

<p>and then from within the object itself:</p>

<p>PHP:</p>

<pre><code>$name = $this-&gt;_getName();<br></code></pre>

<p>This way you can still use that first argument for something else (like sending a flag for whether or not to used cached data here perhaps). </p>
===UCLA===
PostId: 384
Score: 39
Accepted: 1
ViewCount: 7628
Tags: <java><generics><warnings><casting><type-safety>
<p>This warning is there because Java is not actually storing type information at run-time in an object that uses generics.  Thus, if <code>object</code> is actually a <code>List&lt;String&gt;</code>, there will be no <code>ClassCastException</code> at run-time except until an item is accessed from the list that doesn't match the generic type defined in the variable.  </p>

<p>This can cause further complications if items are added to the list, with this incorrect generic type information.  Any code still holding a reference to the list but with the correct generic type information will now have an inconsistent list.  </p>

<p>To remove the warning, try:</p>

<pre><code>List&lt;?&gt; list = (List&lt;?&gt;) object;
</code></pre>

<p>However, note that you will not be able to use certain methods such as add because the compiler doesn't know if you are trying to add an object of incorrect type.  The above will work in a lot of situations, but if you have to use add, or some similarly restricted method, you will just have to suffer the yellow underline in Eclipse (or a <code>SuppressWarning</code> annotation).</p>

===UCLA===
PostId: 568
Score: 111
Accepted: 0
ViewCount: 145094
Tags: <c#><java><integer><int>
<p>Well, in Java an int is a primitive while an Integer is an Object. Meaning, if you made a new Integer:</p>

<pre><code>Integer i = new Integer(6);
</code></pre>

<p>You could call some method on i:</p>

<pre><code>String s = i.toString();//sets s the string representation of i
</code></pre>

<p>Whereas with an int:</p>

<pre><code>int i = 6;
</code></pre>

<p>You cannot call any methods on it, because it is simply a primitive. So:</p>

<pre><code>String s = i.toString();//will not work!!!
</code></pre>

<p>would produce an error, because int is not an object.</p>

<p>int is one of the few primitives in Java (along with char and some others). I'm not 100% sure, but I'm thinking that the Integer object more or less just has an int property and a whole bunch of methods to interact with that property (like the toString() method for example). So Integer is a fancy way to work with an int (Just as perhaps String is a fancy way to work with a group of chars).</p>

<p>I know that Java isn't C, but since I've never programmed in C this is the closest I could come to the answer. Hope this helps!</p>

<p><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html">Integer object javadoc</a></p>

<p><a href="http://mindprod.com/jgloss/intvsinteger.html">Integer Ojbect vs. int primitive comparison</a></p>

===UCLA===
PostId: 583
Score: 9
Accepted: 0
ViewCount: 145094
Tags: <c#><java><integer><int>
<p>In C#, int is just an <strong><em>alias</em></strong> for <code>System.Int32</code>, string for <code>System.String</code>, double for <code>System.Double</code> etc...</p>

<p>Personally I prefer int, string, double, etc. because they don't require a <code>using System;</code> statement :) A silly reason, I know...</p>

===UCLA===
PostId: 608
Score: 27
Accepted: 0
ViewCount: 145094
Tags: <c#><java><integer><int>
<p>I'll add to the excellent answers given above, and talk about boxing and unboxing, and how this applies to Java (although C# has it too). I'll use just Java terminology, because I am more <em>au fait</em> with that.</p>

<p>As the answers mentioned, <code>int</code> is just a number (called the <em>unboxed</em> type), whereas <code>Integer</code> is an object (which contains the number, hence a <em>boxed</em> type). In Java terms, that means (apart from not being able to call methods on <code>int</code>), you cannot store <code>int</code> or other non-object types in collections (<code>List</code>, <code>Map</code>, etc.). In order to store them, you must first box them up in its corresponding boxed type.</p>

<p>Java 5 onwards have something called <em>auto-boxing</em> and <em>auto-unboxing</em> which allow the boxing/unboxing to be done behind the scenes. Compare and contrast: Java 5 version:</p>

<pre><code>Deque&lt;Integer&gt; queue;<br><br>void add(int n) {<br>    queue.add(n);<br>}<br><br>int remove() {<br>    return queue.remove();<br>}<br></code></pre>

<p>Java 1.4 or earlier (no generics either):</p>

<pre><code>Deque queue;<br><br>void add(int n) {<br>    queue.add(Integer.valueOf(n));<br>}<br><br>int remove() {<br>    return ((Integer) queue.remove()).intValue();<br>}<br></code></pre>

<p>It must be noted that despite the brevity in the Java 5 version, both versions generate identical bytecode. Thus, although auto-boxing and auto-unboxing is very convenient because you write less code, these operations <em>do</em> happen behind the scenes, with the same runtime costs, so you still have to be aware of their existence.</p>

<p>Hope this helps!</p>
===UCLA===
PostId: 1266
Score: 20
Accepted: 0
ViewCount: 145094
Tags: <c#><java><integer><int>
<p>I'll just post here since some of the other posts are slightly inaccurate in relation to C#.</p>

<p><strong>Correct:</strong> <code>int</code> is an alias for <code>System.Int32</code>.<br/>
<strong>Wrong:</strong> <code>float</code> is not an alias for <code>System.Float</code>, but for <code>System.Single</code></p>

<p>Basically, int is a reserved keyword in the C# programming language, and is an alias for the <code>System.Int32</code> value type.</p>

<p>float and Float is not the same however, as the right system type for ''<code>float</code>'' is System.Single. There are some types like this that has reserved keywords that doesn't seem to match the type names directly.</p>

<p>In C# there is no difference between ''<code>int</code>'' and ''<code>System.Int32</code>'', or any of the other pairs or keywords/system types, except for when defining enums. With enums you can specify the storage size to use and in this case you can only use the reserved keyword, and not the system runtime type name.</p>

<p>Wether the value in the int will be stored on the stack, in memory, or as a referenced heap object depends on the context and how you use it.</p>

<p>This declaration in a method:</p>

<pre><code>int i;
</code></pre>

<p>defines a variable <code>i</code> of type <code>System.Int32</code>, living in a register or on the stack, depending on optimizations. The same declaration in a type (struct or class) defines a member field. The same declaration in a method argument list defines a parameter, with the same storage options as for a local variable. (note that this paragraph is not valid if you start pulling iterator methods into the mix, these are different beasts altogether)</p>

<p>To get a heap object, you can use boxing:</p>

<pre><code>object o = i;
</code></pre>

<p>this will create a boxed copy of the contents of <code>i</code> on the heap. In IL you can access methods on the heap object directly, but in C# you need to cast it back to an int, which will create another copy. Thus, the object on the heap cannot easily be changed in C# without creating a new boxed copy of a new int value. (Ugh, this paragraph doesn't read all that easily.)</p>

===UCLA===
PostId: 1582
Score: 4
Accepted: 0
ViewCount: 145094
Tags: <c#><java><integer><int>
<p>This has already been answered for Java, here's the C# answer:</p>

<p>"Integer" is not a valid type name in C# and "int" is just an alias for System.Int32. Also, unlike in Java (or C++) there aren't any special primitive types in C#, every instance of a type in C# (including int) is an object. Here's some demonstrative code:</p>

<pre><code>void DoStuff()<br>{<br>    System.Console.WriteLine( SomeMethod((int)5) );<br>    System.Console.WriteLine( GetTypeName&lt;int&gt;() );<br>}<br><br>string SomeMethod(object someParameter)<br>{<br>    return string.Format("Some text {0}", someParameter.ToString());<br>}<br><br>string GetTypeName&lt;T&gt;()<br>{<br>    return (typeof (T)).FullName;<br>}<br></code></pre>
===UCLA===
PostId: 2210
Score: 9
Accepted: 0
ViewCount: 77247
Tags: <java><swing><jbutton>
<p>You could always try the Synth look &amp; feel. You provide an xml file that acts as a sort of stylesheet, along with any images you want to use. The code might look like this:</p>

<pre><code>try {
    SynthLookAndFeel synth = new SynthLookAndFeel();
    Class aClass = MainFrame.class;
    InputStream stream = aClass.getResourceAsStream("\\default.xml");

    if (stream == null) {
        System.err.println("Missing configuration file");
        System.exit(-1);                
    }

    synth.load(stream, aClass);

    UIManager.setLookAndFeel(synth);
} catch (ParseException pe) {
    System.err.println("Bad configuration file");
    pe.printStackTrace();
    System.exit(-2);
} catch (UnsupportedLookAndFeelException ulfe) {
    System.err.println("Old JRE in use. Get a new one");
    System.exit(-3);
}
</code></pre>

<p>From there, go on and add your JButton like you normally would. The only change is that you use the setName(string) method to identify what the button should map to in the xml file.</p>

<p>The xml file might look like this:</p>

<pre><code>&lt;synth&gt;
    &lt;style id="button"&gt;
        &lt;font name="DIALOG" size="12" style="BOLD"/&gt;
        &lt;state value="MOUSE_OVER"&gt;
            &lt;imagePainter method="buttonBackground" path="dirt.png" sourceInsets="2 2 2 2"/&gt;
            &lt;insets top="2" botton="2" right="2" left="2"/&gt;
        &lt;/state&gt;
        &lt;state value="ENABLED"&gt;
            &lt;imagePainter method="buttonBackground" path="dirt.png" sourceInsets="2 2 2 2"/&gt;
            &lt;insets top="2" botton="2" right="2" left="2"/&gt;
        &lt;/state&gt;
    &lt;/style&gt;
    &lt;bind style="button" type="name" key="dirt"/&gt;
&lt;/synth&gt;
</code></pre>

<p>The bind element there specifies what to map to (in this example, it will apply that styling to any buttons whose name property has been set to "dirt").</p>

<p>And a couple of useful links:</p>

<p><a href="http://javadesktop.org/articles/synth/" rel="nofollow">http://javadesktop.org/articles/synth/</a></p>

<p><a href="http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html" rel="nofollow">http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html</a></p>

===UCLA===
PostId: 2225
Score: 29
Accepted: 0
ViewCount: 77247
Tags: <java><swing><jbutton>
<p>Yes, this is possible. One of the main pros for using Swing is the ease with which the abstract controls can be created and manipulates.</p>

<p>Here is a quick and dirty way to extend the existing JButton class to draw a circle to the right of the text.</p>

<pre><code>package test;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;

import javax.swing.JButton;
import javax.swing.JFrame;

public class MyButton extends JButton {

    private static final long serialVersionUID = 1L;

    private Color circleColor = Color.BLACK;

    public MyButton(String label) {
        super(label);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        Dimension originalSize = super.getPreferredSize();
        int gap = (int) (originalSize.height * 0.2);
        int x = originalSize.width + gap;
        int y = gap;
        int diameter = originalSize.height - (gap * 2);

        g.setColor(circleColor);
        g.fillOval(x, y, diameter, diameter);
    }

    @Override
    public Dimension getPreferredSize() {
        Dimension size = super.getPreferredSize();
        size.width += size.height;
        return size;
    }

    /*Test the button*/
    public static void main(String[] args) {
        MyButton button = new MyButton("Hello, World!");

        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400);

        Container contentPane = frame.getContentPane();
        contentPane.setLayout(new FlowLayout());
        contentPane.add(button);

        frame.setVisible(true);
    }

}
</code></pre>

<p>Note that by overriding <strong>paintComponent</strong> that the contents of the button can be changed, but that the border is painted by the <strong>paintBorder</strong> method. The <strong>getPreferredSize</strong> method also needs to be managed in order to dynamically support changes to the content. Care needs to be taken when measuring font metrics and image dimensions.</p>

<p>For creating a control that you can rely on, the above code is not the correct approach. Dimensions and colours are dynamic in Swing and are dependent on the look and feel being used. Even the default <em>Metal</em> look has changed across JRE versions. It would be better to implement <strong>AbstractButton</strong> and conform to the guidelines set out by the Swing API. A good starting point is to look at the <strong>javax.swing.LookAndFeel</strong> and <strong>javax.swing.UIManager</strong> classes.</p>

<p><a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/LookAndFeel.html">http://docs.oracle.com/javase/8/docs/api/javax/swing/LookAndFeel.html</a></p>

<p><a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/UIManager.html">http://docs.oracle.com/javase/8/docs/api/javax/swing/UIManager.html</a></p>

<p>Understanding the anatomy of LookAndFeel is useful for writing controls:
<a href="http://wayback.archive.org/web/20090309070901/http://java.sun.com/products/jfc/tsc/articles/sce/index.html">Creating a Custom Look and Feel</a></p>

===UCLA===
PostId: 2245
Score: 74
Accepted: 1
ViewCount: 77247
Tags: <java><swing><jbutton>
<p>When I was first learning Java we had to make Yahtzee and I thought it would be cool to create custom Swing components and containers instead of just drawing everything on one JPanel.  The benefit of extending Swing components, of course, is to have the ability to add support for keyboard shortcuts and other accessibility features that you can't do just by having a paint() method print a pretty picture.  It may not be done the best way however, but it may be a good starting point for you.</p>

<p>Edit 8/6 - If it wasn't apparent from the images, each Die is a button you can click. This will move it to the DiceContainer below.  Looking at the source code you can see that each Die button is drawn dynamically, based on its value.</p>

<p><img src="http://i.stack.imgur.com/pgyQp.jpg" alt="alt text"><br>
<img src="http://i.stack.imgur.com/jkYRd.jpg" alt="alt text"><br>
<img src="http://i.stack.imgur.com/9BI34.jpg" alt="alt text"></p>

<p>Here are the basic steps:</p>

<ol>
<li>Create a class that extends JComponent</li>
<li>Call parent constructor super() in your constructors</li>
<li>Make sure you class implements MouseListener</li>
<li><p>Put this in the constructor:</p>

<pre><code>enableInputMethods(true);   
addMouseListener(this);
</code></pre></li>
<li><p>Override these methods:</p>

<pre><code>public Dimension getPreferredSize()  
public Dimension getMinimumSize()  
public Dimension getMaximumSize()
</code></pre></li>
<li><p>Override this method:</p>

<pre><code>public void paintComponent(Graphics g)
</code></pre></li>
</ol>

<p>The amount of space you have to work with when drawing your button is defined by getPreferredSize(), assuming getMinimumSize() and getMaximumSize() return the same value.  I haven't experimented too much with this but, depending on the layout you use for your GUI your button could look completely different.</p>

<p>And finally, the <a href="https://github.com/kdeloach/labs/blob/master/java/yahtzee/src/Dice.java">source code</a>.  In case I missed anything.  </p>

===UCLA===
PostId: 2823
Score: 14
Accepted: 0
ViewCount: 145094
Tags: <c#><java><integer><int>
<p>Regarding Java 1.5 and <a href="http://en.wikipedia.org/wiki/Autoboxing#Autoboxing">autoboxing</a> there is an important "quirk" that comes to play when comparing Integer objects.</p>

<p>In Java, Integer objects with the values -128 to 127 are immutable (that is, for one particular integer value, say 23, all Integer objects instantiated through your program with the value 23 points to the <em>exact</em> same object).</p>

<p>Example, this returns true:</p>

<pre><code>Integer i1 = new Integer(127);<br>Integer i2 = new Integer(127);<br>System.out.println(i1 == i2); //  true<br></code></pre>

<p>While this returns false:</p>

<pre><code>Integer i1 = new Integer(128);<br>Integer i2 = new Integer(128);<br>System.out.println(i1 == i2); //  false<br></code></pre>

<p>The == compares by reference (does the variables point to the same object).</p>

<p>This result may or may not differ depending on what JVM you are using. The specification autoboxing for Java 1.5 requires that integers (-128 to 127) always box to the same wrapper object. </p>

<p>A solution? =) One should always use the Integer.equals() method when comparing Integer objects.</p>

<pre><code>System.out.println(i1.equals(i2)); //  true<br></code></pre>

<p>More info at <a href="http://today.java.net/pub/a/today/2005/03/24/autoboxing.html">java.net</a> Example at <a href="http://bexhuff.com/2006/11/java-1-5-autoboxing-wackyness">bexhuff.com</a></p>
===UCLA===
PostId: 2971
Score: 1
Accepted: 0
ViewCount: 49952
Tags: <java><string><parsing>
<p>A simple string tokenizer on spaces should work, but there are really many ways you could do this.</p>

<p>Here is an example using a tokenizer:</p>

<pre><code>String command = "kick person";<br>StringTokenizer tokens = new StringTokenizer(command);<br>String action = null;<br><br>if (tokens.hasMoreTokens()) {<br>    action = tokens.nextToken();<br>}<br><br>if (action != null) {<br>    doCommand(action, tokens);<br>}<br></code></pre>

<p>Then tokens can be further used for the arguments.  This all assumes no spaces are used in the arguments... so you might want to roll your own simple parsing mechanism (like getting the first whitespace and using text before as the action, or using a regular expression if you don't mind the speed hit), just abstract it out so it can be used anywhere.</p>
===UCLA===
PostId: 3285
Score: 13
Accepted: 0
ViewCount: 145094
Tags: <c#><java><integer><int>
<p>In Java there are two basic types in the <a href="http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#22930">JVM</a>. 1) Primitive types and 2) Reference Types. int is a primitive type and Integer is a class type (which is kind of reference type).</p>

<p>Primitive values do not share state with other primitive values. A variable whose type is a primitive type always holds a primitive value of that type.</p>

<pre><code>int aNumber = 4;
int anotherNum = aNumber;
aNumber += 6;
System.out.println(anotherNum); // Prints 4
</code></pre>

<p>An object is a dynamically created class instance or an array. The reference values (often just references) are pointers to these objects and a special null reference, which refers to no object. There may be many references to the same object.</p>

<pre><code>Integer aNumber = Integer.valueOf(4);
Integer anotherNumber = aNumber; // anotherNumber references the 
                                 // same object as aNumber
</code></pre>

<p>Also in Java everything is passed by value. With objects the value that is passed is the reference to the object. So another difference between int and Integer in java is how they are passed in method calls. For example in</p>

<pre><code>public int add(int a, int b) {
    return a + b;
}
final int two = 2;
int sum = add(1, two);
</code></pre>

<p>The variable <em>two</em> is passed as the primitive integer type 2. Whereas in</p>

<pre><code>public int add(Integer a, Integer b) {
    return a.intValue() + b.intValue();
}
final Integer two = Integer.valueOf(2);
int sum = add(Integer.valueOf(1), two);
</code></pre>

<p>The variable <em>two</em> is passed as a reference to an object that holds the integer value 2.</p>

<p><hr /></p>

<p>@WolfmanDragon:
Pass by reference would work like so:</p>

<pre><code>public void increment(int x) {
  x = x + 1;
}
int a = 1;
increment(a);
// a is now 2
</code></pre>

<p>When increment is called it passes a reference (pointer) to variable <em>a</em>. And the <em>increment</em> function directly modifies variable <em>a</em>.</p>

<p>And for object types it would work as follows:</p>

<pre><code>public void increment(Integer x) {
  x = Integer.valueOf(x.intValue() + 1);
}
Integer a = Integer.valueOf(1);
increment(a);
// a is now 2
</code></pre>

<p>Do you see the difference now?</p>

===UCLA===
PostId: 3539
Score: 2
Accepted: 0
ViewCount: 49952
Tags: <java><string><parsing>
<p>@CodingTheWheel Heres your code, a bit clean up and through eclipse (<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>f</kbd>) and the inserted back here :)</p>

<p>Including the four spaces in front each line.</p>

<pre><code>public static boolean simpleNLP(String inputline, String keywords[]) {
    if (inputline.length() &lt; 1)
        return false;

    List&lt;String&gt; lexed = new ArrayList&lt;String&gt;(); 
    for (String ele : inputline.split(" ")) {
        lexed.add(ele);
    }


    boolean status = false;
    to = 0;
    for (i = 0; i &lt; lexed.size(); i++) {
        String s = (String) lexed.get(i);
        if (s.equalsIgnoreCase(keywords[to])) {
            to++;
            if (to &gt;= keywords.length) {
                status = true;
                break;
            }
        }
    }
    return status;
}
</code></pre>

===UCLA===
PostId: 4247
Score: 41
Accepted: 1
ViewCount: 5448
Tags: <java><autoboxing>
<p>Java autoboxing/unboxing doesn't go to the extent to allow you to dereference a primitive, so your compiler prevents it. Your compiler still knows <code>myInt</code> as a primitive.  There's a paper about this issue at <a href="http://jcp.org/aboutJava/communityprocess/jsr/tiger/autoboxing.html">jcp.org</a>.</p>

<p>Autoboxing is mainly useful during assignment or parameter passing -- allowing you to pass a primitive as an object (or vice versa), or assign a primitive to an object (or vice versa).</p>

<p>So unfortunately, you would have to do it like this: (kudos Patrick, I switched to your way)</p>

<pre><code>Integer.toString(myInt);
</code></pre>

===UCLA===
PostId: 4256
Score: 24
Accepted: 0
ViewCount: 5448
Tags: <java><autoboxing>
<p>Ditto on what Justin said, but you should do this instead:</p>

<pre><code>Integer.toString(myInt);
</code></pre>

<p>It saves an allocation or two and is more readable.</p>

===UCLA===
PostId: 4384
Score: 6
Accepted: 0
ViewCount: 5448
Tags: <java><autoboxing>
<blockquote>
  <p>seems like a shortcoming of the
  specification to me</p>
</blockquote>

<p>There are more shortcomings and this is a subtle topic. Check <a href="http://kiranthakkar.blogspot.com/2007/05/method-overloading-with-new-features-of.html">this</a> out:</p>

<pre><code>public class methodOverloading{<br>   public static void hello(Integer x){<br>      System.out.println("Integer");<br>   }<br><br>   public static void hello(long x){<br>      System.out.println("long");<br>   }<br><br>   public static void main(String[] args){<br>      int i = 5;<br>      hello(i);<br>   }<br>}<br></code></pre>

<p>Here "long" would be printed (haven't checked it myself), because the compiler choses widening over autoboxing. Be careful when using autoboxing or don't use it at all!</p>
===UCLA===
PostId: 4498
Score: 3
Accepted: 0
ViewCount: 25814
Tags: <java><file><file-io>
<p>The answer seems to be "no" ... and "yes". There seems to be no real way to know if a file is open for writing by another application. So, reading from such a file will just progress until content is exhausted. I took Mike's advice and wrote some test code:</p>

<p>Writer.java writes a string to file and then waits for the user to hit enter before writing another line to file. The idea being that it could be started up, then a reader can be started to see how it copes with the "partial" file. The reader I wrote is in Reader.java.</p>

<p><strong>Writer.java</strong></p>

<pre><code>public class Writer extends Object<br>{<br>    Writer () {<br><br>    }<br><br>    public static String[] strings = <br>        {<br>            "Hello World", <br>            "Goodbye World"<br>        };<br><br>    public static void main(String[] args) <br>        throws java.io.IOException {<br><br>        java.io.PrintWriter pw =<br>            new java.io.PrintWriter(new java.io.FileOutputStream("out.txt"), true);<br><br>        for(String s : strings) {<br>            pw.println(s);<br>            System.in.read();<br>        }<br><br>        pw.close();<br>    }<br>}<br></code></pre>

<p><strong>Reader.java</strong></p>

<pre><code>public class Reader extends Object<br>{<br>    Reader () {<br><br>    }<br><br>    public static void main(String[] args) <br>        throws Exception {<br><br>        java.io.FileInputStream in = new java.io.FileInputStream("out.txt");<br><br>        java.nio.channels.FileChannel fc = in.getChannel();<br>        java.nio.ByteBuffer bb = java.nio.ByteBuffer.allocate(10);<br><br>        while(fc.read(bb) &gt;= 0) {<br>            bb.flip();<br>            while(bb.hasRemaining()) {<br>                System.out.println((char)bb.get());<br>            }<br>            bb.clear();<br>        }<br><br>        System.exit(0);<br>    }<br>}<br></code></pre>

<p>No guarantees that this code is best practice.</p>

<p>This leaves the option suggested by Mike of periodically checking if there is new data to be read from the file. This then requires user intervention to close the file reader when it is determined that the reading is completed. Or, the reader needs to be made aware the content of the file and be able to determine and end of write condition. If the content were XML, the end of document could be used to signal this.</p>
===UCLA===
PostId: 5091
Score: 12
Accepted: 1
ViewCount: 3582
Tags: <java><primitive><autoboxing>
<p>In the first case, you have a widening conversion happening. This can be see when runinng the "javap" utility program (included w/ the JDK), on the compiled class:</p>

<pre><code>public static void main(java.lang.String[]);<br>  Code:<br>   0:   iconst_ 5<br>   1:   istore_ 1<br>   2:   iload_ 1<br>   3:   i2l<br>   4:   invokestatic    #6; //Method hello:(J)V<br>   7:   return<br><br>}<br></code></pre>

<p>Clearly, you see the I2L, which is the mnemonic for the widening Integer-To-Long bytecode instruction. See reference <a href="http://java.sun.com/docs/books/jvms/second_edition/html/Instructions2.doc6.html">here</a>.</p>

<p>And in the other case, replacing the "long x" with the object "Long x" signature, you'll have this code in the main method:</p>

<pre><code>public static void main(java.lang.String[]);<br>  Code:<br>   0:   iconst_ 5<br>   1:   istore_ 1<br>   2:   iload_ 1<br>   3:   invokestatic    #6; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;<br>   6:   invokestatic    #7; //Method hello:(Ljava/lang/Integer;)V<br>   9:   return<br><br>}<br></code></pre>

<p>So you see the compiler has created the instruction Integer.valueOf(int), to box the primitive inside the wrapper.</p>
===UCLA===
PostId: 5164
Score: 1
Accepted: 0
ViewCount: 3582
Tags: <java><primitive><autoboxing>
<p>Another interesting thing with this example is the method overloading. The combination of type widening and method overloading only working because the compiler has to make a decision of which method to choose. Consider the following example:</p>

<pre><code>public static void hello(Collection x){
   System.out.println("Collection");
}

public static void hello(List x){
   System.out.println("List");
}

public static void main(String[] args){
   Collection col = new ArrayList();
   hello(col);
}
</code></pre>

<p>It doesn't use the run-time type which is List, it uses the compile-time type which is Collection and thus prints "Collection". </p>

<p>I encourage your to read <a href="http://books.google.com/books?id=" rel="nofollow">Effective Java</a>, which opened my eyes to some corner cases of the JLS.</p>

<p>ZOiqZQIbRMC</p>
===UCLA===
PostId: 6358
Score: 51
Accepted: 0
ViewCount: 96760
Tags: <java><exception><null><nullpointerexception><illegalargumentexception>
<p>I tend to follow the design of JDK libraries, especially Collections and Concurrency (Joshua Bloch, Doug Lea, those guys know how to design solid APIs). Anyway, many APIs in the JDK pro-actively throws <code>NullPointerException</code>. </p>

<p>For example, the Javadoc for <code>Map.containsKey</code> states:</p>

<blockquote>
  <p>@throws NullPointerException if the key is null and this map
    does not permit null keys (optional).</p>
</blockquote>

<p>It's perfectly valid to throw your own NPE. The convention is to include the parameter name which was null in the message of the exception. </p>

<p>The pattern goes:</p>

<pre><code>public void someMethod(Object mustNotBeNull) {  
    if (mustNotBeNull == null) {  
        throw new NullPointerException("mustNotBeNull must not be null");  
    }  
}
</code></pre>

<p>Whatever you do, don't allow a bad value to get set and throw an exception later when other code attempts to use it. That makes debugging a nightmare. You should always the follow the "fail-fast" principle.</p>

===UCLA===
PostId: 6640
Score: 46
Accepted: 0
ViewCount: 102766
Tags: <java><file><loading>
<p><strong>The short answer</strong></p>

<p>Use one of these two methods:</p>

<ul>
<li><a href="http://java.sun.com/javase/6/docs/api/java/lang/Class.html#getResource(java.lang.String)" rel="nofollow"><code>Class.getResource(String)</code></a></li>
<li><a href="http://java.sun.com/javase/6/docs/api/java/lang/Class.html#getResourceAsStream(java.lang.String)" rel="nofollow"><code>Class.getResourceAsStream(String)</code></a></li>
</ul>

<p>For example:</p>

<pre><code>InputStream inputStream = YourClass.class.getResourceAsStream("image.jpg");
</code></pre>

<p>--</p>

<p><strong>The long answer</strong></p>

<p>Typically, one would not want to load files using absolute paths. For example, don’t do this if you can help it:</p>

<pre><code>File file = new File("C:\\Users\\Joe\\image.jpg");
</code></pre>

<p>This technique is not recommended for at least two reasons. First, it creates a dependency on a particular operating system, which prevents the application from easily moving to another operating system. One of Java’s main benefits is the ability to run the same bytecode on many different platforms. Using an absolute path like this makes the code much less portable.</p>

<p>Second, depending on the relative location of the file, this technique might create an external dependency and limit the application’s mobility. If the file exists outside the application’s current directory, this creates an external dependency and one would have to be aware of the dependency in order to move the application to another machine (error prone).</p>

<p>Instead, use the <code>getResource()</code> methods in the <code>Class</code> class. This makes the application much more portable. It  can be moved to different platforms, machines, or directories and still function correctly.</p>

===UCLA===
PostId: 7083
Score: 13
Accepted: 0
ViewCount: 5448
Tags: <java><autoboxing>
<p>One other way to do it is to use:</p>

<pre><code>String.valueOf(myInt);
</code></pre>

<p>This method is overloaded for every primitive type and <code>Object</code>. This way you don't even have to think about the type you're using. Implementations of the method will call the appropriate method of the given type for you, e.g. <code>Integer.toString(myInt)</code>.</p>

<p>See <a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html">http://java.sun.com/javase/6/docs/api/java/lang/String.html</a>.</p>

===UCLA===
PostId: 7550
Score: 2
Accepted: 0
ViewCount: 39325
Tags: <java><math><bigdecimal><mathcontext>
<p>If I'm understanding you correctly, it sounds like you're expecting the MathContext to control how many digits should be kept after the decimal point.  That's not what it's for.  It specifies how many digits to keep, <em>total</em>.  So if you specify that you want 3 significant digits, that's all you're going to get.</p>

<p>For example, this:</p>

<pre><code>System.out.println(new BigDecimal("1234567890.123456789",
                   new MathContext(20)));

System.out.println(new BigDecimal("1234567890.123456789",
                   new MathContext(10)));

System.out.println(new BigDecimal("1234567890.123456789",
                   new MathContext(5)));
</code></pre>

<p>will output:</p>

<pre><code>1234567890.123456789
1234567890
1.2346E+9
</code></pre>

===UCLA===
PostId: 7561
Score: 31
Accepted: 1
ViewCount: 39325
Tags: <java><math><bigdecimal><mathcontext>
<p>@jatan</p>

<blockquote>
  <p>Thanks for you answer. It makes sense. Can you please explain me MathContext in the context of BigDecimal#round method.</p>
</blockquote>

<p>There's nothing special about <code>BigDecimal.round()</code> <em>vs.</em> any other <code>BigDecimal</code> method.  In all cases, the <code>MathContext</code> specifies the number of significant digits and the rounding technique.  Basically, there are two parts of every <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/math/MathContext.html"><code>MathContext</code></a>.  There's a precision, and there's also a <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/math/RoundingMode.html"><code>RoundingMode</code></a>.</p>

<p>The precision again specifies the number of significant digits.  So if you specify <code>123</code> as a number, and ask for 2 significant digits, you're going to get <code>120</code>.  It might be clearer if you think in terms of scientific notation.</p>

<p><code>123</code> would be <code>1.23e2</code> in scientific notation.  If you only keep 2 significant digits, then you get <code>1.2e2</code>, or <code>120</code>.  By reducing the number of significant digits, we reduce the precision with which we can specify a number.</p>

<p>The <code>RoundingMode</code> part specifies how we should handle the loss of precision.  To reuse the example, if you use <code>123</code> as the number, and ask for 2 significant digits, you've reduced your precision.  With a <code>RoundingMode</code> of <code>HALF_UP</code> (the default mode), <code>123</code> will become <code>120</code>.  With a <code>RoundingMode</code> of <code>CEILING</code>, you'll get <code>130</code>.</p>

<p>For example:</p>

<pre><code>System.out.println(new BigDecimal("123.4",
                   new MathContext(4,RoundingMode.HALF_UP)));
System.out.println(new BigDecimal("123.4",
                   new MathContext(2,RoundingMode.HALF_UP)));
System.out.println(new BigDecimal("123.4",
                   new MathContext(2,RoundingMode.CEILING)));
System.out.println(new BigDecimal("123.4",
                   new MathContext(1,RoundingMode.CEILING)));
</code></pre>

<p>Outputs:</p>

<pre><code>123.4
1.2E+2
1.3E+2
2E+2
</code></pre>

<p>You can see that both the precision and the rounding mode affect the output.</p>

===UCLA===
PostId: 8132
Score: 2
Accepted: 0
ViewCount: 96760
Tags: <java><exception><null><nullpointerexception><illegalargumentexception>
<p>The accepted practice if to use the <em>IllegalArgumentException( String message )</em> to declare a parameter to be invalid and give as much detail as possible... So to say that a parameters was found to be null while exception non-null, you would do something like this:</p>

<pre><code>if( variable == null )
    throw new IllegalArgumentException("The object 'variable' cannot be null");
</code></pre>

<p>You have virtually no reason to implicitly use the "NullPointerException". The NullPointerException is an exception thrown by the Java Virtual Machine when you try to execute code on null reference (Like <em>toString()</em>).</p>

===UCLA===
PostId: 11042
Score: 38
Accepted: 0
ViewCount: 68214
Tags: <java><http><servlets>
<p>Here's a simple example. I didn't get fancy with the html or the servlet, but you should get the idea.</p>

<p>I hope this helps you out.</p>

<pre><code>&lt;html&gt;
&lt;body&gt;
&lt;form method="post" action="/myServlet"&gt;
&lt;input type="text" name="username" /&gt;
&lt;input type="password" name="password" /&gt;
&lt;input type="submit" /&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Now for the Servlet</p>

<pre><code>import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class MyServlet extends HttpServlet {
  public void doPost(HttpServletRequest request,
                    HttpServletResponse response)
      throws ServletException, IOException {

    String userName = request.getParameter("username");
    String password = request.getParameter("password");
    ....
    ....
  }
}
</code></pre>

===UCLA===
PostId: 11101
Score: 16
Accepted: 1
ViewCount: 23359
Tags: <java><byte><unsigned><signed>
<p>When reading any single value from the array copy it into something like a short or an int and manually convert the negative number into the positive value it should be.</p>

<pre><code>byte[] foobar = ..;
int value = foobar[10];
if (value &lt; 0) value += 256 // Patch up the 'falsely' negative value
</code></pre>

<p>You can do a similar conversion when writing into the array.</p>

===UCLA===
PostId: 12030
Score: 4
Accepted: 1
ViewCount: 21600
Tags: <java><sockets><ip><router>
<p>Java doesn't make this as pleasant as other languages, unfortunately. Here's what I did:</p>

<pre><code>import java.io.*;
import java.util.*;

public class ExecTest {
    public static void main(String[] args) throws IOException {
        Process result = Runtime.getRuntime().exec("traceroute -m 1 www.amazon.com");

        BufferedReader output = new BufferedReader(new InputStreamReader(result.getInputStream()));
        String thisLine = output.readLine();
        StringTokenizer st = new StringTokenizer(thisLine);
        st.nextToken();
        String gateway = st.nextToken();
        System.out.printf("The gateway is %s\n", gateway);
    }
}
</code></pre>

<p>This presumes that the gateway is the second token and not the third. If it is, you need to add an extra <code>st.nextToken();</code> to advance the tokenizer one more spot.</p>

===UCLA===
PostId: 12100
Score: 17
Accepted: 0
ViewCount: 38087
Tags: <java><obfuscation>
<p>I use proguard for JavaME development. It's not only very very good at making jar files smaller (Essential for mobile) but it is useful as a nicer way of doing device-specific code without resorting to IDE-unfriendly preprocessing tools such as antenna.</p>

<p>E.g.</p>

<pre><code>public void doSomething()
{
    /* Generated config class containing static finals: */
    if (Configuration.ISMOTOROLA)
    {
        System.out.println("This is a motorola phone");
    }
    else
    {
        System.out.println("This is not a motorola phone");
    }
}
</code></pre>

<p>This gets compiled, obfuscated, and the class file ends up as though you had written:</p>

<pre><code>public void doSomething()
{
    System.out.println("This is a motorola phone");
}
</code></pre>

<p>So you can have variants of code to work around manufacturer bugs in JVM/library implementations without bulking out the final executable class files.</p>

<p>I believe that some commercial obfuscators can also merge class files together in certain cases. This is useful because the more classes you have, the larger the size overhead you have in the zip (jar) file.</p>

===UCLA===
PostId: 12878
Score: 5
Accepted: 1
ViewCount: 848
Tags: <java><php><jsp><tomcat>
<p>You could do essentially the same code with Hashtables (or some other Map):</p>

<pre><code>Hashtable&lt;String, Hashtable&lt;String, String&gt;&gt; schedule
    = new Hashtable&lt;String, Hashtable&lt;String, String&gt;&gt;();
schedule.put("A", new Hashtable&lt;String, String&gt;());
schedule.put("B", new Hashtable&lt;String, String&gt;());
schedule.put("C", new Hashtable&lt;String, String&gt;());
schedule.put("D", new Hashtable&lt;String, String&gt;());
schedule.put("E", new Hashtable&lt;String, String&gt;());

schedule.get("A").put("Winter", "M");
schedule.get("A").put("Spring", "tTS");
// Etc...
</code></pre>

<p>Not as elegant, but then again, Java isn't a dynamic language, and it doesn't have hashes on the language level.</p>

<p>Note: You might be able to do a better solution, this just popped in my head as I read your question.</p>

===UCLA===
PostId: 12885
Score: -1
Accepted: 0
ViewCount: 848
Tags: <java><php><jsp><tomcat>
<p>There is no pretty solution.  Java just doesn't do things like this well.  Mike's solution is pretty much the way to do it if you want strings as the indices (keys).  Another option if the hash-of-hashes setup is too ugly is to append the strings together (shamelessly stolen from Mike and modified):</p>

<pre><code>Hashtable&lt;String, String&gt; schedule = new Hashtable&lt;String, String&gt;();
schedule.put("A-Winter", "M");
schedule.put("A-Spring", "tTS");
</code></pre>

<p>and then lookup:</p>

<pre><code>String val = schedule.get(group + "-" + season);
</code></pre>

<p>If you're unhappy with the general ugliness (and I don't blame you), put it all behind a method call:</p>

<pre><code>String whenCanIWater(String group, Date date) { /* ugliness here */ }
</code></pre>

===UCLA===
PostId: 12887
Score: 1
Accepted: 0
ViewCount: 848
Tags: <java><php><jsp><tomcat>
<p>@Brian Warshaw</p>

<p>FYI, with Java 1.5, primitives are now autoboxed to the wrapped version, so you can call it with just the primitive:</p>

<pre><code>Hashtable&lt;String, Integer&gt; hash = new Hashtable&lt;String, Integer&gt;();
hash.put("key", 15); // Works from Java 1.5 on
</code></pre>

===UCLA===
PostId: 12899
Score: 2
Accepted: 0
ViewCount: 848
Tags: <java><php><jsp><tomcat>
<p>I'm not a Java programmer, but getting away from Java and just thinking in terms that are more language agnostic - a cleaner way to do it might be to use either constants or enumerated types.  This should work in any langauge that supports multi-dimensional arrays.</p>

<p>If using named constants, where, for example: </p>

<pre><code>int A = 0;
int B = 1;
int C = 2;
int D = 3;

int Spring = 0; 
int Summer = 1;
int Winter = 2; 
int Fall = 3;
...
</code></pre>

<p>Then the constants serve as more readable array subscripts:</p>

<pre><code>schedule[A][Winter]="M";
schedule[A][Spring]="tTS";
schedule[A][Summer]="Any";
schedule[A][Fall]="tTS";
schedule[B][Winter]="t";
</code></pre>

<p>Using enumerated types:</p>

<pre><code>enum groups
{
  A = 0,
  B = 1,
  C = 2,
  D = 3
}

enum seasons
{
  Spring = 0,
  Summer = 1,
  Fall = 2,
  Winter = 3
}
...
schedule[groups.A][seasons.Winter]="M";
schedule[groups.A][seasons.Spring]="tTS";
schedule[groups.A][seasons.Summer]="Any";
schedule[groups.A][seasons.Fall]="tTS";
schedule[groups.B][seasons.Winter]="t";
</code></pre>

===UCLA===
PostId: 12918
Score: 8
Accepted: 0
ViewCount: 848
Tags: <java><php><jsp><tomcat>
<p>Don't try to be as dynamic as PHP is. You could try to first <strong>define</strong> what you need.</p>

<pre><code>interface Season
{
    public string getDays();
}

interface User
{
    public Season getWinter();
    public Season getSpring();
    public Season getSummer();
    public Season getFall();
}

interface UserMap
{
    public User getUser(string name);
}
</code></pre>

<p>And please, read the documentation of <a href="http://java.sun.com/javase/6/docs/api/java/util/Hashtable.html">Hashtable</a> before using it. This class is synchronized which means that each call is protected against multithreading which really slows the access when you don't need the extra protection. Please use any <a href="http://java.sun.com/javase/6/docs/api/java/util/Map.html">Map</a> implementation instead like <a href="http://java.sun.com/javase/6/docs/api/java/util/HashMap.html">HashMap</a> or <a href="http://java.sun.com/javase/6/docs/api/java/util/TreeMap.html">TreeMap</a>.</p>

===UCLA===
PostId: 12923
Score: 4
Accepted: 0
ViewCount: 848
Tags: <java><php><jsp><tomcat>
<p>It seems like everyone is trying to find the Java way to do it like you're doing it in PHP, instead of the way it ought to be done in Java. Just consider each piece of your array an object, or, at the very least, the first level of the array as an object and each sub level as variables inside the object. The build a data structure that you populate with said objects and access the objects through the data structure's given accessors.</p>

<p>Something like:</p>

<pre><code>class Schedule
{
  private String group;
  private String season;
  private String rundays;
  public Schedule() { this.group = null; this.season = null; this.rundays= null; }
  public void setGroup(String g) { this.group = g; }
  public String getGroup() { return this.group; }
  ...
}

public ArrayList&lt;Schedule&gt; schedules = new ArrayList&lt;Schedule&gt;();
Schedule s = new Schedule();
s.setGroup(...);
...
schedules.add(s);
...
</code></pre>

<p>Of course that probably isn't right either. I'd make each season an object, and maybe each weekday list as an object too. Anyway, its more easily reused, understood, and extensible than a hobbled-together Hashtable that tries to imitate your PHP code. Of course, PHP has objects too, and you should use them in a similar fashion instead of your uber-arrays, wherever possible. I do understand the temptation to cheat, though. PHP makes it so easy, and so fun!</p>

===UCLA===
PostId: 12932
Score: 0
Accepted: 0
ViewCount: 848
Tags: <java><php><jsp><tomcat>
<p>I agree that you should definitely put this logic behind the clean interface of:</p>

<pre><code>public String lookupDays(String group, String date);
</code></pre>

<p>but maybe you should stick the data in a properties file.  I'm not against hardcoding this data in your source files but, as you noticed, Java can be pretty wordy when it comes to nested Collections.  Your file might looks like:</p>

<blockquote>
  <p>A.Summer=M<br />
  A.Spring=tTS<br />
  B.Summer=T</p>
</blockquote>

<p>Usually I don't like to move static data like this to an external file because it increases the "distance" between the data and the code that uses it.  However, whenever you're dealing with nested Collections, especially maps, things can get real ugly, real fast.</p>

<p>If you don't like this idea, maybe you can do something like this:</p>

<pre><code>public class WaterScheduler
{
  private static final Map&lt;String, String&gt; GROUP2SEASON = new HashMap&lt;String, String&gt;();
  static
  {
    addEntry("A", "Summer", "M");
    addEntry("A", "Spring", "tTS");
    addEntry("B", "Summer", "T");
  }

  private static void addEntry(String group, String season, String value)
  {
    GROUP2SEASON.put(group + "." + season, value);
  }

}
</code></pre>

<p>You lose some readability but at least the data is closer to where it's going to be used.</p>

===UCLA===
PostId: 13037
Score: 3
Accepted: 0
ViewCount: 848
Tags: <java><php><jsp><tomcat>
<p>Here's one way it <em>could</em> look like, you can figure the rest out:</p>

<pre><code>A = new Group();
A.getSeason(Seasons.WINTER).addDay(Days.MONDAY);
A.getSeason(Seasons.SPRING).addDay(Days.TUESDAY).addDay(Days.THURSDAY);
A.getSeason(Seasons.SPRING).addDays(Days.MONDAY, Days.TUESDAY, ...);

schedule = new Schedule();
schedule.addWateringGroup( A );
</code></pre>

===UCLA===
PostId: 13099
Score: 1
Accepted: 0
ViewCount: 848
Tags: <java><php><jsp><tomcat>
<p>I'm with those that suggest encapsulating function in objects.</p>

<pre><code>import java.util.Date;
import java.util.Map;
import java.util.Set;

public class Group {

    private String groupName;

    private Map&lt;Season, Set&lt;Day&gt;&gt; schedule;

    public String getGroupName() {
     return groupName;
    }

    public void setGroupName(String groupName) {
     this.groupName = groupName;
    }

    public Map&lt;Season, Set&lt;Day&gt;&gt; getSchedule() {
     return schedule;
    }

    public void setSchedule(Map&lt;Season, Set&lt;Day&gt;&gt; schedule) {
     this.schedule = schedule;
    }

    public String getScheduleFor(Date date) {
     Season now = Season.getSeason(date);
     Set&lt;Day&gt; days = schedule.get(now);
     return Day.getDaysForDisplay(days);
    }

}
</code></pre>

<p>EDIT: Also, your date ranges don't take leap years into account:</p>

<blockquote>
  <p>Our seasons look like this: Summer
  (5-1 to 8-31) Spring (3-1 to 4-30)
  Fall (9-1 to 10-31) Winter (11-1 to
  2-28)</p>
</blockquote>

===UCLA===
PostId: 14629
Score: 23
Accepted: 0
ViewCount: 221632
Tags: <java><ftp><sftp><security>
<p>This was the solution I came up with
<a href="http://sourceforge.net/projects/sshtools/"><a href="http://sourceforge.net/projects/sshtools/">http://sourceforge.net/projects/sshtools/</a></a> (most error handling omitted for clarity). This is an excerpt from <a href="http://www.spindriftpages.net/blog/dave/2007/11/27/sshtools-j2ssh-java-sshsftp-library">my blog</a></p>

<pre><code>SshClient ssh = new SshClient();
ssh.connect(host, port);
//Authenticate
PasswordAuthenticationClient passwordAuthenticationClient = new PasswordAuthenticationClient();
passwordAuthenticationClient.setUsername(userName);
passwordAuthenticationClient.setPassword(password);
int result = ssh.authenticate(passwordAuthenticationClient);
if(result != AuthenticationProtocolState.COMPLETE){
     throw new SFTPException("Login to " + host + ":" + port + " " + userName + "/" + password + " failed");
}
//Open the SFTP channel
SftpClient client = ssh.openSftpClient();
//Send the file
client.put(filePath);
//disconnect
client.quit();
ssh.disconnect();
</code></pre>

===UCLA===
PostId: 15279
Score: 2
Accepted: 1
ViewCount: 3528
Tags: <java><generics><inheritance><java-ee><ejb-3.0>
<p>I tried it with a pojo and it seems to work. I had to modify your code a bit.
I think your interfaces were a bit off, but I'm not sure.</p>

<p>I assumed "Foo" was a concrete type, but if not I can do some more testing for you.</p>

<p>I just wrote a main method to test this.
I hope this helps!</p>

<pre><code>public static void main(String[] args){
     FooRepository fooRepository = new FooRepositoryImpl();
     fooRepository.delete(new Foo("Bar"));
}

public class Foo
{
    private String value;

    public Foo(String inValue){
     super();
     value = inValue;
    }
    public String toString(){
     return value;
    }
}

public interface Repository&lt;E&gt;
{
    public void delete(E entity);
}

public interface FooRepository extends Repository&lt;Foo&gt;
{
    //other methods
}

public class AbstractRespository&lt;E&gt; implements Repository&lt;E&gt;
{
    public void delete(E entity){
     System.out.println("Delete-" + entity.toString());
    }
}

public class FooRepositoryImpl extends AbstractRespository&lt;Foo&gt; implements FooRepository
{
     @Override
       public void delete(Foo entity){
          //do something before deleting the entity
       System.out.println("something before");
          super.delete(entity);
       }
}
</code></pre>

===UCLA===
PostId: 15501
Score: 15
Accepted: 0
ViewCount: 19925
Tags: <java><label><convention>
<p>The convention is to avoid labels altogether.</p>

<p>There are very, very few valid reasons to use a label for breaking out of a loop. Breaking out is ok, but you can remove the need to break at all by modifying your design a little. In the example you have given, you would extract the 'Lots of code' sections and put them in individual methods with meaningful names. </p>

<pre><code>for ( ;/*stuff*/; ) 
{
    lotsOfCode();

    if ( !isEnough() )
    {
        moreCode();
    }
}
</code></pre>

<p><hr /></p>

<p><em>Edit:</em> having seen the actual code in question (<a href="http://stackoverflow.com/questions/15851/refactoring-away-labeled-loops" rel="nofollow">over here</a>), I think the use of labels is probably the best way to make the code readable. In most cases using labels is the wrong approach, in this instance, I think it is fine.</p>

===UCLA===
PostId: 15538
Score: 25
Accepted: 0
ViewCount: 184340
Tags: <java>
<p>static imports to "enhance" the language, so you can do nice literal things in type safe ways: </p>

<pre><code>List&lt;String&gt; ls = List("a", "b", "c");
</code></pre>

<p>(can also do with maps, arrays, sets). </p>

<p><a href="http://gleichmann.wordpress.com/2008/01/13/building-your-own-literals-in-java-lists-and-arrays/" rel="nofollow">http://gleichmann.wordpress.com/2008/01/13/building-your-own-literals-in-java-lists-and-arrays/</a></p>

<p>Taking it further: </p>

<pre><code>List&lt;Map&lt;String, String&gt;&gt; data = List(Map( o("name", "michael"), o("sex", "male")));
</code></pre>

===UCLA===
PostId: 15657
Score: 0
Accepted: 0
ViewCount: 23359
Tags: <java><byte><unsigned><signed>
<p>The best way to do bit manipulation/unsigned bytes is through using <strong>int</strong>s. Even though they are signed they have plenty of spare bits (32 total) to treat as an unsigned byte. Also, all of the mathematical operators will convert smaller fixed precision numbers to <strong>int</strong>. Example:</p>

<pre><code>short a = 1s;
short b = 2s;
int c = a + b; // the result is up-converted
short small = (short)c; // must cast to get it back to short
</code></pre>

<p>Because of this it is best to just stick with integer and mask it to get the bits that you are interested in. Example:</p>

<pre><code>int a = 32;
int b = 128;
int foo = (a + b) | 255;
</code></pre>

<p>Here is some more info on Java primitive types <a href="http://mindprod.com/jgloss/primitive.html" rel="nofollow">http://mindprod.com/jgloss/primitive.html</a></p>

<p>One last trivial note, there is one unsigned fixed precision number in Java. That is the <strong>char</strong> primitive.</p>

===UCLA===
PostId: 15739
Score: 19
Accepted: 0
ViewCount: 159968
Tags: <java><xml><validation><xsd>
<p>You will be wanting <a href="http://xerces.apache.org/xerces2-j/">Xerces2</a>. A tutorial for this, <a href="http://www.ibm.com/developerworks/edu/x-dw-xvalid-i.html">here</a> (req. signup).</p>

<p>Also, blatently copied from <a href="http://forums.sun.com/thread.jspa?messageID=3411478">here</a>:</p>

<pre><code>import org.apache.xerces.parsers.DOMParser;
import java.io.File;
import org.w3c.dom.Document;

public class SchemaTest 
{
  public static void main (String args[]) 
  {
      File docFile = new File("memory.xml");
      try
      {
           DOMParser parser = new DOMParser();
           parser.setFeature("http://xml.org/sax/features/validation", true);
           parser.setProperty(
             "http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation", 
                        "memory.xsd");
           ErrorChecker errors = new ErrorChecker();
           parser.setErrorHandler(errors);
           parser.parse("memory.xml");
     }
     catch (Exception e) 
     {
         System.out.print("Problem parsing the file.");
     }
  }
}
</code></pre>

===UCLA===
PostId: 15855
Score: 1
Accepted: 0
ViewCount: 1562
Tags: <java><refactoring><label>
<p>Easily, my good man.</p>

<pre><code>for( int idx = 0; idx &lt; vectorLength; idx++) {
  if( conditionAtVectorPosition( v, idx ) ) continue;

  for( rowIdx = 0; rowIdx &lt; n; rowIdx++ ) {
    if( anotherConditionAtVector( v, rowIdx ) ) continue;
    if( conditionAtMatrixRowCol( m, rowIdx, idx ) ) break;
  }
  if( !conditionAtMatrixRowCol( m, rowIdx, idx ) )
    setValueInVector( v, idx );
}
</code></pre>

<p>EDIT: Quite correct you are Anders. I've edited my solution to take that into account as well.</p>

===UCLA===
PostId: 15869
Score: 1
Accepted: 0
ViewCount: 1562
Tags: <java><refactoring><label>
<p>@Patrick you are assuming calling setValueInVector( v, idx ); at the end of the second loop is OK. If the code is to be identical, logically, it must be rewritten to somethng like this:</p>

<pre><code>for( int idx = 0; idx < vectorLength; idx++) {
    if( conditionAtVectorPosition( v, idx ) ) continue;

    for( rowIdx = 0; rowIdx < n; rowIdx++ ) {
        if( anotherConditionAtVector( v, rowIdx ) ) continue;
        if( conditionAtMatrixRowCol( m, rowIdx, idx ) ) break;
    }
    if ( !conditionAtMatrixRowCol( m, rowIdx, idx ))
        setValueInVector( v, idx );
}
</code></pre>

===UCLA===
PostId: 15870
Score: 0
Accepted: 0
ViewCount: 1562
Tags: <java><refactoring><label>
<p>Does this work for you? I extracted the inner loop into a method CheckedEntireMatrix (you can name it better than me) - Also my java is a bit rusty.. but I think it gets the message across</p>

<pre><code>for( int idx = 0; idx &lt; vectorLength; idx++) {
    if( conditionAtVectorPosition( v, idx ) 
    || !CheckedEntireMatrix(v)) continue;

    setValueInVector( v, idx );
}

private bool CheckedEntireMatrix(Vector v)
{
    for( rowIdx = 0; rowIdx &lt; n; rowIdx++ ) {
        if( anotherConditionAtVector( v, rowIdx ) ) continue;
        if( conditionAtMatrixRowCol( m, rowIdx, idx ) ) return false;
    }   
    return true;
}
</code></pre>

===UCLA===
PostId: 15901
Score: 0
Accepted: 0
ViewCount: 1562
Tags: <java><refactoring><label>
<p>Gishu has the right idea :</p>

<pre><code>for( int idx = 0; idx &lt; vectorLength; idx++) {
    if (!conditionAtVectorPosition( v, idx ) 
        &amp;&amp; checkedRow(v, idx))
         setValueInVector( v, idx );
}

private boolean checkedRow(Vector v, int idx) {
    for( rowIdx = 0; rowIdx &lt; n; rowIdx++ ) {
        if( anotherConditionAtVector( v, rowIdx ) ) continue;
        if( conditionAtMatrixRowCol( m, rowIdx, idx ) ) return false;
    }  
    return true;
}
</code></pre>

===UCLA===
PostId: 15903
Score: 0
Accepted: 0
ViewCount: 1562
Tags: <java><refactoring><label>
<p>I'm not too sure to understand the first continue.
I would copy Gishu and write something like ( sorry if there are some mistakes ) :</p>

<pre><code>for( int idx = 0; idx &lt; vectorLength; idx++) {
    if( !conditionAtVectorPosition( v, idx ) &amp;&amp; CheckedEntireMatrix(v))
        setValueInVector( v, idx );
}

inline bool CheckedEntireMatrix(Vector v) {
    for(rowIdx = 0; rowIdx &lt; n; rowIdx++)
        if ( !anotherConditionAtVector(v,rowIdx) &amp;&amp; conditionAtMatrixRowCol(m,rowIdx,idx) ) 
            return false;
    return true;
}
</code></pre>

===UCLA===
PostId: 15937
Score: 147
Accepted: 1
ViewCount: 221632
Tags: <java><ftp><sftp><security>
<p>Another option is to consider looking at the <a href="http://www.jcraft.com/jsch/">JSch library</a>. JSch seems to be the preferred library for a few large open source projects, including Eclipse, Ant and Apache Commons HttpClient, amongst others.</p>

<p>It supports both user/pass and certificate-based logins nicely, as well as all a whole host  of other yummy SSH2 features.</p>

<p>Here's a simple remote file retrieve over SFTP. Error handling is left as an exercise for the reader :-)</p>

<pre><code>JSch jsch = new JSch();

String knownHostsFilename = "/home/username/.ssh/known_hosts";
jsch.setKnownHosts( knownHostsFilename );

Session session = jsch.getSession( "remote-username", "remote-host" );    
{
  // "interactive" version
  // can selectively update specified known_hosts file 
  // need to implement UserInfo interface
  // MyUserInfo is a swing implementation provided in 
  //  examples/Sftp.java in the JSch dist
  UserInfo ui = new MyUserInfo();
  session.setUserInfo(ui);

  // OR non-interactive version. Relies in host key being in known-hosts file
  session.setPassword( "remote-password" );
}

session.connect();

Channel channel = session.openChannel( "sftp" );
channel.connect();

ChannelSftp sftpChannel = (ChannelSftp) channel;

sftpChannel.get("remote-file", "local-file" );
// OR
InputStream in = sftpChannel.get( "remote-file" );
  // process inputstream as needed

sftpChannel.exit();
session.disconnect();
</code></pre>

===UCLA===
PostId: 15939
Score: 32
Accepted: 0
ViewCount: 19925
Tags: <java><label><convention>
<p>I don't understand where this "don't use labels" rule comes from. When doing non-trivial looping logic, the test to break or continue isn't always neatly at the end of the surrounding block.</p>

<pre><code>outer_loop:
for (...) {
  //  some code
  for (...) {
    //  some code
    if (...)
      continue outer_loop;
    //  more code
  }
  //  more code
}
</code></pre>

<p>Yes, cases like this do happen all the time. What are people suggesting I use instead? A boolean condition like this?</p>

<pre><code>for (...) {
  //  some code
  boolean continueOuterLoop = false;
  for (...) {
    //  some code
    if (...) {
      continueOuterLoop = true;
      break;
    }
    //  more code
  }
  if (continueOuterLoop)
    continue;
  //  more code
}
</code></pre>

<p><strong>Yuck!</strong>  Refactoring it as a method doesn't alleviate that either:</p>

<pre><code>boolean innerLoop (...) {
  for (...) {
    //  some code
    if (...) {
      return true;
    }
    //  more code
  }
  return false;
}

for (...) {
  //  some code
  if (innerLoop(...))
    continue;
  //  more code
}
</code></pre>

<p>Sure it's a little prettier, but it's still passing around a superfluous boolean. And if the inner loop modified local variables, refactoring it into a method isn't always the correct solution.</p>

<p>So why are you all against labels? Give me some solid reasons, and practical alternatives for the above case.</p>

===UCLA===
PostId: 15944
Score: 1
Accepted: 0
ViewCount: 19925
Tags: <java><label><convention>
<p>wrt <a href="http://stackoverflow.com/questions/15481/java-coding-standard-best-practices-labeled-brakecontinue#15939" rel="nofollow">sadie's code example</a>:</p>

<p>You gave </p>

<pre><code>outerloop:
for (...) {
  //  some code
  for (...) {
    //  some code
    if (...)
      continue outerloop;
    //  more code
  }
  //  more code
}
</code></pre>

<p>As an example. You make a good point. My best guess would be:</p>

<pre><code>public void lookMumNoLabels() {
  for (...) {
    // some code
    doMoreInnerCodeLogic(...);
  }
}

private void doMoreInnerCodeLogic(...) {
   for (...) {
      // some code
      if (...) return;
   }
}
</code></pre>

<p>But there would be examples where that kind of refactoring doesn't sit correctly with whatever logic you're doing.</p>

===UCLA===
PostId: 15967
Score: 1
Accepted: 0
ViewCount: 4739
Tags: <java><xml><xquery>
<p>How about an object oriented approach?  You could deserialise the XML to an object, set the location value on the object, then serialise back to XML.</p>

<p><a href="http://xstream.codehaus.org/tutorial.html" rel="nofollow">XStream</a> makes this really easy.</p>

<p>For example, you would define the main object, which in your case is CustomData (I'm using public fields to keep the example simple):</p>

<pre><code>public class CustomData {
  public String tag1;
  public String tag2;
  public String location;
  public String tag3;
}
</code></pre>

<p>Then you initialize XStream:</p>

<pre><code>XStream xstream = new XStream();
// if you need to output the main tag in lowercase, use the following line
xstream.alias("customdata", CustomData.class);
</code></pre>

<p>Now you can construct an object from XML, set the location field on the object and regenerate the XML:</p>

<pre><code>CustomData d = (CustomData)xstream.fromXML(xml);
d.location = "http://stackoverflow.com";
xml = xstream.toXML(d);
</code></pre>

<p>How does that sound?</p>

===UCLA===
PostId: 16019
Score: 4
Accepted: 1
ViewCount: 4739
Tags: <java><xml><xquery>
<p>How about an XPath based approach? I like this approach as the logic is super-easy to understand. The code is pretty much self-documenting.</p>

<p>If your xml document is available to you as an org.w3c.dom.Document object (as most parsers return), then you could do something like the following:</p>

<pre><code>// get the list of customdata nodes
NodeList customDataNodeSet = findNodes(document, "//customdata" );

for (int i=0 ; i &lt; customDataNodeSet.getLength() ; i++) {
  Node customDataNode = customDataNodeSet.item( i );

  // get the location nodes (if any) within this one customdata node
  NodeList locationNodeSet = findNodes(customDataNode, "location" );

  if (locationNodeSet.getLength() &gt; 0) {
    // replace
    locationNodeSet.item( 0 ).setTextContent( "http://stackoverflow.com/" );
  }
  else {
    // insert
    Element newLocationNode = document.createElement( "location" );
    newLocationNode.setTextContent("http://stackoverflow.com/" );
    customDataNode.appendChild( newLocationNode );
  }
}
</code></pre>

<p>And here's the helper method findNodes that does the XPath search.</p>

<pre><code>private NodeList findNodes( Object obj, String xPathString )
  throws XPathExpressionException {

  XPath xPath = XPathFactory.newInstance().newXPath();
  XPathExpression expression = xPath.compile( xPathString );
  return (NodeList) expression.evaluate( obj, XPathConstants.NODESET );
}
</code></pre>

===UCLA===
PostId: 16054
Score: 222
Accepted: 1
ViewCount: 159968
Tags: <java><xml><validation><xsd>
<p>The Java runtime library supports validation. Last time I checked this was the Apache Xerces parser under the covers. You should probably use a <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/xml/validation/Validator.html">javax.xml.validation.Validator</a>.</p>

<pre><code>import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.*;
...

URL schemaFile = new URL("http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd");
Source xmlFile = new StreamSource(new File("web.xml"));
SchemaFactory schemaFactory = SchemaFactory
    .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema schema = schemaFactory.newSchema(schemaFile);
Validator validator = schema.newValidator();
try {
  validator.validate(xmlFile);
  System.out.println(xmlFile.getSystemId() + " is valid");
} catch (SAXException e) {
  System.out.println(xmlFile.getSystemId() + " is NOT valid");
  System.out.println("Reason: " + e.getLocalizedMessage());
}
</code></pre>

<p>The schema factory constant is the string <code>http://www.w3.org/2001/XMLSchema</code> which defines XSDs. The above code validates a WAR deployment descriptor against the URL <code>http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd</code> but you could just as easily validate against a local file.</p>

<p>You should not use the DOMParser to validate a document (unless your goal is to create a document object model anyway). This will start creating DOM objects as it parses the document - wasteful if you aren't going to use them.</p>

===UCLA===
PostId: 16979
Score: 2
Accepted: 0
ViewCount: 12977
Tags: <java><.net><axis2><ws-security><wse>
<p>@Mike</p>

<p>I recently did a test and this is the code I used.
I'm not using policy stuff, but I used WS-Security with plain text authentication.
CXF has really good documentation on how to accomplish this stuff.</p>

<p>I used wsdl2java and then added this code to use the web service with ws-security.</p>

<p>I hope this helps you out.</p>

<pre><code>import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.UnsupportedCallbackException;

import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.ws.security.WSConstants;
import org.apache.ws.security.WSPasswordCallback;
import org.apache.ws.security.handler.WSHandlerConstants;

public class ServiceTest implements CallbackHandler
{

     public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {

            WSPasswordCallback pc = (WSPasswordCallback) callbacks[0];
            // set the password for our message.
            pc.setPassword("buddah");
        }

    public static void main(String[] args){
     PatientServiceImplService locator = new PatientServiceImplService();
     PatientService service = locator.getPatientServiceImplPort();

     org.apache.cxf.endpoint.Client client = org.apache.cxf.frontend.ClientProxy.getClient(service);
     org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint();

     Map&lt;String, Object&gt; outProps = new HashMap&lt;String, Object&gt;();
     outProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.USERNAME_TOKEN + " " +  WSHandlerConstants.TIMESTAMP);
     outProps.put(WSHandlerConstants.USER, "joe");
     outProps.put(WSHandlerConstants.PASSWORD_TYPE, WSConstants.PW_TEXT);

     // Callback used to retrieve password for given user.
     outProps.put(WSHandlerConstants.PW_CALLBACK_CLASS, ServiceTest.class.getName());

     WSS4JOutInterceptor wssOut = new WSS4JOutInterceptor(outProps);
     cxfEndpoint.getOutInterceptors().add(wssOut);


     try
     {
      List list = service.getInpatientCensus();
      for(Patient p : list){
       System.out.println(p.getFirstName() + " " + p.getLastName());
      }

     }
     catch (Exception e)
     {
      // TODO Auto-generated catch block
      e.printStackTrace();
     }
    }
}
</code></pre>

===UCLA===
PostId: 17394
Score: 0
Accepted: 0
ViewCount: 13279
Tags: <java><windows><osx><email>
<p>I have implemented this, and it works well on OS X. (Ryan's mention of the max URL length has not been codified.)</p>

<pre><code>public void email(String subject, String body) throws Exception {
    String cmd = "open mailto:";        
    cmd += "?subject=" + urlEncode(subject);
    cmd += "&amp;body=" + urlEncode(body);
    Runtime.getRuntime().exec(cmd);
}

private static String urlEncode(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; s.length(); i++) {
        char ch = s.charAt(i);
        if (Character.isLetterOrDigit(ch)) {
            sb.append(ch);
        }
        else {
            sb.append(String.format("%%%02X", (int)ch));
        }
    }
    return sb.toString();
}
</code></pre>

<p>I had to re-implement URLencode because Java's would use <code>+</code> for space and Mail took those literally. Haven't tested on Windows yet.</p>

===UCLA===
PostId: 17398
Score: 3
Accepted: 0
ViewCount: 13279
Tags: <java><windows><osx><email>
<blockquote>
  <p>I had to re-implement URLencode
  because Java's would use + for space
  and Mail took those literally.</p>
</blockquote>

<p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow"><a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a></a> shows some of the most common chars to encode:</p>

<pre><code>;       %3B
?       %3F
/       %2F
:       %3A
#       %23
&amp;       %24
=       %3D
+       %2B
$       %26
,       %2C
space   %20 or +
%       %25
&lt;       %3C
&gt;       %3E
~       %7E
%       %25
</code></pre>

===UCLA===
PostId: 17535
Score: 2
Accepted: 0
ViewCount: 13279
Tags: <java><windows><osx><email>
<blockquote>
  <p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a> shows some of the most common chars to encode:</p>
</blockquote>

<p>For percent-encoding mailto URI hnames and hvalues, I use the rules at <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding</a>. Under <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations</a>, there's a Java example that may help.</p>

<p>Basically, I use:</p>

<pre><code>private String encodex(final String s) {
    try {
        return java.net.URLEncoder.encode(s, "utf-8").replaceAll("\\+", "%20").replaceAll("\\%0A", "%0D%0A");
    } catch (Throwable x) {
        return s;
    }
}
</code></pre>

<p>The string that's passed in should be a string with \r\n, and stray \r already normalized to \n.</p>

<p>Also note that just returning the original string on an exception like above is only safe if the mailto URI argument you're passing on the command-line is properly escaped and quoted.</p>

<p>On windows that means:</p>

<ol>
<li>Quote the argument.</li>
<li>Escape any " inside the quotes with \.</li>
<li>Escape any \ that precede a " or the end of the string with \.</li>
</ol>

<p>Also, on windows, if you're dealing with UTF-16 strings like in Java, you might want to use ShellExecuteW to "open" the mailto URI. If you don't and return s on an exception (where some hvalue isn't completely percent-encoded, you could end up narrowing some wide characters and losing information. But, not all mail clients accept unicode arguments, so ideally, you want to pass a properly percent-encoded-utf8 ascii argument with ShellExecute.</p>

<p>Like 'start', ShellExecute with "open" should open the mailto URI in the default client.</p>

<p>Not sure about other OS's.</p>

===UCLA===
PostId: 17954
Score: 45
Accepted: 0
ViewCount: 126555
Tags: <c#><java><math>
<p>This should give you what you want.  You will definitely want x items divided by y items per page, the problem is when uneven numbers come up, so if there is a partial page we also want to add one page.</p>

<pre><code>int x = number_of_items;
int y = items_per_page;

// with out library
int pages = x/y + (x % y &gt; 0 ? 1 : 0)

// with library
int pages = (int)Math.Ceiling((double)x / (double)y);
</code></pre>

===UCLA===
PostId: 17957
Score: 28
Accepted: 0
ViewCount: 126555
Tags: <c#><java><math>
<p>For C# the solution is to cast the values to a double (as Math.Ceiling takes a double):</p>

<pre><code>int nPages = (int)Math.Ceiling((double)nItems / (double)nItemsPerPage);
</code></pre>

<p>In java you should do the same with Math.ceil().</p>

===UCLA===
PostId: 17974
Score: 339
Accepted: 1
ViewCount: 126555
Tags: <c#><java><math>
<p>Found an elegant solution:</p>

<pre><code>int pageCount = (records + recordsPerPage - 1) / recordsPerPage;
</code></pre>

<p>Source: <a href="http://www.cs.nott.ac.uk/~rcb/G51MPC/slides/NumberLogic.pdf">Number Conversion, Roland Backhouse, 2001</a></p>

===UCLA===
PostId: 18529
Score: 55
Accepted: 1
ViewCount: 123329
Tags: <java><string><collections><integer>
<p>As far as I know, iterate and instantiate is the only way to do this.  Something like (for others potential help, since I'm sure you know how to do this):</p>

<pre><code>List&lt;Integer&gt; oldList = ...
/* Specify the size of the list up front to prevent resizing. */
List&lt;String&gt; newList = new ArrayList&lt;String&gt;(oldList.size()) 
for (Integer myInt : oldList) { 
  newList.add(String.valueOf(myInt)); 
}
</code></pre>

===UCLA===
PostId: 18558
Score: 9
Accepted: 0
ViewCount: 123329
Tags: <java><string><collections><integer>
<p>Instead of using String.valueOf I'd use .toString(); it avoids some of the auto boxing described by @johnathan.holland</p>

<p>The javadoc says that valueOf returns the same thing as Integer.toString().</p>

<pre><code>List&lt;Integer&gt; oldList = ...
List&lt;String&gt; newList = new ArrayList&lt;String&gt;(oldList.size());

for (Integer myInt : oldList) { 
  newList.add(myInt.toString()); 
}
</code></pre>

===UCLA===
PostId: 18595
Score: 10
Accepted: 0
ViewCount: 123329
Tags: <java><string><collections><integer>
<p>The source for String.valueOf shows this:</p>

<pre><code>public static String valueOf(Object obj) {
    return (obj == null) ? "null" : obj.toString();
}
</code></pre>

<p>Not that it matters much, but I would use toString.</p>

===UCLA===
PostId: 18996
Score: 5
Accepted: 0
ViewCount: 35644
Tags: <java><collections><groovy><expandometaclass>
<p>Also, if you're use google collections (<a href="http://code.google.com/p/google-collections/">http://code.google.com/p/google-collections/</a>), you can do something like this:</p>

<pre><code>  map = Maps.uniqueIndex(list, Functions.identity());
</code></pre>

===UCLA===
PostId: 19186
Score: 74
Accepted: 0
ViewCount: 23359
Tags: <java><byte><unsigned><signed>
<p><a href="http://stackoverflow.com/questions/11088/what-is-the-best-way-to-work-around-the-fact-that-all-java-bytes-are-signed#11101" rel="nofollow">@pauldoo</a></p>

<p>It is actually possible to get rid of the if statement and the addition if you do it like this.</p>

<pre><code>byte[] foobar = ..;
int value = (foobar[10] &amp; 0xff);
</code></pre>

<p>This way Java doesn't interpret the byte as a negative number and flip the sign bit on the integer also.</p>

===UCLA===
PostId: 19191
Score: 39
Accepted: 0
ViewCount: 123329
Tags: <java><string><collections><integer>
<p>What you're doing is fine, but if you feel the need to 'Java-it-up' you could use a <a href="http://commons.apache.org/collections/api/org/apache/commons/collections/Transformer.html" rel="nofollow">Transformer</a> and the <a href="http://commons.apache.org/collections/api/org/apache/commons/collections/CollectionUtils.html" rel="nofollow">collect method</a> from <a href="http://commons.apache.org/" rel="nofollow">Apache Commons</a>, e.g.:</p>

<pre><code>public class IntegerToStringTransformer implements Transformer&lt;Integer, String&gt; {
   public String transform(final Integer i) {
      return (i == null ? null : i.toString());
   }
}
</code></pre>

<p>..and then..</p>

<pre><code>CollectionUtils.collect(
   collectionOfIntegers, 
   new IntegerToStringTransformer(), 
   newCollectionOfStrings);
</code></pre>

===UCLA===
PostId: 19308
Score: 2
Accepted: 1
ViewCount: 10268
Tags: <java><internationalization>
<p>Are you just asking how to store UTF-8/16 characters in a DB? in mysql it's just a matter of making sure you build with UTF8 support and setting that as the default, or specifying it at the column or table level. I've done this in oracle and mysql before. Create a table and cut and paste some i18n data into it and see what happens... you might be set already..</p>

<p>or am I completely missing your point? </p>

<p>edit: </p>

<p>to be more explicit... I usually implement a three column table... language, key, value... where "value" contains potentially foreign language words or phrases... "language" contains some language key and "key" is an english key (i.e. login.error.password.dup)... language and key are indexed...  </p>

<p>I've then built interfaces on a structure like this that shows each key with all its translations (values)... it can get fancy and include audit trails and "dirty" markers and all the other stuff you need to enable translators and data entry folk to make use of it..</p>

<p>Edit 2:</p>

<p>Now that you added the info about the JSTL tags, I understand a bit more... I've never done that myself.. but I found this old info on <a href="http://www.theserverside.com/discussions/thread.tss?thread_id=27390" rel="nofollow">theserverside</a>...</p>

<pre><code>HttpSession session = .. [get hold of the session] 
ResourceBundle bundle = new PropertyResourceBundle(toInputStream(myOwnProperties)) [toInputStream just stores the properties into an inputstream] 
Locale locale = .. [get hold of the locale]
javax.servlet.jsp.jstl.core.Config.set(session, Config.FMT_LOCALIZATION_CONTEXT, new LocalizationContext(bundle ,locale));
</code></pre>

===UCLA===
PostId: 19439
Score: 2
Accepted: 0
ViewCount: 760
Tags: <c#><java><c++><visual-studio>
<p>There are two main differences: the syntax, and memory management.</p>

<p>In C++ you have pointers, which are more powerful (or less powerful depending on your interpretation of power) object references, which you already know about from Java.</p>

<p>In Java you might do this:</p>

<pre><code>Thing mything = new Thing(); // mything is an object reference
mything.method();
</code></pre>

<p>In C++ you would do this:</p>

<pre><code>Thing * mything = new Thing(); // mything is an object pointer
mything-&gt;method();
delete mything;
</code></pre>

<p>The syntactical difference is obvious: '->' instead of '.' when calling an object method from a pointer to an object. In C++, you have to free the memory explicitly when you are done with an object. At the end of the day you are doing the same thing in C++ and Java, instantiating objects and calling methods, putting useless semicolons at the end of every line, etc. Is it any wonder that Python is becoming so popular?:</p>

<pre><code>mything = Thing() # mything is whatever I want it to be
mything.method()
</code></pre>

<p>Skimming through any half decent C++ text will help you fill in the rest of the details.</p>

===UCLA===
PostId: 19998
Score: 0
Accepted: 0
ViewCount: 758
Tags: <java><regex><algorithm><reflection>
<p>Does M include calls to its own methods?  Or calls to inner classes? For instance:</p>

<pre><code>class J {
  a() { }
  b() { this.a(); }
  c() { jj.aa(); }
  d() { i.k(); }
  e() { this.f().a(); }
  f() { return this; }
  g() { i.m().n(); }

  class JJ {
    aa() { a(); }
  }
}
</code></pre>

<p>What would the M value of this be?  There's only three function calls to a method not defined in this class (the calls in the d() and g() functions).  Do you want to include calls to inner classes, or calls to the main class made in the inner class?  Do you want to include calls to other methods on the same class?</p>

<p>If you're looking at any method calls, regardless of the source, then a regex could probably work, but would be tricky to get right (does your regex properly ignore strings that contain method-call like contents?  Does it handle constructor calls properly?).  If you care about the source of the method call then regexes probably won't get you what you want.  You'd need to use reflection (though unfortunately I don't know enough about reflection to be helpful there).</p>

===UCLA===
PostId: 20670
Score: 51
Accepted: 1
ViewCount: 109620
Tags: <java><encryption><3des>
<p>Your code was fine except for the Base 64 encoding bit (which you mentioned was a test), the reason the output may not have made sense is that you were displaying a raw byte array (doing toString() on a byte array returns its internal Java reference, not the String representation of the <strong>contents</strong>). Here's a version that's just a teeny bit cleaned up and which prints "kyle boon" as the decoded string:</p>

<pre><code>import java.security.MessageDigest;
import java.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class TripleDESTest {

    public static void main(String[] args) throws Exception {

     String text = "kyle boon";

     byte[] codedtext = new TripleDESTest().encrypt(text);
     String decodedtext = new TripleDESTest().decrypt(codedtext);

     System.out.println(codedtext); // this is a byte array, you'll just see a reference to an array
     System.out.println(decodedtext); // This correctly shows "kyle boon"
    }

    public byte[] encrypt(String message) throws Exception {
     final MessageDigest md = MessageDigest.getInstance("md5");
     final byte[] digestOfPassword = md.digest("HG58YZ3CR9"
       .getBytes("utf-8"));
     final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);
     for (int j = 0, k = 16; j &lt; 8;) {
      keyBytes[k++] = keyBytes[j++];
     }

     final SecretKey key = new SecretKeySpec(keyBytes, "DESede");
     final IvParameterSpec iv = new IvParameterSpec(new byte[8]);
     final Cipher cipher = Cipher.getInstance("DESede/CBC/PKCS5Padding");
     cipher.init(Cipher.ENCRYPT_MODE, key, iv);

     final byte[] plainTextBytes = message.getBytes("utf-8");
     final byte[] cipherText = cipher.doFinal(plainTextBytes);
     // final String encodedCipherText = new sun.misc.BASE64Encoder()
     // .encode(cipherText);

     return cipherText;
    }

    public String decrypt(byte[] message) throws Exception {
     final MessageDigest md = MessageDigest.getInstance("md5");
     final byte[] digestOfPassword = md.digest("HG58YZ3CR9"
       .getBytes("utf-8"));
     final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);
     for (int j = 0, k = 16; j &lt; 8;) {
      keyBytes[k++] = keyBytes[j++];
     }

     final SecretKey key = new SecretKeySpec(keyBytes, "DESede");
     final IvParameterSpec iv = new IvParameterSpec(new byte[8]);
     final Cipher decipher = Cipher.getInstance("DESede/CBC/PKCS5Padding");
     decipher.init(Cipher.DECRYPT_MODE, key, iv);

     // final byte[] encData = new
     // sun.misc.BASE64Decoder().decodeBuffer(message);
     final byte[] plainText = decipher.doFinal(message);

     return new String(plainText, "UTF-8");
    }
}
</code></pre>

===UCLA===
PostId: 20860
Score: 33
Accepted: 0
ViewCount: 79705
Tags: <java><serialization>
<p><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html">String(byte[])</a> treats the data as the default character encoding. So, how bytes get converted from 8-bit values to 16-bit Java Unicode chars will vary not only between operating systems, but can even vary between different users using different codepages on the same machine! This constructor is only good for decoding one of your own text files. Do not try to convert arbitrary bytes to chars in Java!</p>

<p>Encoding as <a href="http://en.wikipedia.org/wiki/Base64">base64</a> is a good solution. This is how files are sent over SMTP (e-mail). The (free) Apache <a href="http://commons.apache.org/codec/">Commons Codec</a> project will do the job.</p>

<pre class="lang-java prettyprint-override"><code>byte[] bytes = loadFile(file);          
//all chars in encoded are guaranteed to be 7-bit ASCII
byte[] encoded = Base64.encodeBase64(bytes);
String printMe = new String(encoded, "US-ASCII");
System.out.println(printMe);
byte[] decoded = Base64.decodeBase64(encoded);
</code></pre>

<p>Alternatively, you can use the Java 6 <a href="http://download.oracle.com/javase/6/docs/api/javax/xml/bind/DatatypeConverter.html">DatatypeConverter</a>:</p>

<pre class="lang-java prettyprint-override"><code>import java.io.*;
import java.nio.channels.*;
import javax.xml.bind.DatatypeConverter;

public class EncodeDecode {    
  public static void main(String[] args) throws Exception {
    File file = new File("/bin/ls");
    byte[] bytes = loadFile(file, new ByteArrayOutputStream()).toByteArray();
    String encoded = DatatypeConverter.printBase64Binary(bytes);
    System.out.println(encoded);
    byte[] decoded = DatatypeConverter.parseBase64Binary(encoded);
    // check
    for (int i = 0; i &lt; bytes.length; i++) {
      assert bytes[i] == decoded[i];
    }
  }

  private static &lt;T extends OutputStream&gt; T loadFile(File file, T out)
                                                       throws IOException {
    FileChannel in = new FileInputStream(file).getChannel();
    try {
      assert in.size() == in.transferTo(0, in.size(), Channels.newChannel(out));
      return out;
    } finally {
      in.close();
    }
  }
}
</code></pre>

===UCLA===
PostId: 21413
Score: 11
Accepted: 0
ViewCount: 57044
Tags: <java><xml><csv><data-conversion>
<p>This solution does not need any CSV or XML libraries and, I know, it does not handle any illegal characters and encoding issues, but you might be interested in it as well, provided your CSV input does not break the above mentioned rules.</p>

<p><strong>Attention:</strong> You should not use this code unless you know what you do or don't have the chance to use a further library (possible in some bureaucratic projects)... Use a StringBuffer for older Runtime Environments...</p>

<p>So here we go:</p>

<pre><code>BufferedReader reader = new BufferedReader(new InputStreamReader(
        Csv2Xml.class.getResourceAsStream("test.csv")));
StringBuilder xml = new StringBuilder();
String lineBreak = System.getProperty("line.separator");
String line = null;
List&lt;String&gt; headers = new ArrayList&lt;String&gt;();
boolean isHeader = true;
int count = 0;
int entryCount = 1;
xml.append("&lt;root&gt;");
xml.append(lineBreak);
while ((line = reader.readLine()) != null) {
    StringTokenizer tokenizer = new StringTokenizer(line, ",");
    if (isHeader) {
        isHeader = false;
        while (tokenizer.hasMoreTokens()) {
            headers.add(tokenizer.nextToken());
        }
    } else {
        count = 0;
        xml.append("\t&lt;entry id=\"");
        xml.append(entryCount);
        xml.append("\"&gt;");
        xml.append(lineBreak);
        while (tokenizer.hasMoreTokens()) {
            xml.append("\t\t&lt;");
            xml.append(headers.get(count));
            xml.append("&gt;");
            xml.append(tokenizer.nextToken());
            xml.append("&lt;/");
            xml.append(headers.get(count));
            xml.append("&gt;");
            xml.append(lineBreak);
            count++;
        }
        xml.append("\t&lt;/entry&gt;");
        xml.append(lineBreak);
        entryCount++;
    }
}
xml.append("&lt;/root&gt;");
System.out.println(xml.toString());
</code></pre>

<p>The input test.csv (stolen from another answer on this page):</p>

<pre><code>string,float1,float2,integer
hello world,1.0,3.3,4
goodbye world,1e9,-3.3,45
hello again,-1,23.33,456
hello world 3,1.40,34.83,4999
hello 2 world,9981.05,43.33,444
</code></pre>

<p>The resulting output:</p>

<pre><code>&lt;root&gt;
    &lt;entry id="1"&gt;
        &lt;string&gt;hello world&lt;/string&gt;
        &lt;float1&gt;1.0&lt;/float1&gt;
        &lt;float2&gt;3.3&lt;/float2&gt;
        &lt;integer&gt;4&lt;/integer&gt;
    &lt;/entry&gt;
    &lt;entry id="2"&gt;
        &lt;string&gt;goodbye world&lt;/string&gt;
        &lt;float1&gt;1e9&lt;/float1&gt;
        &lt;float2&gt;-3.3&lt;/float2&gt;
        &lt;integer&gt;45&lt;/integer&gt;
    &lt;/entry&gt;
    &lt;entry id="3"&gt;
        &lt;string&gt;hello again&lt;/string&gt;
        &lt;float1&gt;-1&lt;/float1&gt;
        &lt;float2&gt;23.33&lt;/float2&gt;
        &lt;integer&gt;456&lt;/integer&gt;
    &lt;/entry&gt;
    &lt;entry id="4"&gt;
        &lt;string&gt;hello world 3&lt;/string&gt;
        &lt;float1&gt;1.40&lt;/float1&gt;
        &lt;float2&gt;34.83&lt;/float2&gt;
        &lt;integer&gt;4999&lt;/integer&gt;
    &lt;/entry&gt;
    &lt;entry id="5"&gt;
        &lt;string&gt;hello 2 world&lt;/string&gt;
        &lt;float1&gt;9981.05&lt;/float1&gt;
        &lt;float2&gt;43.33&lt;/float2&gt;
        &lt;integer&gt;444&lt;/integer&gt;
    &lt;/entry&gt;
&lt;/root&gt;
</code></pre>

===UCLA===
PostId: 21823
Score: 17
Accepted: 0
ViewCount: 66845
Tags: <java><interface><methods><static>
<p>I'll answer your question with an example. Suppose we had a Math class with a static method add. You would call this method like so:</p>

<pre><code>Math.add(2, 3);
</code></pre>

<p>If Math were an interface instead of a class, it could not have any defined functions. As such, saying something like Math.add(2, 3) makes no sense.</p>

===UCLA===
PostId: 21845
Score: -1
Accepted: 0
ViewCount: 66845
Tags: <java><interface><methods><static>
<p>Perhaps a code example would help, I'm going to use C#, but you should be able to follow along.</p>

<p>Lets pretend we have an interface called IPayable</p>

<pre><code>public interface IPayable
{
    public Pay(double amount);
}
</code></pre>

<p>Now, we have two concrete classes that implement this interface:</p>

<pre><code>public class BusinessAccount : IPayable
{
    public void Pay(double amount)
    {
     //Logic
    }
}

public class CustomerAccount : IPayable
{
    public void Pay(double amount)
    {
     //Logic
    }
}
</code></pre>

<p>Now, lets pretend we have a collection of various accounts, to do this we will use a generic list of the type IPayable</p>

<pre><code>List&lt;IPayable&gt; accountsToPay = new List&lt;IPayable&gt;();
accountsToPay.add(new CustomerAccount());
accountsToPay.add(new BusinessAccount());
</code></pre>

<p>Now, we want to pay $50.00 to all those accounts:</p>

<pre><code>foreach (IPayable account in accountsToPay)
{
    account.Pay(50.00);
}
</code></pre>

<p>So now you see how interfaces are incredibly useful. </p>

<p>They are used on instantiated objects only. Not on static classes. </p>

<p>If you had made pay static, when looping through the IPayable's in accountsToPay there would be no way to figure out if it should call pay on BusinessAcount or CustomerAccount.</p>

===UCLA===
PostId: 22497
Score: 62
Accepted: 1
ViewCount: 66845
Tags: <java><interface><methods><static>
<p>There are a few issues at play here.  The first is the issue of declaring a static method without defining it.  This is the difference between</p>

<pre><code>public interface Foo {
  public static int bar();
}
</code></pre>

<p>and</p>

<pre><code>public interface Foo {
  public static int bar() {
    ...
  }
}
</code></pre>

<p>The first is impossible for the reasons that <a href="http://stackoverflow.com/questions/21817/why-cant-i-declare-static-methods-in-an-interface#21826">Espo</a> mentions: you don't know which implementing class is the correct definition.</p>

<p>Java <em>could</em> allow the latter; and in fact, starting in Java 8, it does!</p>

===UCLA===
PostId: 23048
Score: 315
Accepted: 1
ViewCount: 130467
Tags: <java><unit-testing><mocking>
<p>I've had good success using <a href="https://github.com/mockito/mockito">Mockito</a>.</p>

<p>When I tried learning about JMock and EasyMock, I found the learning curve to be a bit steep (though maybe that's just me).</p>

<p>I like Mockito because of its simple and clean syntax that I was able to grasp pretty quickly. The minimal syntax is designed to support the common cases very well, although the few times I needed to do something more complicated I found what I wanted was supported and easy to grasp.</p>

<p>Here's an (abridged) example from the Mockito homepage:</p>

<pre><code>import static org.mockito.Mockito.*;

List mockedList = mock(List.class);
mockedList.clear();
verify(mockedList).clear();
</code></pre>

<p>It doesn't get much simpler than that.</p>

<p>The only major downside I can think of is that it won't mock static methods.</p>

===UCLA===
PostId: 23944
Score: 8
Accepted: 0
ViewCount: 89310
Tags: <java><collections>
<p>I have created an approximation of what I think you are looking for just using the Collections Framework in Java. Frankly, I think it is probably overkill as @Mike Deck points out. For such a small set of items to compare and process I think arrays would be a better choice from a procedural standpoint but here is my pseudo-coded (because I'm lazy) solution. I have an assumption that the Foo class is comparable based on it's unique id and not all of the data in it's contents:</p>

<pre><code>Collection&lt;Foo&gt; oldSet = ...;
Collection&lt;Foo&gt; newSet = ...;

private Collection difference(Collection a, Collection b) {
Collection result = a.clone();
result.removeAll(b)
return result;
}

private Collection intersection(Collection a, Collection b) {
Collection result = a.clone();
result.retainAll(b)
return result;
}

public doWork() {
    // if foo is in(*) oldSet but not newSet, call doRemove(foo)
    Collection removed = difference(oldSet, newSet);
    if (!removed.isEmpty()) {
     loop removed {
      Foo foo = removedIter.next();
      doRemove(foo);
     }
    }
//else if foo is not in oldSet but in newSet, call doAdd(foo)
Collection added = difference(newSet, oldSet);
if (!added.isEmpty()) {
 loop added  {
  Foo foo = addedIter.next();
  doAdd(foo);
 }
}

// else if foo is in both collections but modified, call doUpdate(oldFoo, newFoo)
Collection matched = intersection(oldSet, newSet);
Comparator comp = new Comparator() {
 int compare(Object o1, Object o2) {
  Foo f1, f2;
  if (o1 instanceof Foo) f1 = (Foo)o1;
  if (o2 instanceof Foo) f2 = (Foo)o2;
  return f1.activated == f2.activated ? f1.startdate.compareTo(f2.startdate) == 0 ? ... : f1.startdate.compareTo(f2.startdate) : f1.activated ? 1 : 0;
 }

 boolean equals(Object o) {
  // equal to this Comparator..not used
 }
}
loop matched {
 Foo foo = matchedIter.next();
 Foo oldFoo = oldSet.get(foo);
 Foo newFoo = newSet.get(foo);
 if (comp.compareTo(oldFoo, newFoo ) != 0) {
  doUpdate(oldFoo, newFoo);
 } else {
  //else if !foo.activated &amp;&amp; foo.startDate &gt;= now, call doStart(foo)
  if (!foo.activated &amp;&amp; foo.startDate &gt;= now) doStart(foo);

  // else if foo.activated &amp;&amp; foo.endDate &lt;= now, call doEnd(foo)
  if (foo.activated &amp;&amp; foo.endDate &lt;= now) doEnd(foo);
 }
}
}
</code></pre>

<p>As far as your questions:
If I convert oldSet and newSet into HashMap (order is not of concern here), with the IDs as keys, would it made the code easier to read and easier to compare? How much of time &amp; memory performance is loss on the conversion?
I think that you would probably make the code more readable by using a Map BUT...you would probably use more memory and time during the conversion.</p>

<p>Would iterating the two sets and perform the appropriate operation be more efficient and concise?
Yes, this would be the best of both worlds especially if you followed @Mike Sharek 's advice of Rolling your own List with the specialized methods or following something like the Visitor Design pattern to run through your collection and process each item.</p>

===UCLA===
PostId: 24023
Score: 6
Accepted: 1
ViewCount: 4401
Tags: <java><concurrency>
<pre><code>class Producer implements Runnable {
   private final BlockingQueue queue;
   Producer(BlockingQueue q) { queue = q; }
   public void run() {
     try {
       while (true) { queue.put(produce()); }
     } catch (InterruptedException ex) { ... handle ...}
   }
   Object produce() { ... }
 }

 class Consumer implements Runnable {
   private final BlockingQueue queue;
   Consumer(BlockingQueue q) { queue = q; }
   public void run() {
     try {
       while (true) { consume(queue.take()); }
     } catch (InterruptedException ex) { ... handle ...}
   }
   void consume(Object x) { ... }
 }

 class Setup {
   void main() {
     BlockingQueue q = new SomeQueueImplementation();
     Producer p = new Producer(q);
     Consumer c1 = new Consumer(q);
     Consumer c2 = new Consumer(q);
     new Thread(p).start();
     new Thread(c1).start();
     new Thread(c2).start();
   }
 }
</code></pre>

<p>This example was taken from the <a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html">JDK 1.6 docs of <code>BlockingQueue</code></a>. So You can see that you are doing it the right way. Here's the quote which tells you that it have to work:</p>

<blockquote>
  <p>Memory consistency effects: As with
  other concurrent collections, actions
  in a thread prior to placing an object
  into a BlockingQueue happen-before
  actions subsequent to the access or
  removal of that element from the
  BlockingQueue in another thread.</p>
</blockquote>

===UCLA===
PostId: 24335
Score: 12
Accepted: 0
ViewCount: 27831
Tags: <java><annotations><glossary>
<p>Anders gives a good summary, and here's an example of a JUnit annotation</p>

<pre><code>@Test(expected=IOException.class)
public void flatfileMissing()
    throws IOException
{
    readFlatFile("testfiles"+separator+"flatfile_doesnotexist.dat");
}
</code></pre>

<p>Here the @Test annotation is telling JUnit that the flatfileMissing method is a test that should be executed and that the expected result is a thrown IOException.  Thus, when you run your tests, this method will be called and the test will pass or fail based on whether an IOException is thrown.</p>

===UCLA===
PostId: 24499
Score: 54
Accepted: 1
ViewCount: 6303
Tags: <java><db4o>
<p>We run DB40 .NET version in a large client/server project.</p>

<p>Our experiences is that you can potentially get much better performance than typical relational databases.</p>

<p>However, you really have to tweak your objects to get this kind of performance. For example, if you've got a list containing a lot of objects, DB4O activation of these lists is slow. There are a number of ways to get around this problem, for example, by inverting the relationship.</p>

<p>Another pain is activation. When you retrieve or delete an object from DB4O, by default it will activate the whole object tree. For example, loading a Foo will load Foo.Bar.Baz.Bat, etc until there's nothing left to load. While this is nice from a programming standpoint, performance will slow down the more nesting in your objects. To improve performance, you can tell DB4O how many levels deep to activate. This is time-consuming to do if you've got a lot of objects.</p>

<p>Another area of pain was text searching. DB4O's text searching is far, far slower than SQL full text indexing. (They'll tell you this outright on their site.) The good news is, it's easy to setup a text searching engine on top of DB4O. On our project, we've hooked up Lucene.NET to index the text fields we want.</p>

<p>Some APIs don't seem to work, such as the GetField APIs useful in applying database upgrades. (For example, you've renamed a property and you want to upgrade your existing objects in the database, you need to use these "reflection" APIs to find objects in the database. Other APIs, such as the [Index] attribute don't work in the stable 6.4 version, and you must instead specify indexes using the Configure().Index("someField"), which is not strongly typed.</p>

<p>We've witnessed performance degrade the larger your database. We have a 1GB database right now and things are still fast, but not nearly as fast as when we started with a tiny database.</p>

<p>We've found another issue where Db4O.GetByID will close the database if the ID doesn't exist anymore in the database.</p>

<p>We've found the Native Query syntax (the most natural, language-integrated syntax for queries) is far, far slower than the less-friendly SODA queries. So instead of typing:</p>

<pre><code>// C# syntax for "Find all MyFoos with Bar == 23".
// (Note the Java syntax is more verbose using the Predicate class.)
IList&lt;MyFoo&gt; results = db4o.Query&lt;MyFoo&gt;(input =&gt; input.Bar == 23);
</code></pre>

<p>Instead of that nice query code, you have to an ugly SODA query which is string-based and not strongly-typed.</p>

<p>For .NET folks, they've recently introduced a LINQ-to-DB4O provider, which provides for the best syntax yet. However, it's yet to be seen whether performance will be up-to-par with the ugly SODA queries.</p>

<p>DB4O support has been decent: we've talked to them on the phone a number of times and have received helpful info. Their user forums are next to worthless, however, almost all questions go unanswered. Their JIRA bug tracker receives a lot of attention, so if you've got a nagging bug, file it on JIRA on it often will get fixed. (We've had 2 bugs that have been fixed, and another one that got patched in a half-assed way.)</p>

<p>If all this hasn't scared you off, let me say that we're very happy with DB4O, despite the problems we've encountered. The performance we've got has blown away some O/RM frameworks we tried. I recommend it.</p>

<p><strong>update July 2015</strong> Keep in mind, this answer was written back in 2008. While I appreciate the upvotes, the world has changed since then, and this information may not be as reliable as it was when it was written.</p>

===UCLA===
PostId: 24897
Score: 0
Accepted: 0
ViewCount: 680
Tags: <java><xml>
<p>I don't think that using the DOM XML API wich comes with the JDK is difficult, it's easy to create Element nodes, attributes, etc... and later is easy convert strings to a DOM document sor DOM documents into a String</p>

<p>In the first page google finds from Spain (<a href="http://soaagenda.com/journal/articulos/document-a-string/" rel="nofollow">spanish XML example</a>):</p>

<pre><code>public String DOM2String(Document doc)
{
    TransformerFactory transformerFactory =TransformerFactory.newInstance();
    Transformer transformer = null;
    try{
        transformer = transformerFactory.newTransformer();
    }catch (javax.xml.transform.TransformerConfigurationException error){
        coderror=123;
        msgerror=error.getMessage();
        return null;
    }

    Source source = new DOMSource(doc);

    StringWriter writer = new StringWriter();
    Result result = new StreamResult(writer);
    try{
        transformer.transform(source,result);
    }catch (javax.xml.transform.TransformerException error){
        coderror=123;
        msgerror=error.getMessage();
        return null;
    }

    String s = writer.toString();
    return s;
}

public Document string2DOM(String s)
{
    Document tmpX=null;
    DocumentBuilder builder = null;
    try{
        builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    }catch(javax.xml.parsers.ParserConfigurationException error){
        coderror=10;
        msgerror="Error crando factory String2DOM "+error.getMessage();
        return null;
    }
    try{
        tmpX=builder.parse(new ByteArrayInputStream(s.getBytes()));
    }catch(org.xml.sax.SAXException error){
        coderror=10;
        msgerror="Error parseo SAX String2DOM "+error.getMessage();
        return null;
    }catch(IOException error){
        coderror=10;
        msgerror="Error generando Bytes String2DOM "+error.getMessage();
        return null;
    }
    return tmpX;
}
</code></pre>

===UCLA===
PostId: 24997
Score: 22
Accepted: 0
ViewCount: 18552
Tags: <java><generics><syntax>
<p>You can, if you pass in the type as a method parameter.</p>

<pre><code>static &lt;T&gt; List&lt;T&gt; createEmptyList( Class&lt;T&gt; type ) {
  return new ArrayList&lt;T&gt;();
}

@Test
public void createStringList() {
  List&lt;String&gt; stringList = createEmptyList( String.class );
}
</code></pre>

<p>Methods cannot be genericised in the same way that a type can, so the only option for a method with a dynamically-typed generic return type -- phew that's a mouthful :-) -- is to pass in the type as an argument.</p>

<p>For a truly excellent FAQ on Java generics, <a href="http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html">see Angelika Langer's generics FAQ</a>.</p>

<p>.<br />
.   </p>

<p><strong>Follow-up:</strong></p>

<p>It wouldn't make sense in this context to use the array argument as in <code>Collection.toArray( T[] )</code>. The only reason an array is used there is because the same (pre-allocated) array is used to contain the results (if the array is large enough to fit them all in). This saves on allocating a new array at run-time all the time.</p>

<p>However, for the purposes of education, if you did want to use the array typing, the syntax is very similar:</p>

<pre><code>static &lt;T&gt; List&lt;T&gt; createEmptyList( T[] array ) {
  return new ArrayList&lt;T&gt;();
}

@Test
public void testThing() {
  List&lt;Integer&gt; integerList = createEmptyList( new Integer[ 1 ] );
}
</code></pre>

===UCLA===
PostId: 25010
Score: 0
Accepted: 0
ViewCount: 18552
Tags: <java><generics><syntax>
<p>@<a href="#25001" rel="nofollow">pauldoo</a>
Yes, you are quite right. It is one of the weaknesses with the java generics imho.</p>

<p>I response to <a href="#24997" rel="nofollow">Cheekysoft</a> I'd like to propose to also look at how it is done by the Java people themselves, such as T[] <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/AbstractCollection.html" rel="nofollow">AbstractCollection#toArray</a>(T[] a). I think Cheekysofts version is superior, but the Java one has the advantage of familiarity.</p>

<p>Edit: Added link.
Re-edit: Found a bug on SO :)</p>

<p><hr /></p>

<p>Follow-up on <a href="#24997" rel="nofollow">Cheekysoft</a>:
Well, as it is a list of some type that should be returned the corresponding example should look something like:</p>

<pre><code>static &lt;T&gt; List&lt;T&gt; createEmptyList( List&lt;T&gt; a ) {
  return new ArrayList&lt;T&gt;();
}
</code></pre>

<p>But yes, passing the class object is clearly the better one. My only argument is that of familiarity, and in this exact instance it isn't worth much (in fact it is bad).</p>

===UCLA===
PostId: 25311
Score: 179
Accepted: 1
ViewCount: 341979
Tags: <java><data-structures><linked-list>
<p>The obvious solution to developers familiar to Java is to use the <strong>LinkedList</strong> class already provided in <strong>java.util</strong>. Say, however, you wanted to make your own implementation for some reason. Here is a quick example of a linked list that inserts a new link at the beginning of the list, deletes from the beginning of the list and loops through the list to print the links contained in it. <strong>Enhancements</strong> to this implementation include making it a <strong>double-linked list</strong>, adding methods to <strong>insert</strong> and <strong>delete</strong> from the middle or end, and by adding <strong>get</strong> and <strong>sort</strong> methods as well. </p>

<p><strong>Note</strong>: In the example, the Link object doesn't actually contain another Link object -  <em>nextLink</em> is actually only a reference to another link. </p>

<pre><code>class Link {
    public int data1;
    public double data2;
    public Link nextLink;

    //Link constructor
    public Link(int d1, double d2) {
     data1 = d1;
     data2 = d2;
    }

    //Print Link data
    public void printLink() {
     System.out.print("{" + data1 + ", " + data2 + "} ");
    }
}

class LinkList {
    private Link first;

    //LinkList constructor
    public LinkList() {
     first = null;
    }

    //Returns true if list is empty
    public boolean isEmpty() {
     return first == null;
    }

    //Inserts a new Link at the first of the list
    public void insert(int d1, double d2) {
     Link link = new Link(d1, d2);
     link.nextLink = first;
     first = link;
    }

    //Deletes the link at the first of the list
    public Link delete() {
     Link temp = first;
     first = first.nextLink;
     return temp;
    }

    //Prints list data
    public void printList() {
     Link currentLink = first;
     System.out.print("List: ");
     while(currentLink != null) {
      currentLink.printLink();
      currentLink = currentLink.nextLink;
     }
     System.out.println("");
    }
}  

class LinkListTest {
    public static void main(String[] args) {
     LinkList list = new LinkList();

     list.insert(1, 1.01);
     list.insert(2, 2.02);
     list.insert(3, 3.03);
     list.insert(4, 4.04);
     list.insert(5, 5.05);

     list.printList();

     while(!list.isEmpty()) {
      Link deletedLink = list.delete();
      System.out.print("deleted: ");
      deletedLink.printLink();
      System.out.println("");
     }
     list.printList();
    }
}
</code></pre>

===UCLA===
PostId: 25492
Score: 25
Accepted: 1
ViewCount: 10541
Tags: <java><plugins><plugin-architecture>
<p>I've done this for software I've written in the past, it's very handy. I did it by first creating an Interface that all my 'plugin' classes needed to implement. I then used the Java <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html">ClassLoader</a> to load those classes and create instances of them.</p>

<p>One way you can go about it is this:
</p>

<pre><code>File dir = new File("put path to classes you want to load here");
URL loadPath = dir.toURI().toURL();
URL[] classUrl = new URL[]{loadPath};

ClassLoader cl = new URLClassLoader(classUrl);

Class loadedClass = cl.loadClass("classname"); // must be in package.class name format
</code></pre>

<p>That has loaded the class, now you need to create an instance of it, assuming the interface name is MyModule:
</p>

<pre><code>MyModule modInstance = (MyModule)loadedClass.newInstance();
</code></pre>

===UCLA===
PostId: 25596
Score: 181
Accepted: 1
ViewCount: 162126
Tags: <java><memory><resources><system>
<p>You can get some limited memory information from the Runtime class. It really isn't exactly what you are looking for, but I thought I would provide it for the sake of completeness. Here is a small example. Edit: You can also get disk usage information from the java.io.File class. The disk space usage stuff requires Java 1.6 or higher.</p>

<pre><code>public class Main {
  public static void main(String[] args) {
    /* Total number of processors or cores available to the JVM */
    System.out.println("Available processors (cores): " + 
        Runtime.getRuntime().availableProcessors());

    /* Total amount of free memory available to the JVM */
    System.out.println("Free memory (bytes): " + 
        Runtime.getRuntime().freeMemory());

    /* This will return Long.MAX_VALUE if there is no preset limit */
    long maxMemory = Runtime.getRuntime().maxMemory();
    /* Maximum amount of memory the JVM will attempt to use */
    System.out.println("Maximum memory (bytes): " + 
        (maxMemory == Long.MAX_VALUE ? "no limit" : maxMemory));

    /* Total memory currently available to the JVM */
    System.out.println("Total memory available to JVM (bytes): " + 
        Runtime.getRuntime().totalMemory());

    /* Get a list of all filesystem roots on this system */
    File[] roots = File.listRoots();

    /* For each filesystem root, print some info */
    for (File root : roots) {
      System.out.println("File system root: " + root.getAbsolutePath());
      System.out.println("Total space (bytes): " + root.getTotalSpace());
      System.out.println("Free space (bytes): " + root.getFreeSpace());
      System.out.println("Usable space (bytes): " + root.getUsableSpace());
    }
  }
}
</code></pre>

===UCLA===
PostId: 25644
Score: 62
Accepted: 1
ViewCount: 59602
Tags: <java><cross-platform><shutdown>
<p>Create your own function to execute an OS <a href="http://www.exampledepot.com/egs/java.lang/Exec.html?l=new">command</a> through the <a href="http://www.computerhope.com/shutdown.htm">command line</a>?</p>

<p>For the sake of an example. But know where and why you'd want to use this as others note.</p>

<pre><code>public static void main(String arg[]) throws IOException{
 Runtime runtime = Runtime.getRuntime();
 Process proc = runtime.exec("shutdown -s -t 0");
 System.exit(0);
}
</code></pre>

===UCLA===
PostId: 25666
Score: 59
Accepted: 0
ViewCount: 59602
Tags: <java><cross-platform><shutdown>
<p>Here's another example that could work cross-platform:</p>

<pre><code>public static void shutdown() throws RuntimeException, IOException {
    String shutdownCommand;
    String operatingSystem = System.getProperty("os.name");

    if ("Linux".equals(operatingSystem) || "Mac OS X".equals(operatingSystem)) {
        shutdownCommand = "shutdown -h now";
    }
    else if ("Windows".equals(operatingSystem)) {
        shutdownCommand = "shutdown.exe -s -t 0";
    }
    else {
        throw new RuntimeException("Unsupported operating system.");
    }

    Runtime.getRuntime().exec(shutdownCommand);
    System.exit(0);
}
</code></pre>

<p>The specific shutdown commands may require different paths or administrative privileges.</p>

===UCLA===
PostId: 25877
Score: 24
Accepted: 1
ViewCount: 18552
Tags: <java><generics><syntax>
<p>When the java compiler cannot infer the parameter type by itself for a static method, you can always pass it using the full qualified method name: Class . &lt; Type > method();</p>

<pre><code>Object list = Collections.&lt;String&gt; emptyList();
</code></pre>

===UCLA===
PostId: 26311
Score: 21
Accepted: 0
ViewCount: 209530
Tags: <java><audio>
<p>A bad example:</p>

<pre><code>import  sun.audio.*;    //import the sun.audio package
import  java.io.*;

//** add this into your application code as appropriate
// Open an input stream  to the audio file.
InputStream in = new FileInputStream(Filename);

// Create an AudioStream object from the input stream.
AudioStream as = new AudioStream(in);         

// Use the static class member "player" from class AudioPlayer to play
// clip.
AudioPlayer.player.start(as);            

// Similarly, to stop the audio.
AudioPlayer.player.stop(as); 
</code></pre>

===UCLA===
PostId: 26318
Score: 95
Accepted: 1
ViewCount: 209530
Tags: <java><audio>
<p>I wrote the following code that works fine. But I think it only works with <code>.wav</code> format.</p>

<pre><code>public static synchronized void playSound(final String url) {
  new Thread(new Runnable() {
  // The wrapper thread is unnecessary, unless it blocks on the
  // Clip finishing; see comments.
    public void run() {
      try {
        Clip clip = AudioSystem.getClip();
        AudioInputStream inputStream = AudioSystem.getAudioInputStream(
          Main.class.getResourceAsStream("/path/to/sounds/" + url));
        clip.open(inputStream);
        clip.start(); 
      } catch (Exception e) {
        System.err.println(e.getMessage());
      }
    }
  }).start();
}
</code></pre>

===UCLA===
PostId: 27041
Score: 7
Accepted: 0
ViewCount: 6199
Tags: <java><exception>
<p>My rule of thumb is when the client (the caller) might reasonably want to do something different, depending on the type of exception thrown, the additional exception types are warranted. More often than not, however, the extra exception types are not needed. For instance, if the caller is writing code like</p>

<pre><code>try {
     doIt();
} catch (ExceptionType1 ex1) {
     // do something useful
} catch (ExceptionType2 ex2) {
     // do the exact same useful thing that was done in the block above
}
</code></pre>

<p>then clearly the additional exception types are not needed. All too often I see (or am forced to write) code like this because the code being called was overzealous in its creation of new exception types.</p>

===UCLA===
PostId: 27185
Score: 3
Accepted: 1
ViewCount: 8577
Tags: <java><colors><bufferedimage><colorize>
<p>I have never used GIMP's colorize command. However, if your getting the RGB value of each pixel and adding RGB value to it you should really use a <strong><a href="http://docs.oracle.com/javase/7/docs/api/java/awt/image/LookupOp.html" rel="nofollow">LookupOp</a>.</strong> Here is some code that I wrote to apply a BufferedImageOp to a BufferedImage.</p>

<p>Using Nicks example from above heres how I would do it.</p>

<blockquote>
  <p>Let Y = 0.3*R + 0.59*G + 0.11*B for
  each pixel</p>
  
  <p>(R1,G1,B1) is what you are colorizing
  with</p>
</blockquote>

<pre><code>protected LookupOp createColorizeOp(short R1, short G1, short B1) {
    short[] alpha = new short[256];
    short[] red = new short[256];
    short[] green = new short[256];
    short[] blue = new short[256];

    int Y = 0.3*R + 0.59*G + 0.11*B

    for (short i = 0; i &lt; 256; i++) {
        alpha[i] = i;
        red[i] = (R1 + i*.3)/2;
        green[i] = (G1 + i*.59)/2;
        blue[i] = (B1 + i*.11)/2;
    }

    short[][] data = new short[][] {
            red, green, blue, alpha
    };

    LookupTable lookupTable = new ShortLookupTable(0, data);
    return new LookupOp(lookupTable, null);
}
</code></pre>

<p>It creates a <a href="http://docs.oracle.com/javase/7/docs/api/java/awt/image/BufferedImageOp.html" rel="nofollow">BufferedImageOp</a> that will mask out each color if the mask boolean is true.</p>

<p>Its simple to call too.</p>

<pre><code>BufferedImageOp colorizeFilter = createColorizeOp(R1, G1, B1);
BufferedImage targetImage = colorizeFilter.filter(sourceImage, null);
</code></pre>

<p>If this is not what your looking for I suggest you look more into BufferedImageOp's.</p>

<p>This is would also be more efficient since you would not need to do the calculations multiple times on different images. Or do the calculations over again on different BufferedImages as long as the R1,G1,B1 values don't change.</p>

===UCLA===
PostId: 27553
Score: 7
Accepted: 0
ViewCount: 26968
Tags: <java><colors><rgb><gradient>
<p>Using the basic AWT classes, you could do something like this:</p>

<pre><code>import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JPanel;

public class LinearGradient extends JPanel {

    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        Color color1 = Color.RED;
        Color color2 = Color.BLUE;
        int steps = 30;
        int rectWidth = 10;
        int rectHeight = 10;

        for (int i = 0; i &lt; steps; i++) {
            float ratio = (float) i / (float) steps;
            int red = (int) (color2.getRed() * ratio + color1.getRed() * (1 - ratio));
            int green = (int) (color2.getGreen() * ratio + color1.getGreen() * (1 - ratio));
            int blue = (int) (color2.getBlue() * ratio + color1.getBlue() * (1 - ratio));
            Color stepColor = new Color(red, green, blue);
            Rectangle2D rect2D = new Rectangle2D.Float(rectWidth * i, 0, rectWidth, rectHeight);
            g2.setPaint(stepColor);
            g2.fill(rect2D);
        }
    }
}
</code></pre>

===UCLA===
PostId: 27561
Score: 10
Accepted: 0
ViewCount: 26968
Tags: <java><colors><rgb><gradient>
<p>You can use the built in <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/GradientPaint.html" rel="nofollow">GradientPaint</a> class. </p>

<pre><code>void Paint(Graphics2D g, Regtangle r, Color c1, Color c2)
{
  GradientPaint gp = new GradientPaint(0,0,c1,r.getWidth(),r.getHeight(),c2); 
  g.setPaint(gp);
  g.fill(rect);
}
</code></pre>

===UCLA===
PostId: 27609
Score: 1173
Accepted: 1
ViewCount: 471203
Tags: <java><override><equals><hashcode>
<h3>The theory (for the language lawyers and the mathematically inclined):</h3>

<p><code>equals()</code> (<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)">javadoc</a>) must define an equivalence relation (it must be <em>reflexive</em>, <em>symmetric</em>, and <em>transitive</em>). In addition, it must be <em>consistent</em> (if the objects are not modified, then it must keep returning the same value). Furthermore, <code>o.equals(null)</code> must always return false.</p>

<p><code>hashCode()</code> (<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()">javadoc</a>) must also be <em>consistent</em> (if the object is not modified in terms of <code>equals()</code>, it must keep returning the same value).</p>

<p>The <strong>relation</strong> between the two methods is:</p>

<blockquote>
  <p><em>Whenever <code>a.equals(b)</code>, then <code>a.hashCode()</code> must be same as <code>b.hashCode()</code>.</em></p>
</blockquote>

<h3>In practice:</h3>

<p>If you override one, then you should override the other.</p>

<p>Use the same set of fields that you use to compute <code>equals()</code> to compute <code>hashCode()</code>.</p>

<p>Use the excellent helper classes <a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html">EqualsBuilder</a> and <a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html">HashCodeBuilder</a> from the <a href="http://commons.apache.org/lang/">Apache Commons Lang</a> library. An example:</p>

<pre><code>public class Person {
    private String name;
    private int age;
    // ...

    @Override
    public int hashCode() {
        return new HashCodeBuilder(17, 31). // two randomly chosen prime numbers
            // if deriving: appendSuper(super.hashCode()).
            append(name).
            append(age).
            toHashCode();
    }

    @Override
    public boolean equals(Object obj) {
       if (!(obj instanceof Person))
            return false;
        if (obj == this)
            return true;

        Person rhs = (Person) obj;
        return new EqualsBuilder().
            // if deriving: appendSuper(super.equals(obj)).
            append(name, rhs.name).
            append(age, rhs.age).
            isEquals();
    }
}
</code></pre>

<h3>Also remember:</h3>

<p>When using a hash-based <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/Collection.html">Collection</a> or <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/Map.html">Map</a> such as <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashSet.html">HashSet</a>, <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/LinkedHashSet.html">LinkedHashSet</a>, <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashMap.html">HashMap</a>, <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/Hashtable.html">Hashtable</a>, or <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/WeakHashMap.html">WeakHashMap</a>, make sure that the hashCode() of the key objects that you put into the collection never changes while the object is in the collection. The bulletproof way to ensure this is to make your keys immutable, <a href="http://www.javapractices.com/topic/TopicAction.do?Id=29">which has also other benefits</a>.</p>

===UCLA===
PostId: 28439
Score: 1
Accepted: 0
ViewCount: 790
Tags: <java><algorithm>
<p>You should probably raise an exception if it gets to that last <code>return 0</code> line --when a hash collision happens. I do have a question though: you are doing a total ordering on the hash's, which I guess is fine, but shouldn't some function be passed to it to define a Lexicographical order?</p>

<pre><code>    int h1 = System.identityHashCode(o1);
    int h2 = System.identityHashCode(o2);
    if (h1 != h2) {
        return h1 &lt; h2 ? -1 : 1;
    }
</code></pre>

<p>I can imagine that you have the objects as a tuple of two integers that form a real number. But you wont get the proper ordering since you're only taking a hash of the object. This is all up to you if hashing is what you meant, but to me, it doesn't make much sense. </p>

