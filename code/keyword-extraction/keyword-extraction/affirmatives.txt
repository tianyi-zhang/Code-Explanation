I was all in favour of throwing IllegalArgumentException for null parameters, until today, when I noticed the java.util.Objects.requireNonNull method in Java 7
You can use netstat -rn command which is available on Windows, OSX, Linux, etc platform
You can call the subclass's values method and obtain a sorted thread safe Set of Strings without having to down cast to the ConcurrentSkipListSet.
The asList method in java.util.Arrays allows a nice combination of varargs, generic methods and autoboxing:
If a second thread were to continually reset the value of i to 0 (by calling slow.setI( 0 ), for example), the Slow class could never end its loop
Note: (-r >> (Integer.SIZE - 1)) consists of the sign bit of r, repeated 32 times (thanks to sign extension of the >> operator.) This evaluates to 0 if r is zero or negative, -1 if r is positive
So subtracting it from q has the effect of adding 1 if records % recordsPerPage > 0.
You can also get process CPU usage (without writing your own JNI code), but you need to cast the java.lang.management.OperatingSystemMXBean to a com.sun.management.OperatingSystemMXBean
The project includes a simple demo application which compares its BrowserPane component to JEditorPane, showing a far better result on complex pages (but still not comparable with a modern web browser).
BTW getClass().getClassLoader().getResourceAsStream("/img/bg.png") - which I tried first - returned me a null InputStream.
Updated If you just want the object itself (instead of invoking members), then Outer.this is the way to go.
I mean that the logger.isDebugEnabled() control should be the job of the logging framework, not my job
This assumes that you can do the error handling in the public doIt method, since the count variable isn't actually passed back to the caller
This of course assumes that the public doIt method is only called by a single thread.
Note that SecureRandom objects are expensive to initialize, so you'll want to keep one around and reuse it.
BigInteger provides a constructor to generate a random number, uniformly distributed over the range 0 to (2^numBits - 1)
If I read the spec correctly the automatic serialVersionUID shouldn't change if you change the value of a static of transient field
So, if you change the static initialization you would expect the serialVersionUID to change because you can't get the same object back again.
Anyways, keep this in all your serializable classes and you can control the serialVersionUID:
As WMR mentioned, org.apache.commons.io.IOUtils from Apache has a method called copy(InputStream,OutputStream) which does exactly what you're looking for.
Call DateTimeFormatter.ofLocalizedDate, and be sure to specify the desired/expected Locale rather than rely on the JVMâ€™s current default which can change at any moment during runtime(!).
You can either specify your own formatting pattern or let java.time automatically localize as appropriate to a Locale specifying a human language for translation and cultural norms for deciding issues such as period versus comma.
Note how the second argument to the parse method is a method reference, syntax added to Java 8 and later.
Like Joda-Time, java.time has a class LocalDate to represent a date-only value without time-of-day and without time zone.
Read the DateTimeFormatter class doc for details on the codes used in the format pattern
2.) Iterate through the values -> values() of the map:
In Map one can Iteration over keys and/or values and/or both (e.g., entrySet) depends on one's interested in_ Like:
1.) Iterate through the keys -> keySet() of the map:
3.) Iterate through the both -> entrySet() of the map:
After you have added the Maps to your imports, you can use Maps.transformValues and Maps.transformEntries on your maps, like this:
I recommend using the transform-methods in the Google Guava Maps class.
In Java 8 we have got forEach method that accepts a lambda expression
If you want to iterate through the map in the order that the elements were added, use LinkedHashMap as opposed to just Map.
For standard colors (including common colors and default colors used by the operating system) Use Display.getSystemColor(int), and pass in the SWT.COLOR_* constant for the color you want.
Most interesting classes are javax.activation.MimeType - an actual MIME type holder - and javax.activation.MimetypesFileTypeMap - class whose instance can resolve MIME type as String for a file:
If you're an Android developer, you can use a utility class android.webkit.MimeTypeMap which maps MIME-types to file extensions and vice versa.
For example, if you got its keySet and tried to remove an element from it, an exception would be raised
For example, a future release, or OpenJDK, could use the keys() method of Hashtable instead of keySet
After looking through the implementation of the store method, I found that it relies upon entrySet
To output to stdout rather than stderr, pass System.out to printStackTrace():
To clone a generic interface like java.util.List you will just need to cast it
Using an extension of UnicastRemoteObject gave us the ability to specify the client and server socket factories that we wanted to use
If you are using FireFox, install TamperData and change your accept header to application/json to see the JSON output.
Believe it or not, you can actually use java.awt.Robot to "create an image containing pixels read from the screen." You can then write that image to a file on disk.
It may be too late to respond, but you can also use Pattern.LITERAL, which would ignore all special characters while formatting:
setAcceptor(TabAcceptor a_acceptor) should let the consumer code decide whether to let one tab transfer from one tabbed pane to another
Are you trying to write the contents of a Reader to an OutputStream? If so, you'll have an easier time wrapping the OutputStream in an OutputStreamWriter and write the chars from the Reader to the Writer, instead of trying to convert the reader to an InputStream:
The java.util.prefs package provides a way for applications to store and retrieve user and system preferences and data configuration
Java 8 provides joining out of the box via StringJoiner and String.join()
the class Separator return the empty String only the first time that it is invoked, then it returns the separator:
appendString() is similar to makeString(), but it appends to an Appendable (like StringBuilder) and is void
Then you create a private static final Foo field to hold the only instance, and a public static Foo getInstance() method to return it
The process by which enum constants are serialized cannot be customized: any class-specific writeObject, readObject, readObjectNoData, writeReplace, and readResolve methods defined by enum types are ignored during serialization and deserialization
You can access it by Singleton.INSTANCE, much easier than calling getInstance() method on Singleton.
Yes this is our very same hero :) Since the line private static final Foo INSTANCE = new Foo(); is only executed when the class FooLoader is actually used, this takes care of the lazy instantiation,
The added setInstance method allows setting a mockup implementation of the singleton class during testing:
What are you trying to accomplish? Map already exposes its keys as a Set via its keySet() method
By the way, both LocalDate and YearMonth use month numbers as you would expect (1-12) rather than the screwball 0-11 seen in the old date-time classes
The LocalDate class represents a date-only value without time-of-day and without time zone
Globaly you can register a class implementing java.util.Thread.UncaughtExceptionHandler and register it via java.util.Thread.setDefaultUncaughtExceptionHandler
A system property 'sun.awt.exception.handler' needs to be registerd with the Fully Qualified Class Name of a class with a zero argument constructor
Both versions avoid creating any intermediary List objects and use System.arraycopy() to ensure that copying large arrays is as fast as possible.
HashBag provides the API you'd need since it's a Collection that also allows you to query for the number of occurrences of an item.
On a side note if you have a situation where multiple threads update a common sum you can have a look at LongAdder class.Under high contention, expected throughput of this class is significantly higher than AtomicLong, at the expense of higher space consumption.
The method computeIfAbsent checks if the specified key is already associated with a value or not? If no associated value then it attempts to compute its value using the given mapping function
You can use a utility class Manifests from jcabi-manifests that automates finding and parsing of all MANIFEST.MF files available in classpath
Seems like DateFormat.getTimeZone() returns the same TimeZone before and after the parse()..
Each iteration checks to see if the substring of the container string is equalsIgnoreCase to the sub.
It checks if 2 String regions match, but what's important is that it also has an overload with a handy ignoreCase parameter.
My method is 4x faster compared to lowercasing and using contains(), 10x faster compared to using regular expressions and also 3x faster even if the Pattern is pre-cached (and losing flexibility of checking for an arbitrary substring).
It does require a bit more brain power to examine, but the good naming of isEven compensates.
Insert a boolean flag isFinished and set it to true at the end of your loop and to false before the loop
I assume the connection timeout (URLConnection.setConnectTimeout(int timeout) ) is of no use because you are doing some kind of streaming.
So that's almost 8x better, even with a cached Pattern
For each window, use JComponent.registerKeyboardAction with a condition of WHEN_IN_FOCUSED_WINDOW
I don't think there's any substitute for remembering to do this, but at least now it's a matter of remembering a subclass instead of a setIconImage call (among possibly other features).
instead of using object.getClass().getName() you can use object.getClass().getSimpleName(), because it returns a simple class name without a package name included.
This will sort according to the value in ascending order; for descending order, it is just possible to uncomment the call to Collections.reverseOrder().
To alleviate this, you could add your key to the comparator like so (presuming that your keys and values are Comparable):
These may be applied to a TreeMap (as Ordering extends Comparator), or a LinkedHashMap after some sorting
Note: This has changed significantly in June 2012 - the previous code could never work: an internal HashMap is required to lookup the values without creating an infinite loop between the TreeMap.get() -> compare() and compare() -> get()
Instead of using Collections.sort as some do I'd suggest using Arrays.sort
Instead, I inject a dependency to the SqlMapClientTemplate (typed as the interface SqlMapClientOperations)
Note that you have to use Integer instead of int or you can't use a custom comparator.
Edit: I'm now using Arrays.asList instead of Collections.singleton: singleton is limited to one entry, whereas the asList approach allows you to add other strings to filter out later: Arrays.asList("a", "b", "c").
This requires either guava (com.google.common.base.Objects.hashCode(...)) or JDK7 (java.util.Objects.hash(...)) but works the same way.
I use a tiny wrapper around Arrays.deepHashCode(...) because it handles arrays supplied as parameters correctly
Here is an explanation: the point p is the location of the mouse relative to the FPanel
Then it is simply a matter of shifting the panel location in the scroll pane by the same amount in the opposite direction to put p back under the mouse cursor.
Since you are scaling the size of the panel, the location of p (relative to the size of the panel) will scale by the same factor
Using @SuppressWarnings everywhere, as suggested, is a good way to do it, though it does involve a bit of finger typing each time you call q.list().
You can use TypedQuery just as you did it with Query with that small difference that all operations are type safe now.
The only problem with this approach is that you need to start JVM with deploy.jar in bootclasspath e.g
Afterwards the proxy settings are available to Java API via java.net.ProxySelector.
It's not working in your example because the ATTR_CURRENT_USER constant is not visible to the JSTL tags, which expect properties to be exposed by getter functions
Say you want to have a function passed in with a String param that returns an int. First you have to define an interface with the function as its only member, if you can't reuse an existing one.
In this example, A.method(Math::max); makes parameter.applyAsInt send its two input values to Math.max and return the result of that Math.max.
Its abstract method, applyAsInt, accepts two ints as its parameters and returns an int
When working with the PixelGrabber, don't forget to extract the RGBA info from the pixel array before calling getImageFromArray
Once you do that, make sure the image type in the BufferedImage constructor to BufferedImage.TYPE_INT_ARGB.
Motivation: I needed a set of items with RandomAccess properties, especially to pick a random item from the set (see pollRandom method)
The for-each construct calls Iterator.hasNext() on every loop, but since index < set.size(), that check is unnecessary overhead
Though doing away with the two aforementioned variables, the above solution still remains random because we are relying upon random (starting at a randomly selected index) to decrement itself toward 0 over each iteration.
in your case, set both corePoolSize and maximumPoolSize as N
I prefer ThreadPoolExecutor due to flexibility in APIs to control many paratmeters, which controls the flow task execution.
Note that this is bad coding style, although the compiler will almost certainly catch your error the moment you try to use d.
SpringBean will have ApplicationContext injected, within which this bean is instantiated
and SpringBean is declared within main context, it will have main context injected; otherwise, if it's declared within MVC context, it will have MVC context injected.
As others have noted, if you are depending on strong randomness where every sublist is possible (and unbiased), you'll definitely need something stronger than java.util.Random
This may substitue the last string in the array given to exec call.
There's a workaround: define a new Dummy class with member fields of all the types that you want to be included in serialization
The GWT compiler will pick this up, and because the Dummy class references those types, it will include them in the white list.
Since you are starting with a String, you need to covert to a DOM object (e.g. Node) before you can use the Transformer.
This actually came out longer than I thought - some extra lines were needed because Serializer wants an OutputStream to write to
To see how to customise the output format to your liking, take a look at the Serializer API.
The PrettyPrinter object is constructed with two ints, the first being max line length and the second being the indentation step.
The default indentation is 2 steps, XmlNodePrinter constructor can be passed another value as well.
The HexBinaryAdapter provides the ability to marshal and unmarshal between String and byte[].
Actually frame.getHeight() and getwidth() doesnt return values , check it by System.out.println(frame.getHeight()); directly put the values for width and height ,then it will work fine in center
The isConnected method won't help, it will return true even if the remote side has closed the socket
The only way to really find out is by reading (you'll get -1 as return value) or writing (an IOException (broken pipe) will be thrown) on the associated Input/OutputStreams.
What you need is to create in advance a bunch of BitSets, one for each category, containing the doc id of all the documents in a category
Use setRoundingMode, set the RoundingMode explicitly to handle your issue with the half-even round, then use the format pattern for your required output.
There are several RoundingMode enum values to select from, depending upon the behaviour you require.
A similar but fast and garbage-free method is provided by the DoubleRounder utility in the decimal4j library:
However if you do want to round the double value and get a double value result, you can use org.apache.commons.math3.util.Precision.round(..) as mentioned above
Element is an implementation of Node, but certainly not the only one
My guess is that getFirstChild() is returning a DocumentType, not an Element.
As already noted, the ClassCastException is probably not being thrown in setAttribute
And as @Recurse noted (but apparently -1 me) you can do the preceding with out making String name final to get the compiler error (which I never said you couldn't) but you could easily make the compiler error go away setting name after the switch statement which throws away the expression semantics or worse forgetting to break which you cannot cause an error (despite what @Recurse says) without using final:
Now If add another case statement and do not set name the compiler will fail
With this listenerSet to register a new listener you just have to add it to the set, and even if it is not removed explicitly, if the listener is no longer referenced, it will be removed automatically by the JVM.
with a manager.removeListener(myListenerImpl) because it will be automatically removed once your listener or your component holding the listener becomes unavailable.
If the manager stores your listener with a WeakReference, that means you don't need to remove the register e.g
There is no WeakHashSet implementation in the standard Java library only a WeakHashMap but we can easily use the latter one to "implement" the functionality of the first one:
Another useful case for WeakHashMap and WeakReference is a listener registry implementation.
I don't believe the Java Socket.close() method performs graceful disconnection
From a DataSource object you can retrieve an InputStream (beside name and type) of the attachment (see API: http://docs.oracle.com/javase/6/docs/api/javax/activation/DataSource.html?is-external=true).
This is much better than @Test(expected=IndexOutOfBoundsException.class) because the test will fail if IndexOutOfBoundsException is thrown before foo.doStuff()
If you can use JUnit 4.7, you can use the ExpectedException Rule
It's better than @Test(expected=IndexOutOfBoundsException.class) because it guarantees the expected line in the test threw the exception and lets you check more details about the exception, such as message, easier:
The canonical example of self documenting code applies in this case - give a descriptive variable name to the ignored IOException that you must catch on close().
You need to use the newly exposed methods in DefaultHandler2 or use the TransformerHandler approach where you can set the output key CDATA_SECTION_ELEMENTS, which takes a whitespace delimited list of tag names that should output sub text sections enclosed in CDATA.
Use the ImmutableList class and its of() and copyOf() factory methods (elements can't be null):
Note that the returned type for asList() is a List using a concrete ArrayList implementation, but it is NOT java.util.ArrayList
It's an inner type, which emulates an ArrayList but actually directly references the passed array and makes it "write through" (modifications are reflected in the array).
It forbids modifications through some of the List API's methods by way of simply extending an AbstractList (so, adding or removing elements is unsupported), however it allows calls to set() to override elements
Thus this list isn't truly immutable and a call to asList() should be wrapped with Collections.unmodifiableList().
Use the JDK's Arrays class and its asList() factory method, wrapped with a Collections.unmodifiableList():
Fortunately the JDK implementation is fast and Arrays.asList(a[]) is very well done
The java.util.Arrays.ArrayList class has set(), get(), contains() methods, but does not have any methods for adding elements, so its size is fixed
The constructor of ArrayList can accept a Collection type, which is also a super type for java.util.Arrays.ArrayList
Arrays.asList() will return an ArrayList which is a private static class inside Arrays, it is not the java.util.ArrayList class
Note :- each new Element(int args) will be treated as Individual Objects and can be passed as a var-args.
In Java 9, you can use List.of static factory method in order to create a List literal
If you execute this class, c.close() will be executed when the try block is left, and before the catch and finally blocks are executed
I ended up subclassing Struts' ServletRedirectResult and overriding it's doExecute() method to do my logic before calling super.doExecute()
Then map the ID (even though it's also stored in A!) to the object
If a matching A was found it will be removed and then you add the new one, you don't even need the if (set.contains(A)) conditional.
The extraction of ApplicationData object has to be run in different thread ;)
Once you declare foos as List<? extends Foo>, the compiler doesn't know that it's safe to add a SubFoo
The annotation processor could do other checks as well, such as ensuring that the event handler method signature matches up with one of the registration methods on the ExampleProducer (basically, the same check that could be performed at registration-time).
Here, EventSupport has a static method that uses reflection to auto-register the listener with the event producer
The producer uses EventSupport, which uses reflection to invoke the events
As mentioned before, EventSupport could preform some initial checks when the events listeners are registered.
A custom annotation processor could be used to validate that the @HandlesEventFor annotation refers to an actual field of the ExampleListener
You cannot obtain the primitive class via forName, but you can get it from a class which is readily available
The Class instances for the primitive types are obtainable as you said using e.g int.class, but it is also possible to get the same values using something like Integer.TYPE
Each primitive wrapper class contains a static field, TYPE, which has the corresponding primitive class instance.
Every call to this method will be sent to SLF4J logging facility with DEBUG logging level
In Java 8 a new class named Instant is introduced
Reading and Writing in the middle of a file is as simple as using a RandomAccessFile in Java.
RandomAccessFile, despite its name, is more like an InputStream and OutputStream and less like a File
(The with reference only access is very useful.) If you use protected instead of private for the accessors/references, sub-classes of Foo can even return extended references from getReference
[EDIT: as commented below I no longer remember my reasoning for this sentence and it is likely wrong: "Note that this will only work in abstract classes, first of all."] The next difficulty is that g() only works from DIRECT subclasses of A
This will throw a ClassCastException, because the type argument here isn't a Class or a ParameterizedType at all; it's the TypeVariable T
But what if the fr.close() then causes another exception to be thrown? This will "trump" the first exception (a bit like putting return in a finally block) and you will lose all information about what actually caused the problem to begin with.
If you simply use org.mortbay.jetty.bio.SocketConnector, then you will not get continuation support.
Instead I looked at where the buffer creation was configured, and found I could subclass SelectChannelConnector to get the benefits of Continuation, but without locking files on windows
Jetty 9.2 documentation gives a Jetty Embedded example to serve static files using a ResourceHandler instead of a servlet :
While these objects store no time zone, note that time zone (ZoneId) is crucial in determining the current date
You can also use the FileFilter interface to filter out what you want
Given that seasons are defined here using whole months, we can make use of the handy Month enum
But we also add a static method of to do that lookup of which month maps to which season.
An EnumSet is a fast-performing and compact-memory way to track a subset of enum values.
Look for which season EnumSet has that particular Month value by calling contains.
As a bonus, since Stream.of() is variadic, you may concatenate as many lists as you like.
As we have three lists we have used this method (Stream.concat) two times.
Stream.concat takes two streams as input and creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
Now, linky will have 2 nodes, each of which will contain 4 ints, myInt1, myInt2, myInt3, and myInt4.
If it needs to be unique per PC: you could probably use (System.currentTimeMillis() << 4) | (staticCounter++ & 15) or something like that.
src/main/java/scratch/Bootstrap.java - this class is defined in pom.xml as the jar's mainclass: <mainClass>scratch.Bootstrap</mainClass>
Of course, you could make it more flexible by factoring out the hard-coded reference to Level.INFO, for example
(BTW, the tips about not subclassing ConsoleHandler to avoid closing the System.err were very useful.)
The ConsoleHandler will grab a snapshot of System.err during construction
Create a subclass directly derived from Formatter, not from SimpleFormatter
When creating a new Date with the default constructor, it will represent the date and time the Formatter processes the LogRecord, not the date that the LogRecord was created.
Be careful with creating a new Date object! You should make sure to represent the date of the LogRecord
Note that it ignores all class and method information available in the LogRecord.
Like Obediah Stane said, it's necessary to create your own format method
Java 7 supports a property with the java.util.Formatter format string syntax.
E.g. in NetBeans, instead of adding -D...=... somewhere, add the property in the action dialog, in a form of java.util.logging.SimpleFormatter.format=%1$tY-%1$tm-... - without any quotes.
If this is your concern, and you are ruling static content out, simply modify your Servlet doGet/doPost method to cache the RSS content that you would otherwise return, so that handling each request does not mean re-fetching all of the data all over again.
I think what you mean to say is that if you have a doGet/doPost method which contains code to build the data needed for the RSS feed from scratch, then each request triggers this fetching of data over and over again.
With multiple bounds, only the left-most bound is considered for the erasure, so if max is given the following signature:
As you can see, the is.read() method will lock the thread till new input is received from the user ONE BYTE AT A TIME
This means if you use telnet to test, each keystroke will make the loop iterate once, hence, we simply concatenate char by char in a StringBuffer until char 13 is received.
Re-reading your question again, String.split is not available in J2ME, but the same effect can be achieved with substring and indexOf.
You must add setActionCommand to the JRadioButton then just do:
if you remove ds.last() than it will show all values of id column
MyAsync<List<? extends BaseObject>> gives T as List<? extends BaseObject>, a list of some unknown type.
In contrast, with your original signature, set is available, and that is why the compiler cannot allow your argument.
However, it cannot set the list (except setting it to null), because it does not know exactly what kind of list is represented by the ?.
Then, the body of getList will be able to get a list from the callback
This is precisely the conversion you are trying to do when calling service.getList(callBack), and since the subtype relation does not hold, the conversion fails.
The easiest way to remove repeated elements is to add the contents to a Set (which will not allow duplicates) and then add the Set back to the ArrayList:
If really necessary you can use the same construction to convert a Set back into a List.
Note: If we want to maintain the insertion order then we need to use LinkedHashSet in place of HashSet.
Matt B's solution gets the number of directories to backtrack wrong -- it should be the length of the base path minus the number of common path elements, minus one (for the last path element, which is either a filename or a trailing "" generated by split)
It happens to work with /a/b/c/ and /a/x/y/, but replace the arguments with /m/n/o/a/b/c/ and /m/n/o/a/x/y/ and you will see the problem.
If you're using Java 1.5 (or higher) you should consider replacing StringBuffer with StringBuilder (if you're still using Java 1.4 you should consider a change of employer instead).
The Most easier way in android for convert List to Comma separated String is By useing android.text.TextUtils
In a class that extends a javax.swing.JFrame use method setIconImage.
You could use the add method and pass it a negative number
Note that both of these solutions change the Date object passed as a parameter rather than returning a completely new Date
If you meant a date-time, then use the Instant class to get a moment on the timeline in UTC
And for the reasons describe above, Arrays.asList won't let you make a List out of the elements of your array.
Arrays.sort only accepts a Comparator when being passed an Object[]
The nice part is that these lists are live views, so operations on them work on the underlying arrays as well (similar to Arrays.asList(), but for primitives).
My solution is similar to Iker Jimenez's solution, but instead of using System.setProperty(...) I use org.apache.log4j.PropertyConfigurator.configure(Properties)
The method toString accept only a String as codepage parameter (stand Java 8).
For the String constructor the codepage can be a String or an instance of java.nio.charset.Charset
On the first line inside main I'm explicitly setting the Object reference obj to null
Instead it contains a pointer (because the type is Integer which is a reference type)
If you attempt to dereference num BEFORE creating the object you get a NullPointerException
The first line declares a variable named num, but, it does not contain a primitive value
This particular NPE can be avoided if the comparison order is reversed; namely, use .equals on a guaranteed non-null object.
This is enough to give us a solution: add a call to printer.setName() before calling printer.print().
The variable can have a default value (and setName can prevent it being set to null):
We can see that the program stops throwing the exception when s.length() is removed from the method.
We find out that s is null, and calling the length method on it throws the exception
Either the print or printString method can check for null, for example:
By following the callers of the method, we see that s is passed in with printString(name) in the print() method, and this.name is null.
Or you can design the class so that name always has a non-null value:
So what about our 2nd scenario? Well we can see that pos is 1, so that means that foo[1] must be null
Where does bar come from? It is a parameter to the test method call, and if we look at how test was called, we can see that it comes from the foo static variable
The first "at" line would say that the exception was thrown in some line in the java.lang.String class, and line 4 of Test.java would be the second "at" line.
In fact there is only one way: it can only happen if foo has the value null
And we can see clearly that we initialized foo to a non-null value
And then we didn't change the contents of foo ..
(In theory, something else could change foo to null ..
where the find method is statically imported from a PersistenceFacade class which defines only static methods, and encapsulates how to obtain the proper Session/EntityManager instance
I explored using GridLayout, BorderLayout, and GridBagLayout and I believe that any extra vertical space that is present in your application is due to the sizing of the JCheckBox component, not related to the layout manager
Depending on your application server, you should be able to provide ILegacyService at any location that fits
Common logic can be pulled up into a superclass of LegacyServiceImpl.
Note that Iterator.remove is the only safe way to modify a collection during iteration; the behavior is unspecified if the underlying collection is modified in any other way while the iteration is in progress.
It results in modCount getting different from expectedModCount, resulting in the exception ConcurrentModificationException.
the best way is to use the remove method of the iterator object, I would go into the specifics of the place where the error "java.util.ConcurrentModificationException" is thrown.
The call to Predicates.cast() is necessary here because a default removeIf method was added on the java.util.Collection interface in Java 8.
With Eclipse Collections (formerly GS Collections), the method removeIf defined on MutableCollection will work:
With Java 8 you can use the new removeIf method
In case ArrayList:remove(int index)- if(index is last element's position) it avoids without System.arraycopy() and takes not time for this.
So, you will obtain the current date and time (into currentDate and currentTime) or some date and time you inform (into informedDate and informedTime) in the currently configured timezone in the JVM.
The code below also informs if the informed date/time is in future (variable schedulable).
You can get the cellID (The id of the phone pole that the mobile is connected to) on a lot of phones thru System.getProperty(String arg) Here i have an example that tries a few keys to see if a cellID can be found
The confusing part here is that Calendar.getTime() returns you a Date in your current timezone, and also that there is no method to modify the timezone of a calendar and have the underlying date rolled also
You might want to look into either creating a class that implements the HttpSession interface yourself for the purposes of unit testing only (a stub), and running your tests off of that, or you should take a look at dwnLoadCel and determine if it really needs to have a reference to the HttpSession, or if it just needs some properties within the HttpSession
Since the method you're testing (dwnLoadCel.doAuthorization()) only depends on an HttpSession object, that is what you should mock
The question becomes: what do you expect the SUT to actually do with the session object? You need to express in your expectations the calls to session and their corresponding return values that are supposed to result in doAuthorization returning true.
In this case, I'd have a static method ContainerBuilder.number(int), which returned a ContainerBuilder, which has the method contains on it
Your second approach is almost right (FreeMarkerViewResolver), but if I remember correctly I also had to extend from FreeMarkerView and TilesView to explicitly bridge both models together.
Use tokens.length() to find out how many, then create your object from the array.
For a_Value = "adf@gmail.com, alamakota@interia.pl, chujtam@ofofofo.pl, <dzwignia@osiem.osiem>>>> lalala@srutututu.pl" it will create List of 5 elements.
Similarly, you can validate if a String is a float or a double but in those cases you have to encounter only one . (dot) in the String and of course check if digits == (aString.length()-1)
I believe there's zero risk running into an exception, because as you can see below you always safely parse int to String and not the other way around.
But for API < 11 you have to import android.text.ClipboardManager and for API >= 11 android.content.ClipboardManager
You only have to grab it as Document, not as a String.
It sounds to me like Monitor should be generic in the type of account it can monitor, so your EmailMonitor should extend Monitor<EmailAccount>
Lets say you call a method, service.listAllPersons() Hit Ctrl+Alt+V and Enter, and variable for return value from method call is inserted:
You'll need to follow the Decorator pattern established in java.io to implement this.
If you express time as the number of milliseconds since January 1, 1970, 00:00:00 GMT (which is how the Date object stores it's date/time), then these date/times are equal, it's just the TimeZone that is different.
Html.formHtml method takes an Html.TagHandler and an Html.ImageGetter as arguments as well as the text to parse.
Basically, when you call executeUpdate() or executeQuery(), use the Statement.RETURN_GENERATED_KEYS constant
You can then call getGeneratedKeys to get the auto-generated keys of all rows created by that execution
Although not significant, setting the StringBuilder's initial buffer size will give a small gain.
Besides the bug(which I discuss in comments on their answer), the big issue I have with their version is that it creates a new CountingOutputStream with every write
Smaller issue is that is uses a delegate when it could just expand the MultipartEntity
From the other answers you can just override the AbstractHttpEntity class children or implementations public void writeTo(OutputStream outstream) method you are using if do not want to create a class.
If you just want to use AWT, then use Graphics.getFontMetrics (optionally specifying the font, for a non-default one) to get a FontMetrics and then FontMetrics.stringWidth to find the width for the specified string.
If I understood your problem correctly, MyMDB listens to a topic on WebLogic, and you want to use an additional JMS destination provided by JBoss, defined in a deployed configuration file and identified by its JNDI name (by default, deploy/jms/jms-ds.xml only contains the configuration for the JMS provider and connection factories -- no data sources).
The real trick is to use the RelativeLayout rather than LinearLayout to position the elements, as shown in this sample layout.xml:
Warning: String.replaceAll() function does not modify the String on which it is applied
An invocation of this method of the form str.replaceAll(regex, repl) yields exactly the same result as the expression
The code written inside a Threads run() method will execute when the runtime object terminates...
an elapsed amount of time, with no reference to a calendar system) then you should probably be using Duration for the most part - you can then call toPeriod (specifying whatever PeriodType you want to reflect whether 25 hours becomes 1 day and 1 hour or not, etc) to get a Period which you can format.
If you're using Java 8 or later: I'd normally suggest using java.time.Duration to represent the duration
super.MyMethod() should be called inside the MyMethod() of the class B
It's actually rare for me to use the idiom "if (object != null && ...".
Then, in the rest of that method, you'll know that object is not null.
Method validate() will throw checked ValidationException if any of the parameters is null (checked or unchecked is more a design/taste issue, but my ValidationException is checked).
This is rather theoretical case and in most cases you should prefer java null safe API, but NullPointerException is subclass of an Exception. Thus it is a form of Throwable that indicates conditions that a reasonable application might want to catch (javadoc)! To use the first most advantage of exceptions and separate error-handling code from 'regular' code (according to creators of Java) it is appropriate, as for me, to catch NullPointerException.
...with two lists of arguments: "", null and null, ImmutableList.of()
I've also added an addCheckbox method like this (surely could be shorter, haven't used Java in a while):
This example was taken from the JDK 1.6 docs of BlockingQueue
The only issue I had is about unwanted scrollbars from the wrapping JScrollPane
This is a basic example in Java, using BasicFileAttributes class:
The following method tries to extract the PID from java.lang.management.ManagementFactory:
To get the process ID of the current Java process one can use the ProcessHandle interface:
If you only need this for writing an InputStream to a File then you can use this simple function:
Notice that they type of the Map is inferred by the method.
Here is a generic; type-safe method which can be called to dump any given Map.
If your reason for iterating trough the Map, is to do an operation on the value and write to a resulting Map
Simple code example (Java 7), using the variables theInputStream and theFileName
Here's a way to produce sorted output for both store Properties.store(OutputStream out, String comments) and Properties.storeToXML(OutputStream os, String comment):
You can implement your LinkedProperties which is sorted instead of using the Properties of Java.
Assuming you have a method JdbcTemplate createJdbcTemplate() in your class, write some code such as this:
I know this answer is close to the final answer, but my answer answers how to do all of that while you are working with List -the generic parent- not ArrayList
It is a bit tricky, but it works, if you are limited to return a List interface, so anyone after you can implement your list whenever he wants.
So if your JS file is for example located at WebContent/js/file.js then you can use the following in your Servlet to get a File handle of it:
Difference between Pattern.quote and Matcher.quoteReplacement was not clear to me before I saw following example
To write and read these data we use the java.util.prefs.Preferences class
Combine with the YearMonth class to determine last day of any month.
Add this class into some random package, and then call the registerExceptionHandler method and you should be ready to go.
This class needs an instance method handle(Throwable) that does your work
However, it is much simpler to use an AtomicInteger in your case or AtomicReference in a more general case.
Here's a method that will concatenate 2 arrays of type Foo (replace Foo in the code with your classname in question).
I found a one-line solution from the good old Apache Commons Lang library. ArrayUtils.addAll(T[], T...)
A solution 100% old java and without System.arraycopy (not available in GWT client for example):
This sounds like create a List<T> and then calls toArray on it
will leave 1 as the value in the map for foo
The Functional Java library's TreeMap datastructure has an update method in the latest trunk head:
I don't know how efficient it is but the below code works as well.You need to define a BiFunction at the beginning
You can make use of computeIfAbsent method in Map interface provided in Java 8.
You need to change the EL-Resolver in faces-config.xml from org.springframework.web.jsf.el.SpringBeanFacesELResolver to
Here's my attempt at a benchmark, checking all three methods (matches() with and without caching the Pattern, and Character.isLetter())
For instance, of C is a subclass of A, then the following will be true:
The following is an example of dumping data from a HashMap onto a DefaultTableModel which is used as the TableModel of a JTable.
Just to illustrate, the following are examples of how to use the DefaultTableModel to show your data from HashMaps and Vectors.
I have to admit that the column names don't appear when using the above examples (I usually use the DefaultTableModel's setDataVector method), so if anyone has any suggestions on how to make the column names appear, please do :)
For using a Vector to include a column of data into a JTable:
I would use Google Collections Guava to do this - if your values are Comparable then you can use
It just calls toArray on the list and then uses Arrays.sort
What you need to do is to add ${java.home}/lib/deploy.jar to your project and to init the library like the following:
A method that takes the pointer would just accept StringFunction instance like so:
Fast solution for Java using an ArrayList and a HashMap: [element -> index].
This is identical to accepted answer (Khoth), but with the unnecessary size and i variables removed.
In Spring MVC land, you can also auto-populate clusterTypes into your model like this
Also XMLUnit.setIgnoreWhitespace() and XMLUnit.setIgnoreAttributeOrder() may be necessary to the case in question.
Method findClasses from our ClassLoaderUtil might be a good starting point to adapt to your needs.
The following code center the Window in the center of the current monitor (ie where the mouse pointer is located).
If you're using DecimalFormat to convert double to String, it's very straightforward:
A few characters would be saved, if this could be just a List
If we see the Definition of Arrays.asList() method you will got something like this
There might be another answer for this too If you see declaration for java.util.Collections.addAll() method.
However, it might be even simpler. I'm assuming you have more fields than that in A that what you gave
To begin, here is an example of how to use the Friend class.
Using ideas from the other answers, here I detail a clear use case example, ending with the reusable Friend class
This works if A is given a concrete type by a subclass:
So now you would be stuck trying to figure out what type T was supposed to stand for, and so on down the rabbit hole.
I wanted to log INFO and below to System.out, and WARNING and above to System.err
As explained in section 17.4 of the book by Naftalin and Wadler, a max method would logically have the following signature:
Which does not match the historical signature of max, and causes old clients to break
Which is equal to the signature of max before Generics.
Re-reading your question, it looks as though you may have been looking for String.split()
The difference will be that the body of getList will be constrained with how it can use the callback
So you should write the signature of getList as follows to make the call work:
To convert a List to a Set you can use the following code:
There is also ImmutableSet from Guava as an option (here is the documentation):
The method and tests I've written depend on the FilenameUtils class from Apache commons IO.
using ranges the previous list can be re-writed as $(1, 5).join(",")
However, you could also write a simpler method that doesn't use the Calendar class such as the following
From there, adjust to a time zone to get a ZonedDateTime object.
There's been some confusion about Arrays.asList in the other answers
Anyway, each of these Lists can be passed to Collections.reverse():
Inside a class that is located in the same package where foo() is defined, which is grandfatherpackage:
Assume that we have 3 classes; Grandfather, Father and Son:
See the findMonitorDeadlockedThreads() and findDeadlockedThreads() method of the ThreadMXBean class.
in which case you are not creating the object obj, rather assuming that is was created before the doSomething method was called
Because you are using Obj_Student but you forgot to initialize it like wise correct code is shown below
I like lots of these suggestions, but for now I think I'll stick with LinkedHashMap + Collections.synchronizedMap
If I do revisit this in the future, I'll probably work on extending ConcurrentHashMap in the same way LinkedHashMap extends HashMap.
get(Object key) and put(Object key, Object value) method calls the above moveToFront method.
You then wrap all of your NodeLists in this class and it will effectively ignore all whitespace nodes
And use it like a charm: Race race = resolveByCode(Race.class, "elf")
To over come this issue, I have used @Enumerated(EnumType.STRING) and my objective got resolved.
Here's the output if I pass the current time ("12:09:05 EDT" from Calendar.getInstance()) in:
The functional spec is f( int, int )-> boolean, not f( String, String )-> boolean (which is kind of the domain of indexOf)
The second is where I set the source and target variables
You might want to think carefully about the generics in the performMonitor call though - what's the return value meant to signify?
Then you just need to invoke the getByValue() method with the String input in it.
The accepted answer of doing simply Jsoup.parse(html).text() has 2 potential issues (with JSoup 1.7.3):
There is a static initialize(Object) method in the Hibernate main class
I also found the apache commons IOUtils class , so :
If map is a Map<K, Collection<V>>, use the idiom computeIfAbsent(...).add(...), like this:
For example, if you have a Graphics variable called g, you'd use:
As you can see, the only difference is all the redundant casts to Object.
Then you can simply reference Settings.DEFAULT_A (yes, a better name would help!).
There is alternative solution, if you can afford to change the body of Settings class:
I've written some custom code to find my RollingFileAppender (which is unnecessarily difficult to get access to in log4j!) which I then cause to roll over
